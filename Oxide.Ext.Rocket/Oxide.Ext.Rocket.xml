<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Oxide.Ext.Rocket</name>
    </assembly>
    <members>
        <member name="T:Oxide.Ext.Rocket.Attributes.BaseCommandAttribute">
            <summary>
            Represents a base attribute for commands 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Attributes.BaseCommandAttribute.Name">
            <summary>
            Name of the command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Attributes.BaseCommandAttribute.IsLocalized">
            <summary>
            If the command name is the localization key
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Attributes.BaseCommandAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Constructor for a base command
            </summary>
            <param name="name">Name of the command</param>
            <param name="isLocalized">If the command name is the localization key for the command</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Attributes.DirectMessageCommandAttribute">
            <summary>
            Used to identify direct message bot commands
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Attributes.DirectMessageCommandAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a Rocket command to be used in direct messages to the bot
            </summary>
            <param name="name">Name of the command</param>
            <param name="isLocalized">If the command name is the localization key for the command</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Attributes.RocketClientAttribute">
            <summary>
            Used to identify which field in a plugin to create a Rocket client for and set the client to.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Attributes.GuildCommandAttribute">
            <summary>
            Used to identify guild bot commands
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Attributes.GuildCommandAttribute.#ctor(System.String,System.Boolean)">
            <summary>
            Creates a Rocket command to be used in guild
            </summary>
            <param name="name">Name of the command</param>
            <param name="isLocalized">If the command name is the localization key for the command</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.BotClient">
            <summary>
            Represents a bot that is connected to Rocket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.BotClient.ActiveBots">
            <summary>
            List of active bots by bot API key
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.BotClient.Settings">
            <summary>
            The settings for this bot of all the combined clients
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.BotClient.Servers">
            <summary>
            All the servers that this bot is in
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.BotClient.DirectMessagesByChannelId">
            <summary>
            All the direct messages that we have seen by channel Id
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.BotClient.DirectMessagesByUserId">
            <summary>
            All the direct messages that we have seen by User ID
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.BotClient.Initialized">
            <summary>
            If the connection is initialized and not disconnected
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.BotClient.Application">
            <summary>
            Application reference for this bot
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.BotClient.BotUser">
            <summary>
            Bot User
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.BotClient.Rest">
            <summary>
            Rest handler for all Rocket API calls
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.BotClient._clients">
            <summary>
            List of all clients that are using this bot client
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.#ctor(Oxide.Ext.Rocket.RocketSettings)">
            <summary>
            Creates a new bot client for the given settings
            </summary>
            <param name="settings"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.GetOrCreate(Oxide.Ext.Rocket.RocketClient)">
            <summary>
            Gets or creates a new bot client for the given Rocket client
            </summary>
            <param name="client">Client to use for creating / loading the bot client</param>
            <returns>Bot client that is created or already exists</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.ConnectWebSocket">
            <summary>
            Connects the websocket to Rocket. Should only be called if the websocket is disconnected
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.DisconnectWebsocket(System.Boolean,System.Boolean)">
            <summary>
            Close the websocket with Rocket
            </summary>
            <param name="reconnect">Should we attempt to reconnect to Rocket after closing</param>
            <param name="resume">Should we attempt to resume the previous session</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.ShutdownBot">
            <summary>
            Called when bot client is no longer used by any client and can be shutdown.
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.AddClient(Oxide.Ext.Rocket.RocketClient)">
            <summary>
            Add a client to this bot client
            </summary>
            <param name="client">Client to add to the bot</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.RemoveClient(Oxide.Ext.Rocket.RocketClient)">
            <summary>
            Remove a client from the bot client
            If not clients are left bot will shutdown
            </summary>
            <param name="client">Client to remove from bot client</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.CallHook(System.String,System.Object[])">
            <summary>
            Call a hook on all clients using this bot
            </summary>
            <param name="hookName">Hook to call</param>
            <param name="args">Args for the hook</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.RequestGuildMembers(Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand)">
            <summary>
            Used to request guild members from Rocket for a specific guild
            </summary>
            <param name="request">Request for guild members</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.UpdateVoiceState(Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdateVoiceStatusCommand)">
            <summary>
            Used to update the voice state for the bot
            </summary>
            <param name="voiceState"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.UpdateStatus(Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdatePresenceCommand)">
            <summary>
            Used to update the bots status in Rocket
            </summary>
            <param name="presenceUpdate"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.GetGuild(System.Nullable{Oxide.Ext.Rocket.Entities.Snowflake})">
            <summary>
            Returns a guild for the specific ID
            </summary>
            <param name="guildId">ID of the guild</param>
            <returns>Guild with the specified ID</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.GetChannel(Oxide.Ext.Rocket.Entities.Snowflake,System.Nullable{Oxide.Ext.Rocket.Entities.Snowflake})">
            <summary>
            Returns the channel for the given channel ID.
            If guild ID is null it will search for a direct message channel
            If guild ID is not null it will search for a guild channel
            </summary>
            <param name="channelId"></param>
            <param name="guildId"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.AddGuild(Oxide.Ext.Rocket.Entities.Guilds.RocketGuild)">
            <summary>
            Adds a guild to the list of servers a bot is in
            </summary>
            <param name="guild"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.AddGuildOrUpdate(Oxide.Ext.Rocket.Entities.Guilds.RocketGuild)">
            <summary>
            Adds a guild if it does not exist or updates the guild with
            </summary>
            <param name="guild"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.RemoveGuild(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Removes guild from the list of servers a bot is in
            </summary>
            <param name="guildId">Guild to remove from bot</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.AddDirectChannel(Oxide.Ext.Rocket.Entities.Channels.RocketChannel)">
            <summary>
            Adds a Direct Message Channel to the bot cache
            </summary>
            <param name="channel">Channel to be added</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.BotClient.RemoveDirectMessageChannel(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Removes a direct message channel if it exists
            </summary>
            <param name="id">ID of the channel to remove</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.ApplicationCommandBuilder">
            <summary>
            Builder to use when building application commands
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.ApplicationCommandBuilder.#ctor(System.String,System.String,Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType)">
            <summary>
            Creates a new Application Command Builder
            </summary>
            <param name="name">Name of the command</param>
            <param name="description">Description of the command</param>
            <param name="type">Command type</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.ApplicationCommandBuilder.SetEnabled(System.Boolean)">
            <summary>
            Set whether the command is enabled by default when the app is added to a guild
            </summary>
            <param name="enabled">If the command is enabled</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.ApplicationCommandBuilder.AddSubCommandGroup(System.String,System.String)">
            <summary>
            Creates a new SubCommandGroup
            SubCommandGroups contain subcommands
            Your root command can only contain 
            </summary>
            <param name="name">Name of the command</param>
            <param name="description">Description of the command</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandGroupBuilder"/></returns>
            <exception cref="T:System.Exception">Thrown if trying to add a subcommand group to</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.ApplicationCommandBuilder.AddSubCommand(System.String,System.String)">
            <summary>
            Adds a sub command to the root command
            </summary>
            <param name="name">Name of the sub command</param>
            <param name="description">Description for the sub command</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandBuilder"/></returns>
            <exception cref="T:System.Exception">Thrown if previous type was not SubCommand or Creation type is not ChatInput</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.ApplicationCommandBuilder.AddOption(Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType,System.String,System.String)">
            <summary>
            Adds a command option.
            </summary>
            <param name="type">The type of option. Cannot be SubCommand or SubCommandGroup</param>
            <param name="name">Name of the option</param>
            <param name="description">Description for the option</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder"/></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.ApplicationCommandBuilder.Build">
            <summary>
            Returns the created command
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder">
            <summary>
            Builder for command options
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.Required(System.Boolean)">
            <summary>
            Set the required state for the option
            </summary>
            <param name="required">If the option is required (Default: true)</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.AutoComplete(System.Boolean)">
            <summary>
            Enable auto complete for the option
            </summary>
            <param name="autoComplete">If the option support auto complete (Default: true)</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.SetMinValue(System.Int32)">
            <summary>
            Min Value for Integer Option
            </summary>
            <param name="minValue">Min Value</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.SetMinValue(System.Double)">
            <summary>
            Min Value for Number Option
            </summary>
            <param name="minValue">Min Value</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.SetMaxValue(System.Int32)">
            <summary>
            Max Value for Integer Option
            </summary>
            <param name="maxValue">Min Value</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.SetMaxValue(System.Double)">
            <summary>
            Max Value for Number Option
            </summary>
            <param name="maxValue">Min Value</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.SetChannelTypes(System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Channels.ChannelType})">
            <summary>
            Set's the channel types for the option
            </summary>
            <param name="types">Types of channels the option allows</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Thrown if <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType"/> is not Channel</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.AddChoice(System.String,System.String)">
            <summary>
            Adds a choice to this option of type string
            </summary>
            <param name="name">Name of the choice</param>
            <param name="value">Value of the choice</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Thrown if option type is not string</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.AddChoice(System.String,System.Int32)">
            <summary>
            Adds a choice to this option of type int
            </summary>
            <param name="name">Name of the choice</param>
            <param name="value">Value of the choice</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Thrown if option type is not int</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.AddChoice(System.String,System.Double)">
            <summary>
            Adds a choice to this option of type double
            </summary>
            <param name="name">Name of the choice</param>
            <param name="value">Value of the choice</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Thrown if option type is not double</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.BuildForApplicationCommand">
            <summary>
            Builds the option for ApplicationCommandBuilder builder
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.CommandOptionBuilder.BuildForSubCommand">
            <summary>
            Builds the option for ApplicationCommandBuilder builder
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.IApplicationCommandBuilder">
            <summary>
            Represents a type that is an Application Command Builder
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandBuilder">
            <summary>
            Base Sub Command builder
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandBuilder._options">
            <summary>
            Options list to have options added to
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandBuilder.AddOption(Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType,System.String,System.String)">
            <summary>
            Adds a new option
            </summary>
            <param name="type">Option data type (Cannot be SubCommand or SubCommandGroup)</param>
            <param name="name">Name of the option</param>
            <param name="description">Description of the option</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandBuilder.BuildForApplicationCommand">
            <summary>
            Returns the built sub command
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandBuilder.BuildForSubCommandGroup">
            <summary>
            Returns the built sub command
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandGroupBuilder">
            <summary>
            Builder for Sub Command Groups
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandGroupBuilder.AddSubCommand(System.String,System.String)">
            <summary>
            Adds a sub command to this sub command group
            </summary>
            <param name="name">Name of the command</param>
            <param name="description">Description of the command</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.ApplicationCommands.SubCommandBuilder"/></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder">
            <summary>
            Builds a new RocketEmbed
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddTitle(System.String)">
            <summary>
            Adds a title to the embed message
            </summary>
            <param name="title">Title to add</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddDescription(System.String)">
            <summary>
            Adds a description to the embed message
            </summary>
            <param name="description">description to add</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddUrl(System.String)">
            <summary>
            Adds a url to the embed message
            </summary>
            <param name="url"></param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddAuthor(System.String,System.String,System.String,System.String)">
            <summary>
            Adds an author to the embed message. The author will appear above the title
            </summary>
            <param name="name">Name of the author</param>
            <param name="iconUrl">Icon Url to use for the author</param>
            <param name="url">Url to go to when the authors name is clicked on</param>
            <param name="proxyIconUrl">Backup icon url. Can be left null if you only have one icon url</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddFooter(System.String,System.String,System.String)">
            <summary>
            Adds a footer to the embed message
            </summary>
            <param name="text">Text to be added to the footer</param>
            <param name="iconUrl">Icon url to add in the footer. Appears to the left of the text</param>
            <param name="proxyIconUrl">Backup icon url. Can be left null if you only have one icon url</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddColor(Oxide.Ext.Rocket.Entities.Permissions.RocketColor)">
            <summary>
            Adds a Rocket Color to the embed
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddColor(System.UInt32)">
            <summary>
            Adds an int based color to the embed. Color appears as a bar on the left side of the message
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddColor(System.String)">
            <summary>
            Adds a hex based color. Color appears as a bar on the left side of the message
            </summary>
            <param name="color">Color in string hex format</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Exception thrown if color is outside of range</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddColor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Adds a RGB based color. Color appears as a bar on the left side of the message
            </summary>
            <param name="red">Red value</param>
            <param name="green">Green value</param>
            <param name="blue">Blue value</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a RGB based color. Color appears as a bar on the left side of the message
            </summary>
            <param name="red">Red value between 0 - 255</param>
            <param name="green">Green value between 0 - 255</param>
            <param name="blue">Blue value between 0 - 255</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Thrown if red, green, or blue is outside of range</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddColor(System.Single,System.Single,System.Single)">
            <summary>
            Adds a RGB based color. Color appears as a bar on the left side of the message
            </summary>
            <param name="red">Red value between 0 - 1</param>
            <param name="green">Green value between 0 - 1</param>
            <param name="blue">Blue value between 0 - 1</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Thrown if red, green, or blue is outside of range</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddColor(System.Double,System.Double,System.Double)">
            <summary>
            Adds a RGB based color. Color appears as a bar on the left side of the message
            </summary>
            <param name="red">Red value between 0 - 1</param>
            <param name="green">Green value between 0 - 1</param>
            <param name="blue">Blue value between 0 - 1</param>
            <returns>This</returns>
            <exception cref="T:System.Exception">Thrown if red, green, or blue is outside of range</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddNowTimestamp">
            <summary>
            Adds a timestamp to an embed with the current time
            </summary>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddTimestamp(System.DateTime)">
            <summary>
            Adds a timestamp to an embed with the given time
            </summary>
            <param name="timestamp">Timestamp to set for the embed</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddBlankField(System.Boolean)">
            <summary>
            Adds a blank field.
            If inline it will add a blank column.
            If not inline will add a blank row
            </summary>
            <param name="inline">If the field is inline</param>
            <returns>This</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddField(System.String,System.String,System.Boolean)">
            <summary>
            Adds a new field with the name as the title and value as the value.
            If inline will add a new column. If row will add in a new row.
            </summary>
            <param name="name"></param>
            <param name="value"></param>
            <param name="inline"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddImage(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Adds an image to the embed. The url should point to the url of the image.
            If using attachment image you can make the url: "attachment://{image name}.{image extension}
            </summary>
            <param name="url">Url for the image</param>
            <param name="width">width of the image</param>
            <param name="height">height of the image</param>
            <param name="proxyUrl">Backup url for the image</param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddThumbnail(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Adds a thumbnail in the top right corner of the embed
            If using attachment image you can make the url: "attachment://{image name}.{image extension}
            </summary>
            <param name="url">Url for the image</param>
            <param name="width">width of the image</param>
            <param name="height">height of the image</param>
            <param name="proxyUrl">Backup url for the image</param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddVideo(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Adds a video to the embed
            </summary>
            <param name="url">Url for the video</param>
            <param name="width">Width of the video</param>
            <param name="height">Height of the video</param>
            <param name="proxyUrl">Proxy Url for the video</param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.AddProvider(System.String,System.String)">
            <summary>
            Adds a provider to the embed
            </summary>
            <param name="name">Name for the provider</param>
            <param name="url">Url for the provider</param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.Build">
            <summary>
            Returns the built embed
            </summary>
            <returns><see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed"/></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.RocketEmbedBuilder.BuildList">
            <summary>
            Returns the built embed in a list
            </summary>
            <returns>List of <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed"/></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder">
            <summary>
            Builder for Message Components
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder.#ctor">
            <summary>
            Creates a new MessageComponentBuilder
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder.AddActionButton(Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonStyle,System.String,System.String,System.Boolean,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji)">
            <summary>
            Adds an action button to the current action row
            </summary>
            <param name="style">Button Style <a href="https://Rocket.com/developers/docs/interactions/message-components#button-object-button-styles">Button Styles</a></param>
            <param name="label">The text of the button</param>
            <param name="customId">The unique id of the button. Used to identify which button was clicked</param>
            <param name="disabled">If this button is disabled</param>
            <param name="emoji">Emoji to display with the button</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder"/></returns>
            <exception cref="T:System.Exception">
                Throw if the button style is link or if the button goes outside the max number of action rows
            </exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder.AddDummyButton(System.String,System.Boolean)">
            <summary>
            Adds a dummy button that doesn't do anything
            </summary>
            <param name="label">The text of the button</param>
            <param name="disabled">If this button is disabled</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder"/></returns>
            <exception cref="T:System.Exception"> Throw if the button goes outside the max number of action rows</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder.AddLinkButton(System.String,System.String,System.Boolean,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji)">
            <summary>
            Adds a link button to the current action row
            </summary>
            <param name="label">Text on the button</param>
            <param name="url">URL for the button</param>
            <param name="disabled">if the button should be disabled</param>
            <param name="emoji">Emoji to display on the button</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder"/></returns>
            <exception cref="T:System.Exception">Thrown if the button goes outside the max number of action rows</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder.AddSelectMenu(System.String,System.String,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Adds a select menu to a new action row
            </summary>
            <param name="customId">Unique ID for the select menu</param>
            <param name="placeholder">Text to display if no value is selected yet</param>
            <param name="minValues">The min number of options you must select</param>
            <param name="maxValues">The max number of options you can select</param>
            <param name="disabled">If the select menu should be disabled</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.MessageComponents.SelectMenuComponentBuilder"/></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder.AddInputText(System.String,System.String,Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextStyles,System.String,System.Nullable{System.Boolean},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Adds a select menu to a new action row
            </summary>
            <param name="customId">Unique ID for the select menu</param>
            <param name="label">Label for the input text</param>
            <param name="style">Style of the Input Text</param>
            <param name="value">Default value for the Input Text</param>
            <param name="required">Is the Input Text Required to be filled out</param>
            <param name="placeholder">Text to display if no value is selected yet</param>
            <param name="minLength">The min number of options you must select</param>
            <param name="maxLength">The max number of options you can select</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder"/></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder.Build">
            <summary>
            Returns the built action rows
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.MessageComponents.SelectMenuComponentBuilder">
            <summary>
            Builder for Select Menus
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.SelectMenuComponentBuilder.AddOption(System.String,System.String,System.String,System.Boolean,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji)">
            <summary>
            Adds an option to a select menu;
            </summary>
            <param name="label">Display text for the select option</param>
            <param name="value">Selected value for the select option</param>
            <param name="description">Description of the select option</param>
            <param name="default">Default selected option</param>
            <param name="emoji">Emoji to display with the option</param>
            <exception cref="T:System.Exception">Throw is more than 25 options are added</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.MessageComponents.SelectMenuComponentBuilder.Build">
            <summary>
            Returns the root builder
            </summary>
            <returns><see cref="T:Oxide.Ext.Rocket.Builders.MessageComponents.MessageComponentBuilder"/></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Builders.QueryStringBuilder">
            <summary>
            Builder used to build query strings for urls
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.QueryStringBuilder.Add(System.String,System.String)">
            <summary>
            Add a key value pair to the query string
            </summary>
            <param name="key">Key name</param>
            <param name="value">Key value</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.QueryStringBuilder.AddList``1(System.String,System.Collections.Generic.List{``0},System.String)">
            <summary>
            Add a list of values with the specified separator
            </summary>
            <param name="key">Key name</param>
            <param name="list">List to be added</param>
            <param name="separator">Separator for the list</param>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Oxide.Ext.Rocket.Builders.QueryStringBuilder.ToString">
            <summary>
            Returns the query string as a string.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Configuration.RocketCommandsConfig">
            <summary>
            Represents Rocket extension command configuration
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Configuration.RocketCommandsConfig.CommandPrefixes">
            <summary>
            Array of command prefixes for Rocket commands
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Configuration.RocketConfig">
            <summary>
            Represents Rocket Extension Config
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Configuration.RocketConfig.Commands">
            <summary>
            Rocket Config commands options
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Configuration.RocketConfig.#ctor(System.String)">
            <summary>
            Constructor for Rocket config
            </summary>
            <param name="filename">Filename to use</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Configuration.RocketConfig.Load(System.String)">
            <summary>
            Load the config file and populate it.
            </summary>
            <param name="filename"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Constants.RocketHooks">
            <summary>
            Represents all hooks available in the Rocket extension
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketClientConnected">
            <code>
            void OnRocketClientConnected(Plugin owner, RocketClient client)
            {
                Puts("OnRocketClientConnected Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketClientDisconnected">
            <code>
            void OnRocketClientDisconnected(Plugin owner, RocketClient client)
            {
                Puts("OnRocketClientDisconnected Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketClientCreated">
            <code>
            void OnRocketClientCreated()
            {
                Puts("OnRocketClientCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketWebsocketOpened">
            <code>
            void OnRocketWebsocketOpened()
            {
                Puts("OnRocketWebsocketOpened Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketWebsocketClosed">
            <code>
            void OnRocketWebsocketClosed(string reason, ushort code, bool wasClean)
            {
                Puts("OnRocketWebsocketClosed Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketWebsocketErrored">
            <code>
            void OnRocketWebsocketErrored(Exception ex, string message)
            {
                Puts("OnRocketWebsocketErrored Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketSetupHeartbeat">
            <code>
            void OnRocketSetupHeartbeat(float heartbeat)
            {
                Puts("OnRocketHeartbeatSent Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketHeartbeatSent">
            <code>
            void OnRocketHeartbeatSent()
            {
                Puts("OnRocketHeartbeatSent Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketPlayerLinked">
            <code>
            void OnRocketPlayerLinked(IPlayer player, RocketUser Rocket)
            {
                Puts("OnRocketPlayerLinked Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketPlayerUnlinked">
            <code>
            void OnRocketPlayerUnlinked(IPlayer player, RocketUser Rocket)
            {
                Puts("OnRocketPlayerUnlinked Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGatewayReady">
            <code>
            void OnRocketGatewayReady(GatewayReadyEvent ready)
            {
                Puts("OnRocketGatewayReady Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGatewayResumed">
            <code>
            void OnRocketGatewayResumed(GatewayResumedEvent resume)
            {
                Puts("OnRocketGatewayResumed Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectChannelCreated">
            <code>
            void OnRocketDirectChannelCreated(Channel channel)
            {
                Puts("OnRocketDirectChannelCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildChannelCreated">
            <code>
            void OnRocketGuildChannelCreated(Channel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectChannelUpdated">
            <code>
            Note: previous will be null if previous channel not found
            void OnRocketDirectChannelUpdated(Channel channel, RocketChannel previous)
            {
                Puts("OnRocketDirectChannelUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildChannelUpdated">
            <code>
            void OnRocketGuildChannelUpdated(RocketChannel channel, RocketChannel previous, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectChannelDeleted">
            <code>
            Note: Not sure if this will ever happen but we handle it if it does
            void OnRocketDirectChannelDeleted(RocketChannel channel)
            {
                Puts("OnRocketDirectChannelDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildChannelDeleted">
            <code>
            void OnRocketGuildChannelDeleted(RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectChannelPinsUpdated">
            <code>
            Note: Channel will be null if we haven't seen it yet
            void OnRocketDirectChannelPinsUpdated(ChannelPinsUpdatedEvent update, RocketChannel channel)
            {
                Puts("OnRocketDirectChannelPinsUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildChannelPinsUpdated">
            <code>
            void OnRocketGuildChannelPinsUpdated(ChannelPinsUpdatedEvent update, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelPinsUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildCreated">
            <code>
            void OnRocketGuildCreated(RocketGuild guild)
            {
                Puts("OnRocketGuildCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildUpdated">
            <code>
            Note: previous will be null if guild previously not loaded
            void OnRocketGuildUpdated(RocketGuild guild, RocketGuild previous)
            {
                Puts("OnRocketGuildUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildUnavailable">
            <code>
            void OnRocketGuildUnavailable(RocketGuild guild)
            {
                Puts("OnRocketGuildUnavailable Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildDeleted">
            <code>
            void OnRocketGuildDeleted(RocketGuild guild)
            {
                Puts("OnRocketGuildDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMemberBanned">
            <code>
            void OnRocketGuildMemberBanned(GuildMemberBannedEvent ban, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberBanned Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMemberUnbanned">
            <code>
            void OnRocketGuildMemberUnbanned(GuildMemberBannedEvent ban, RocketGuild guild)
            {
                Puts("OnRocketGuildBanRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildEmojisUpdated">
            <code>
            void OnRocketGuildEmojisUpdated(GuildEmojisUpdatedEvent emojis, Hash&lt;Snowflake, RocketEmoji&gt; previous, RocketGuild guild)
            {
                Puts("OnRocketGuildEmojisUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildStickersUpdated">
            <code>
            void OnRocketGuildStickersUpdated(GuildStickersUpdatedEvent stickers, Hash&lt;Snowflake, RocketSticker&gt; previous, RocketGuild guild)
            {
                Puts("OnRocketGuildStickersUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildIntegrationsUpdated">
            <code>
            void OnRocketGuildIntegrationsUpdated(GuildIntegrationsUpdatedEvent integration, RocketGuild guild)
            {
                Puts("OnRocketGuildIntegrationsUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMemberAdded">
            <code>
            void OnRocketGuildMemberAdded(GuildMemberAddedEvent member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberAdded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMemberRemoved">
            <code>
            void OnRocketGuildMemberRemoved(GuildMemberRemovedEvent member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMemberUpdated">
            <code>
            void OnRocketGuildMemberUpdated(GuildMemberUpdatedEvent member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMembersLoaded">
            <code>
            void OnRocketGuildMembersLoaded(RocketGuild guild)
            {
                Puts("OnRocketGuildMembersLoaded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMembersChunk">
            <code>
            void OnRocketGuildMembersChunk(GuildMembersChunkEvent chunk, RocketGuild guild)
            {
                Puts("OnRocketGuildMembersChunk Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildRoleCreated">
            <code>
            void OnRocketGuildRoleCreated(RocketRole role, RocketGuild guild)
            {
                Puts("OnRocketGuildRoleCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildRoleUpdated">
            <code>
            void OnRocketGuildRoleUpdated(RocketRole role, RocketRole previous, RocketGuild guild)
            {
                Puts("OnRocketGuildRoleUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildRoleDeleted">
            <code>
            void OnRocketGuildRoleDeleted(RocketRole role, RocketGuild guild)
            {
                Puts("OnRocketGuildRoleDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketCommand">
            <code>
            void OnRocketCommand(RocketMessage message, string cmd, string[] args)
            {
                Puts("OnRocketCommand Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessageCreated">
            <code>
            Note: Channel may be null if we haven't seen it yet
            void OnRocketDirectMessageCreated(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessageCreated">
            <code>
            void OnRocketGuildMessageCreated(RocketMessage message, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessageUpdated">
            <code>
            void OnRocketDirectMessageUpdated(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessageUpdated">
            <code>
            void OnRocketDirectMessageUpdated(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessageDeleted">
            <code>
            void OnRocketDirectMessageDeleted(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessageDeleted">
            <code>
            void OnRocketDirectMessageDeleted(RocketMessage message, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketDirectMessageDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessagesBulkDeleted">
            <code>
            void OnRocketDirectMessagesBulkDeleted(List&lt;Snowflake&gt; messageIds, RocketChannel channel)
            {
                Puts("OnRocketDirectMessagesBulkDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessagesBulkDeleted">
            <code>
            void OnRocketGuildMessagesBulkDeleted(List&lt;Snowflake&gt; messageIds, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessagesBulkDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessageReactionAdded">
            <code>
            void OnRocketDirectMessageReactionAdded(MessageReactionAddedEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionAdded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessageReactionAdded">
            <code>
            void OnRocketGuildMessageReactionAdded(MessageReactionAddedEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionAdded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessageReactionRemoved">
            <code>
            void OnRocketDirectMessageReactionRemoved(MessageReactionRemovedEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessageReactionRemoved">
            <code>
            void OnRocketGuildMessageReactionRemoved(MessageReactionRemovedEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessageReactionRemovedAll">
            <code>
            void OnRocketDirectMessageReactionRemovedAll(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionRemovedAll Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessageReactionRemovedAll">
            <code>
            void OnRocketGuildMessageReactionRemovedAll(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionRemovedAll Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectMessageReactionEmojiRemoved">
            <code>
            void OnRocketDirectMessageReactionEmojiRemoved(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionEmojiRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMessageReactionEmojiRemoved">
            <code>
            void OnRocketGuildMessageReactionEmojiRemoved(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionEmojiRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildMemberPresenceUpdated">
            <code>
            void OnRocketGuildMemberPresenceUpdated(PresenceUpdatedEvent update, GuildMember member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberPresenceUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectTypingStarted">
            <code>
            void OnRocketDirectTypingStarted(TypingStartedEvent typing, RocketChannel channel)
            {
                Puts("OnRocketDirectTypingStarted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildTypingStarted">
            <code>
            void OnRocketGuildTypingStarted(TypingStartedEvent typing, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildTypingStarted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketUserUpdated">
            <code>
            void OnRocketUserUpdated(RocketUser user)
            {
                Puts("OnRocketUserUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectVoiceStateUpdated">
            <code>
            void OnRocketDirectVoiceStateUpdated(VoiceState voice, RocketChannel channel)
            {
                Puts("OnRocketDirectVoiceStateUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildVoiceStateUpdated">
            <code>
            void OnRocketGuildVoiceStateUpdated(VoiceState voice, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildVoiceStateUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildVoiceServerUpdated">
            <code>
            void OnRocketGuildVoiceServerUpdated(VoiceServerUpdatedEvent voice, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildVoiceServerUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildWebhookUpdated">
            <code>
            void OnRocketGuildWebhookUpdated(WebhooksUpdatedEvent webhook, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildWebhookUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectInviteCreated">
            <code>
            void OnRocketDirectInviteCreated(InviteCreatedEvent invite, RocketChannel channel)
            {
                Puts("OnRocketDirectInviteCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildInviteCreated">
            <code>
            void OnRocketGuildInviteCreated(InviteCreatedEvent invite, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildInviteCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketDirectInviteDeleted">
            <code>
            void OnRocketDirectInviteDeleted(InviteCreatedEvent invite, RocketChannel channel)
            {
                Puts("OnRocketDirectInviteDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildInviteDeleted">
            <code>
            void OnRocketGuildInviteDeleted(InviteCreatedEvent invite, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildInviteDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketInteractionCreated">
            <code>
            void OnRocketInteractionCreated(RocketInteraction interaction)
            {
                Puts("OnRocketInteractionCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildIntegrationCreated">
            <code>
            void OnRocketGuildIntegrationCreated(IntegrationCreatedEvent integration, RocketGuild guild)
            {
                Puts("OnRocketGuildIntegrationCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildIntegrationUpdated">
            <code>
            void OnRocketGuildIntegrationUpdated(IntegrationUpdatedEvent interaction, RocketGuild guild)
            {
                Puts("OnRocketGuildIntegrationUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketIntegrationDeleted">
            <code>
            void OnRocketIntegrationDeleted(IntegrationDeletedEvent interaction, RocketGuild guild)
            {
                Puts("OnRocketIntegrationDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildThreadCreated">
            <code>
            void OnRocketGuildThreadCreated(RocketChannel thread, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildThreadUpdated">
            <code>
            void OnRocketGuildThreadUpdated(RocketChannel thread, RocketChannel previous, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildThreadDeleted">
            <code>
            void OnRocketGuildThreadDeleted(RocketChannel thread, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildThreadListSynced">
            <code>
            void OnRocketGuildThreadListSynced(ThreadListSyncEvent sync, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadListSynced Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildThreadMemberUpdated">
            <code>
            void OnRocketGuildThreadMemberUpdated(ThreadMember member, RocketChannel thread, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadMemberUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketGuildThreadMembersUpdated">
            <code>
            void OnRocketGuildThreadMembersUpdated(ThreadMembersUpdatedEvent members, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadMembersUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketUnhandledCommand">
            <code>
            void OnRocketUnhandledCommand(EventPayload payload)
            {
                Puts("OnRocketUnhandledCommand Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketStageInstanceCreated">
            <code>
            void OnRocketStageInstanceCreated(StageInstance stage, RocketGuild guild)
            {
                Puts("OnRocketStageInstanceCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketStageInstanceUpdated">
            <code>
            void OnRocketStageInstanceUpdated(StageInstance stage, StageInstance previous, RocketGuild guild)
            {
                Puts("OnRocketStageInstanceUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketHooks.OnRocketStageInstanceDeleted">
            <code>
            void OnRocketStageInstanceDeleted(StageInstance stage, RocketGuild guild)
            {
                Puts("OnRocketStageInstanceDeleted Works!");
            }
            </code>
        </member>
        <member name="T:Oxide.Ext.Rocket.Constants.RocketExtHooks">
            <summary>
            Represents all hooks available in the Rocket extension
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketClientConnected">
            <code>
            void OnRocketClientConnected(Plugin owner, RocketClient client)
            {
                Puts("OnRocketClientConnected Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketClientDisconnected">
            <code>
            void OnRocketClientDisconnected(Plugin owner, RocketClient client)
            {
                Puts("OnRocketClientDisconnected Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketClientCreated">
            <code>
            void OnRocketClientCreated()
            {
                Puts("OnRocketClientCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketWebsocketOpened">
            <code>
            void OnRocketWebsocketOpened()
            {
                Puts("OnRocketWebsocketOpened Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketWebsocketClosed">
            <code>
            void OnRocketWebsocketClosed(string reason, ushort code, bool wasClean)
            {
                Puts("OnRocketWebsocketClosed Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketWebsocketErrored">
            <code>
            void OnRocketWebsocketErrored(Exception ex, string message)
            {
                Puts("OnRocketWebsocketErrored Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketSetupHeartbeat">
            <code>
            void OnRocketSetupHeartbeat(float heartbeat)
            {
                Puts("OnRocketHeartbeatSent Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketHeartbeatSent">
            <code>
            void OnRocketHeartbeatSent()
            {
                Puts("OnRocketHeartbeatSent Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketPlayerLinked">
            <code>
            void OnRocketPlayerLinked(IPlayer player, RocketUser Rocket)
            {
                Puts("OnRocketPlayerLinked Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketPlayerUnlinked">
            <code>
            void OnRocketPlayerUnlinked(IPlayer player, RocketUser Rocket)
            {
                Puts("OnRocketPlayerUnlinked Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGatewayReady">
            <code>
            void OnRocketGatewayReady(GatewayReadyEvent ready)
            {
                Puts("OnRocketGatewayReady Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGatewayResumed">
            <code>
            void OnRocketGatewayResumed(GatewayResumedEvent resume)
            {
                Puts("OnRocketGatewayResumed Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectChannelCreated">
            <code>
            void OnRocketDirectChannelCreated(Channel channel)
            {
                Puts("OnRocketDirectChannelCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildChannelCreated">
            <code>
            void OnRocketGuildChannelCreated(Channel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectChannelUpdated">
            <code>
            Note: previous will be null if previous channel not found
            void OnRocketDirectChannelUpdated(Channel channel, RocketChannel previous)
            {
                Puts("OnRocketDirectChannelUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildChannelUpdated">
            <code>
            void OnRocketGuildChannelUpdated(RocketChannel channel, RocketChannel previous, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectChannelDeleted">
            <code>
            Note: Not sure if this will ever happen but we handle it if it does
            void OnRocketDirectChannelDeleted(RocketChannel channel)
            {
                Puts("OnRocketDirectChannelDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildChannelDeleted">
            <code>
            void OnRocketGuildChannelDeleted(RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectChannelPinsUpdated">
            <code>
            Note: Channel will be null if we haven't seen it yet
            void OnRocketDirectChannelPinsUpdated(ChannelPinsUpdatedEvent update, RocketChannel channel)
            {
                Puts("OnRocketDirectChannelPinsUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildChannelPinsUpdated">
            <code>
            void OnRocketGuildChannelPinsUpdated(ChannelPinsUpdatedEvent update, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildChannelPinsUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildCreated">
            <code>
            void OnRocketGuildCreated(GuildRocketGuild guild)
            {
                Puts("OnRocketGuildCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildUpdated">
            <code>
            Note: previous will be null if guild previously not loaded
            void OnRocketGuildUpdated(RocketGuild guild, RocketGuild previous)
            {
                Puts("OnRocketGuildUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildUnavailable">
            <code>
            void OnRocketGuildUnavailable(RocketGuild guild)
            {
                Puts("OnRocketGuildUnavailable Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildDeleted">
            <code>
            void OnRocketGuildDeleted(RocketGuild guild)
            {
                Puts("OnRocketGuildDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMemberBanned">
            <code>
            void OnRocketGuildMemberBanned(GuildMemberBannedEvent ban, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberBanned Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMemberUnbanned">
            <code>
            void OnRocketGuildMemberUnbanned(GuildMemberBannedEvent ban, RocketGuild guild)
            {
                Puts("OnRocketGuildBanRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildEmojisUpdated">
            <code>
            void OnRocketGuildEmojisUpdated(GuildEmojisUpdatedEvent emojis, Hash&lt;Snowflake, RocketEmoji&gt; previous, RocketGuild guild)
            {
                Puts("OnRocketGuildEmojisUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildStickersUpdated">
            <code>
            void OnRocketGuildStickersUpdated(GuildStickersUpdatedEvent stickers, Hash&lt;Snowflake, RocketSticker&gt; previous, RocketGuild guild)
            {
                Puts("OnRocketGuildStickersUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildIntegrationsUpdated">
            <code>
            void OnRocketGuildIntegrationsUpdated(GuildIntegrationsUpdatedEvent integration, RocketGuild guild)
            {
                Puts("OnRocketGuildIntegrationsUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMemberAdded">
            <code>
            void OnRocketGuildMemberAdded(GuildMemberAddedEvent member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberAdded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMemberRemoved">
            <code>
            void OnRocketGuildMemberRemoved(GuildMemberRemovedEvent member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMemberUpdated">
            <code>
            void OnRocketGuildMemberUpdated(GuildMemberUpdatedEvent member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMembersLoaded">
            <code>
            void OnRocketGuildMembersLoaded(RocketGuild guild)
            {
                Puts("OnRocketGuildMembersLoaded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMembersChunk">
            <code>
            void OnRocketGuildMembersChunk(GuildMembersChunkEvent chunk, RocketGuild guild)
            {
                Puts("OnRocketGuildMembersChunk Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildRoleCreated">
            <code>
            void OnRocketGuildRoleCreated(RocketRole role, RocketGuild guild)
            {
                Puts("OnRocketGuildRoleCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildRoleUpdated">
            <code>
            void OnRocketGuildRoleUpdated(RocketRole role, RocketRole previous, RocketGuild guild)
            {
                Puts("OnRocketGuildRoleUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildRoleDeleted">
            <code>
            void OnRocketGuildRoleDeleted(RocketRole role, RocketGuild guild)
            {
                Puts("OnRocketGuildRoleDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildScheduledEventCreated">
            <code>
            void OnRocketGuildScheduledEventCreated(GuildScheduledEvent guildEvent, RocketGuild guild)
            {
                Puts("OnRocketGuildScheduledEventCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildScheduledEventUpdated">
            <code>
            void OnRocketGuildScheduledEventUpdated(GuildScheduledEvent guildEvent, RocketGuild guild)
            {
                Puts("OnRocketGuildScheduledEventUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildScheduledEventDeleted">
            <code>
            void OnRocketGuildScheduledEventDeleted(GuildScheduledEvent guildEvent, RocketGuild guild)
            {
                Puts("OnRocketGuildScheduledEventDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildScheduledEventUserAdded">
            <code>
            void OnRocketGuildScheduledEventUserAdded(GuildScheduleEventUserAddedEvent added, GuildScheduledEvent, scheduledEvent, RocketGuild guild)
            {
                Puts("OnRocketGuildScheduledEventUserAdded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildScheduledEventUserRemoved">
            <code>
            void OnRocketGuildScheduledEventUserRemoved(GuildScheduleEventUserRemovedEvent removed, GuildScheduledEvent, scheduledEvent, RocketGuild guild)
            {
                Puts("OnRocketGuildScheduledEventUserRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketCommand">
            <code>
            void OnRocketCommand(RocketMessage message, string cmd, string[] args)
            {
                Puts("OnRocketCommand Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessageCreated">
            <code>
            Note: Channel may be null if we haven't seen it yet
            void OnRocketDirectMessageCreated(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessageCreated">
            <code>
            void OnRocketGuildMessageCreated(RocketMessage message, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessageUpdated">
            <code>
            void OnRocketDirectMessageUpdated(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessageUpdated">
            <code>
            void OnRocketDirectMessageUpdated(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessageDeleted">
            <code>
            void OnRocketDirectMessageDeleted(RocketMessage message, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessageDeleted">
            <code>
            void OnRocketDirectMessageDeleted(RocketMessage message, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketDirectMessageDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessagesBulkDeleted">
            <code>
            void OnRocketDirectMessagesBulkDeleted(List&lt;Snowflake&gt; messageIds, RocketChannel channel)
            {
                Puts("OnRocketDirectMessagesBulkDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessagesBulkDeleted">
            <code>
            void OnRocketGuildMessagesBulkDeleted(List&lt;Snowflake&gt; messageIds, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessagesBulkDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessageReactionAdded">
            <code>
            void OnRocketDirectMessageReactionAdded(MessageReactionAddedEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionAdded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessageReactionAdded">
            <code>
            void OnRocketGuildMessageReactionAdded(MessageReactionAddedEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionAdded Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessageReactionRemoved">
            <code>
            void OnRocketDirectMessageReactionRemoved(MessageReactionRemovedEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessageReactionRemoved">
            <code>
            void OnRocketGuildMessageReactionRemoved(MessageReactionRemovedEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessageReactionRemovedAll">
            <code>
            void OnRocketDirectMessageReactionRemovedAll(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionRemovedAll Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessageReactionRemovedAll">
            <code>
            void OnRocketGuildMessageReactionRemovedAll(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionRemovedAll Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectMessageReactionEmojiRemoved">
            <code>
            void OnRocketDirectMessageReactionEmojiRemoved(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel)
            {
                Puts("OnRocketDirectMessageReactionEmojiRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMessageReactionEmojiRemoved">
            <code>
            void OnRocketGuildMessageReactionEmojiRemoved(MessageReactionRemovedAllEmojiEvent reaction, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildMessageReactionEmojiRemoved Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildMemberPresenceUpdated">
            <code>
            void OnRocketGuildMemberPresenceUpdated(PresenceUpdatedEvent update, GuildMember member, RocketGuild guild)
            {
                Puts("OnRocketGuildMemberPresenceUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectTypingStarted">
            <code>
            void OnRocketDirectTypingStarted(TypingStartedEvent typing, RocketChannel channel)
            {
                Puts("OnRocketDirectTypingStarted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildTypingStarted">
            <code>
            void OnRocketGuildTypingStarted(TypingStartedEvent typing, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildTypingStarted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketUserUpdated">
            <code>
            void OnRocketUserUpdated(RocketUser user)
            {
                Puts("OnRocketUserUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectVoiceStateUpdated">
            <code>
            void OnRocketDirectVoiceStateUpdated(VoiceState voice, RocketChannel channel)
            {
                Puts("OnRocketDirectVoiceStateUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildVoiceStateUpdated">
            <code>
            void OnRocketGuildVoiceStateUpdated(VoiceState voice, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildVoiceStateUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildVoiceServerUpdated">
            <code>
            void OnRocketGuildVoiceServerUpdated(VoiceServerUpdatedEvent voice, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildVoiceServerUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildWebhookUpdated">
            <code>
            void OnRocketGuildWebhookUpdated(WebhooksUpdatedEvent webhook, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildWebhookUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectInviteCreated">
            <code>
            void OnRocketDirectInviteCreated(InviteCreatedEvent invite, RocketChannel channel)
            {
                Puts("OnRocketDirectInviteCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildInviteCreated">
            <code>
            void OnRocketGuildInviteCreated(InviteCreatedEvent invite, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildInviteCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketDirectInviteDeleted">
            <code>
            void OnRocketDirectInviteDeleted(InviteCreatedEvent invite, RocketChannel channel)
            {
                Puts("OnRocketDirectInviteDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildInviteDeleted">
            <code>
            void OnRocketGuildInviteDeleted(InviteCreatedEvent invite, RocketChannel channel, RocketGuild guild)
            {
                Puts("OnRocketGuildInviteDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketInteractionCreated">
            <code>
            void OnRocketInteractionCreated(RocketInteraction interaction)
            {
                Puts("OnRocketInteractionCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildIntegrationCreated">
            <code>
            void OnRocketGuildIntegrationCreated(IntegrationCreatedEvent integration, RocketGuild guild)
            {
                Puts("OnRocketGuildIntegrationCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildIntegrationUpdated">
            <code>
            void OnRocketGuildIntegrationUpdated(IntegrationUpdatedEvent interaction, RocketGuild guild)
            {
                Puts("OnRocketGuildIntegrationUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketIntegrationDeleted">
            <code>
            void OnRocketIntegrationDeleted(IntegrationDeletedEvent interaction, RocketGuild guild)
            {
                Puts("OnRocketIntegrationDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildThreadCreated">
            <code>
            void OnRocketGuildThreadCreated(RocketChannel thread, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildThreadUpdated">
            <code>
            void OnRocketGuildThreadUpdated(RocketChannel thread, RocketChannel previous, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildThreadDeleted">
            <code>
            void OnRocketGuildThreadDeleted(RocketChannel thread, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadDeleted Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildThreadListSynced">
            <code>
            void OnRocketGuildThreadListSynced(ThreadListSyncEvent sync, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadListSynced Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildThreadMemberUpdated">
            <code>
            void OnRocketGuildThreadMemberUpdated(ThreadMember member, RocketChannel thread, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadMemberUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketGuildThreadMembersUpdated">
            <code>
            void OnRocketGuildThreadMembersUpdated(ThreadMembersUpdatedEvent members, RocketGuild guild)
            {
                Puts("OnRocketGuildThreadMembersUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketUnhandledCommand">
            <code>
            void OnRocketUnhandledCommand(EventPayload payload)
            {
                Puts("OnRocketUnhandledCommand Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketStageInstanceCreated">
            <code>
            void OnRocketStageInstanceCreated(StageInstance stage, RocketGuild guild)
            {
                Puts("OnRocketStageInstanceCreated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketStageInstanceUpdated">
            <code>
            void OnRocketStageInstanceUpdated(StageInstance stage, StageInstance previous, RocketGuild guild)
            {
                Puts("OnRocketStageInstanceUpdated Works!");
            }
            </code>
        </member>
        <member name="F:Oxide.Ext.Rocket.Constants.RocketExtHooks.OnRocketStageInstanceDeleted">
            <code>
            void OnRocketStageInstanceDeleted(StageInstance stage, RocketGuild guild)
            {
                Puts("OnRocketStageInstanceDeleted Works!");
            }
            </code>
        </member>
        <member name="T:Oxide.Ext.Rocket.RocketClient">
            <summary>
            Represents the object a plugin uses to connects to Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketClient.Owner">
            <summary>
            Which plugin is the owner of this client
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketClient.RegisteredForHooks">
            <summary>
            List of plugins that are registered to receive hook calls for this client
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketClient.Bot">
            <summary>
            The bot client that is unique to the Token used
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketClient.Settings">
            <summary>
            Settings used to connect to Rocket and configure the extension
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.#ctor(Oxide.Core.Plugins.Plugin)">
            <summary>
            Constructor for a Rocket client
            </summary>
            <param name="plugin">Plugin that will own this Rocket client</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.Connect(System.String,Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents)">
            <summary>
            Starts a connection to Rocket with the given apiKey and intents
            </summary>
            <param name="apiKey">API key for the connecting bot</param>
            <param name="intents">Intents the bot needs in order to function</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.Connect(Oxide.Ext.Rocket.RocketSettings)">
            <summary>
            Starts a connection to Rocket with the given Rocket settings
            </summary>
            <param name="settings">Rocket connection settings</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.Disconnect">
            <summary>
            Disconnects this client from Rocket
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.RegisterPluginForHooks(Oxide.Core.Plugins.Plugin)">
            <summary>
            Registers a plugin to receive hook calls for this client
            </summary>
            <param name="plugin"></param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.RemovePluginFromHooks(Oxide.Core.Plugins.Plugin)">
            <summary>
            Remove a plugin from hooks
            </summary>
            <param name="plugin">Plugin to be removed from hooks</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.CallHook(System.String,System.Object[])">
            <summary>
            Call a hook for all plugins registered to receive hook calls for this client
            </summary>
            <param name="hookName"></param>
            <param name="args"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.CreateClient(Oxide.Core.Plugins.Plugin)">
            <summary>
            Sets the client field on the plugin.
            This should only be used if you need the client in the Init or Loaded hooks
            The client field will automatically be set on the plugin before the OnRocketClientCreated or OnServerInitialized hooks
            </summary>
            <param name="plugin">Plugin to get client for</param>
            <returns>Rocket client for the plugin</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.GetClient(Oxide.Core.Plugins.Plugin)">
            <summary>
            Gets the client for the given plugin
            </summary>
            <param name="plugin">Plugin to get client for</param>
            <returns>Rocket client for the plugin</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketClient.GetClient(System.String)">
            <summary>
            Gets the client for the given plugin name
            </summary>
            <param name="pluginName">Plugin Name to get client for</param>
            <returns>Rocket client for the plugin name</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.RocketExtension">
            <summary>
            Rocket Extension that is loaded by Oxide
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RocketExtension.TestVersion">
            <summary>
            Test version information if using test version
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RocketExtension.ExtensionSerializeSettings">
            <summary>
            Rocket Extension JSON Serialization settings
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RocketExtension.ExtensionVersion">
            <summary>
            Version number of the extension
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RocketExtension.GlobalLogger">
            <summary>
            Global logger for areas that aren't part of a client connection
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketExtension.#ctor(Oxide.Core.Extensions.ExtensionManager)">
            <summary>
            Constructor for the extension
            </summary>
            <param name="manager">Oxide extension manager</param>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketExtension.Name">
            <summary>
            Name of the extension
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketExtension.Author">
            <summary>
            Authors for the extension
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketExtension.Version">
            <summary>
            Version number used by oxide
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RocketExtension.GetExtensionVersion">
            <summary>
            Gets full extension version including test information
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketExtension.OnModLoad">
            <summary>
            Called when mod is loaded
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketExtension.OnShutdown">
            <summary>
            Called when server is shutdown
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.RocketSettings">
            <summary>
            Represents settings used to connect to Rocket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RocketSettings.ApiToken">
            <summary>
            API token for the bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RocketSettings.LogLevel">
            <summary>
            Rocket Extension Logging Level.
            See <see cref="F:Oxide.Ext.Rocket.RocketSettings.LogLevel"/>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RocketSettings.Intents">
            <summary>
            Intents that your bot needs to work
            See <see cref="T:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents"/>
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RocketSettings.GetHiddenToken">
            <summary>
            Hides the token but keeps the format to allow for debugging token issues without showing the token.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.ActivityAssets">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object-activity-assets">Activity Assets</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityAssets.LargeImage">
            <summary>
            The id for a large asset of the activity, usually a snowflake
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityAssets.LargeText">
            <summary>
            Text displayed when hovering over the large image of the activity
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityAssets.SmallImage">
            <summary>
            The id for a small asset of the activity, usually a snowflake
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityAssets.SmallText">
            <summary>
            Text displayed when hovering over the small image of the activity
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.ActivityButton">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object-activity-buttons">Activity Buttons</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityButton.Label">
            <summary>
            The text shown on the button (1-32 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityButton.Url">
            <summary>
            The url opened when clicking the button (1-512 characters)
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object-activity-flags">Activity Flags</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.None">
            <summary>
            No Actions can be done to this activity
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.Instance">
            <summary>
            No Actions can be done to this activity
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.Join">
            <summary>
            Activity can be joined
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.Spectate">
            <summary>
            Activity can be spectated
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.JoinRequest">
            <summary>
            User may request to join activity
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.Sync">
            <summary>
            User can listen along in spotify
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.Play">
            <summary>
            User can play this song
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.PartyPrivacyFriends">
            <summary>
            User is playing an activity in a voice channel with friends
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.PartyPrivacyVoiceChannel">
            <summary>
            User is playing an activity in a voice channel
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags.Embedded">
            <summary>
            User is playing embedded activity
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.ActivityParty">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object-activity-party">Activity Party</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityParty.Id">
            <summary>
            The id of the party
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityParty.Size">
            <summary>
            Used to show the party's current and maximum size
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityParty.CurrentSize">
            <summary>
            The current party size
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityParty.MaxSize">
            <summary>
            The maximum party size
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.ActivitySecrets">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object-activity-secrets">Activity Secrets</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivitySecrets.Join">
            <summary>
            The secret for joining a party
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivitySecrets.Spectate">
            <summary>
            The secret for spectating a game
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivitySecrets.Match">
            <summary>
            The secret for a specific instanced match
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.ActivityTimestamps">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object-activity-timestamps">Activity Timestamps</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityTimestamps.Start">
            <summary>
            Unix time (in milliseconds) of when the activity started
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityTimestamps.End">
            <summary>
            Unix time (in milliseconds) of when the activity ends
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityTimestamps.StartDateTime">
            <summary>
            DateTime when the activity starts
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.ActivityTimestamps.EndDateTime">
            <summary>
            DateTime when the activity ends
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.ActivityType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object-activity-types">Activity Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityType.Game">
            Playing {name}
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityType.Streaming">
            Streaming {name}
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityType.Listening">
            Listening {name}
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityType.Watching">
            Watching {name}
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityType.Custom">
            {emoji} {name} EX: ":smiley: I am cool"
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Activities.ActivityType.Competing">
            Competing in {name}
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Activities.RocketActivity">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#activity-object">Activity Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Name">
            <summary>
            The activity's name
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Type">
            <summary>
            Activity type
            See <see cref="T:Oxide.Ext.Rocket.Entities.Activities.ActivityType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Url">
            <summary>
            Stream url, is validated when type is 1
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.CreatedAt">
            <summary>
            Unix timestamp of when the activity was added to the user's session
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.CreatedAtDateTime">
            <summary>
            Timestamp of when the activity was added to the user's session
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Timestamps">
            <summary>
            Unix timestamps for start and/or end of the game
            See <see cref="T:Oxide.Ext.Rocket.Entities.Activities.ActivityTimestamps"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.ApplicationId">
            <summary>
            Application id for the game
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Details">
            <summary>
            What the player is currently doing
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.State">
            <summary>
            The user's current party status
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Emoji">
            <summary>
            tTe emoji used for a custom status
            See <see cref="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Emoji"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Party">
            <summary>
            Information for the current party of the player
            See <see cref="T:Oxide.Ext.Rocket.Entities.Activities.ActivityParty"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Assets">
            <summary>
            Images for the presence and their hover texts
            See <see cref="T:Oxide.Ext.Rocket.Entities.Activities.ActivityAssets"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Secrets">
            <summary>
            Secrets for Rich Presence joining and spectating
            See <see cref="T:Oxide.Ext.Rocket.Entities.Activities.ActivitySecrets"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Instance">
            <summary>
            Whether or not the activity is an instanced game session
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Flags">
            <summary>
            Describes what the payload includes
            See <see cref="T:Oxide.Ext.Rocket.Entities.Activities.ActivityFlags"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.Buttons">
            <summary>
            The custom buttons shown in the Rich Presence (max 2)
            See <see cref="T:Oxide.Ext.Rocket.Entities.Activities.ActivityButton"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.GetLargeImageUrl">
            <summary>
            Returns the large image url for the presence asset
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Activities.RocketActivity.GetSmallImageUrl">
            <summary>
            Returns the small image url for the presence asset
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Api.RocketApiError">
            <summary>
            Represents and error from the Rocket API
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RocketApiError.Code">
            <summary>
            Error code from the Rocket API
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RocketApiError.Message">
            <summary>
            Error message from the Rocket API
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RocketApiError.Errors">
            <summary>
            An JObject containing the errors that occured
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Api.RateLimit">
            <summary>
            Represents RateLimit entity when the rate limit is hit
            <a href="https://Rocket.com/developers/docs/topics/rate-limits#exceeding-a-rate-limit-rate-limit-response-structure">Rate Limit Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RateLimit.Message">
            <summary>
            A message saying you are being rate limited.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RateLimit.RetryAfter">
            <summary>
            The number of seconds to wait before submitting another request.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RateLimit.Global">
            <summary>
            A value indicating if you are being globally rate limited or not
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Api.RequestMethod">
            <summary>
            HTTP request method
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Api.RequestMethod.GET">
            <summary>
            Request Method Get
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Api.RequestMethod.POST">
            <summary>
            Request Method POST
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Api.RequestMethod.PUT">
            <summary>
            Request Method PUT
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Api.RequestMethod.PATCH">
            <summary>
            Request Method PATCH
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Api.RequestMethod.DELETE">
            <summary>
            Request Method DELETE
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Api.RestError">
            <summary>
            Error object that is returned to the caller when a request fails
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestError.HttpStatusCode">
            <summary>
            HTTP Status code
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestError.RequestMethod">
            <summary>
            The request method that was called
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestError.Exception">
            <summary>
            The web exception from the request
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestError.Url">
            <summary>
            The URI that was called
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestError.Data">
            <summary>
            What data was passed to the request
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestError.RocketError">
            <summary>
            If Rocket returned an error this will contain that error message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestError.Message">
            <summary>
            Full string response if we received one
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Api.RestError.#ctor(System.Net.WebException,System.Uri,Oxide.Ext.Rocket.Entities.Api.RequestMethod,System.Object)">
            <summary>
            Creates a new rest error
            </summary>
            <param name="exception">The web exception we received</param>
            <param name="url">Url that was called</param>
            <param name="requestMethod">Request method that was used</param>
            <param name="data">Data passed to the request</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Api.RestResponse">
            <summary>
            Represents a REST response from Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Api.RestResponse.Data">
            <summary>
            Data Rocket sent us
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Api.RestResponse.#ctor(System.String)">
            <summary>
            Create new REST response with the given data
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Api.RestResponse.ParseData``1">
            <summary>
            Parse the data to it's given object
            </summary>
            <typeparam name="T">Type to be parsed as</typeparam>
            <returns>Data string parsed to JSON</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/application#application-object-application-flags">Application Flags</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.None">
            <summary>
            This application has no flags
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.GatewayPresence">
            <summary>
            The application is verified and can use the GUILD_PRESENCES intent
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.GatewayPresenceLimited">
            <summary>
            The application has the GUILD_PRESENCES intent enabled on the bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.GatewayGuildMembers">
            <summary>
            The application is verified and can use the GUILD_MEMBERS intent
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.GatewayGuildMembersLimited">
            <summary>
            The application has the GUILD_MEMBERS intent enabled on the bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.VerificationPendingGuildLimit">
            <summary>
            The application is currently pending verification
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.Embedded">
            <summary>
            The application has functionality that is specific to the Rocket client app.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.GatewayMessageContent">
            <summary>
            The application is verified and can use the Gateway Message intent
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags.GatewayMessageContentLimited">
            <summary>
            The application has the Gateway Message intent enabled on the bot
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Applications.RocketApplication">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/application#application-object">Application Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Id">
            <summary>
            The id of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Name">
            <summary>
            The name of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Icon">
            <summary>
            The icon hash of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Description">
            <summary>
            The description of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.RpcOrigins">
            <summary>
            An array of rpc origin urls, if rpc is enabled
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.BotPublic">
            <summary>
            When false only app owner can join the app's bot to guilds
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.BotRequireCodeGrant">
            <summary>
            When true the app's bot will only join upon completion of the full oauth2 code grant flow
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.TermsOfServiceUrl">
            <summary>
            The url of the app's terms of service
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.PrivacyPolicyUrl">
            <summary>
            The url of the app's privacy policy
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Owner">
            <summary>
            Partial user object containing info on the owner of the application
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Summary">
            <summary>
            If this application is a game sold on Rocket, this field will be the summary field for the store page of its primary sku
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Verify">
            <summary>
            The hex encoded key for verification in interactions and the GameSDK's GetTicket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Team">
            <summary>
            If the application belongs to a team, this will be a list of the members of that team
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.GuildId">
            <summary>
            If this application is a game sold on Rocket, this field will be the guild to which it has been linked
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.PrimarySkuId">
            <summary>
            If this application is a game sold on Rocket, this field will be the id of the "Game SKU" that is created, if exists
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Slug">
            <summary>
            If this application is a game sold on Rocket, this field will be the URL slug that links to the store page
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.CoverImage">
            <summary>
            If this application is a game sold on Rocket, this field will be the hash of the image on store embeds
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.Flags">
            <summary>
            The application's public flags
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.GetApplicationIconUrl">
            <summary>
            Returns the URL for the applications Icon
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.HasApplicationFlag(Oxide.Ext.Rocket.Entities.Applications.ApplicationFlags)">
            <summary>
            Returns if the given application has the passed in application flag
            If Flags is null false is returned
            </summary>
            <param name="flag">Flag to compare against</param>
            <returns>True of application has flag; False Otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.GetGlobalCommands(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Fetch all of the global commands for your application.
            Returns a list of ApplicationCommand.
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#get-global-application-commands">Get Global Application Commands</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with list of application commands</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.GetGlobalCommand(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Fetch global command by ID
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#get-global-application-command">Get Global Application Command</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="commandId">ID of command to get</param>
            <param name="callback">Callback with list of application commands</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.CreateGlobalCommand(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate,System.Action{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new global command.
            New global commands will be available in all guilds after 1 hour.
            Note: Creating a command with the same name as an existing command for your application will overwrite the old command.
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#create-global-application-command">Create Global Application Command</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="create">Command to create</param>
            <param name="callback">Callback with the created command</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.BulkOverwriteGlobalCommands(Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand},System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Takes a list of application commands, overwriting existing commands that are registered globally for this application. Updates will be available in all guilds after 1 hour.
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#bulk-overwrite-global-application-commands">Bulk Overwrite Global Application Commands</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="commands">List of commands to overwrite</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.GetGuildCommands(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Fetch all of the guild commands for your application for a specific guild.
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#get-guild-application-commands">Get Guild Application Commands</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">ID of the guild to get commands for</param>
            <param name="callback">Callback with a list of guild application commands</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.GetGuildCommand(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Get guild command by Id
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#get-guild-application-command">Get Guild Application Command</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">ID of the guild to get commands for</param>
            <param name="commandId">ID of the command to get</param>
            <param name="callback">Callback with a list of guild application commands</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.CreateGuildCommand(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate,System.Action{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new guild command.
            New guild commands will be available in the guild immediately.
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#create-guild-application-command">Create Guild Application Command</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID to create the command in</param>
            <param name="create">Command to create</param>
            <param name="callback">Callback with the created command</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.GetGuildCommandPermissions(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Fetches command permissions for all commands for your application in a guild. Returns an array of GuildApplicationCommandPermissions objects.
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID to get the permissions from</param>
            <param name="callback">Callback with the list of permissions</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Applications.RocketApplication.BatchEditCommandPermissions(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions},System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Batch edits permissions for all commands in a guild.
            Warning: This endpoint will overwrite all existing permissions for all commands in a guild
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID to update the permissions for</param>
            <param name="permissions">List of permissions for the commands</param>
            <param name="callback">Callback with the list of permissions</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog.Webhooks">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog.Users">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog.AuditLogEntries">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog.Integrations">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog.GetGuildAuditLog(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.RocketGuild,System.Action{Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog})">
            <summary>
            
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog.GetGuildAuditLog(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.AuditLogs.AuditLog},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType">
            <summary>
            Represents type of the action that was taken in given audit log event.
            Originally Sourced from https://github.com/DSharpPlus/DSharpPlus/blob/master/DSharpPlus/Entities/RocketAuditLogObjects.cs#L517
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.GuildUpdate">
            <summary>
            Indicates that the guild was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.ChannelCreate">
            <summary>
            Indicates that the channel was created.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.ChannelUpdate">
            <summary>
            Indicates that the channel was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.ChannelDelete">
            <summary>
            Indicates that the channel was deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.OverwriteCreate">
            <summary>
            Indicates that the channel permission overwrite was created.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.OverwriteUpdate">
            <summary>
            Indicates that the channel permission overwrite was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.OverwriteDelete">
            <summary>
            Indicates that the channel permission overwrite was deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.Kick">
            <summary>
            Indicates that the user was kicked.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.Prune">
            <summary>
            Indicates that users were pruned.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.Ban">
            <summary>
            Indicates that the user was banned.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.Unban">
            <summary>
            Indicates that the user was unbanned.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MemberUpdate">
            <summary>
            Indicates that the member was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MemberRoleUpdate">
            <summary>
            Indicates that the member's roles were updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MemberMove">
            <summary>
            Indicates that the member has moved to another voice channel.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MemberDisconnect">
            <summary>
            Indicates that the member has disconnected from a voice channel.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.BotAdd">
            <summary>
            Indicates that a bot was added to the guild.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.RoleCreate">
            <summary>
            Indicates that the role was created.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.RoleUpdate">
            <summary>
            Indicates that the role was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.RoleDelete">
            <summary>
            Indicates that the role was deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.InviteCreate">
            <summary>
            Indicates that the invite was created.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.InviteUpdate">
            <summary>
            Indicates that the invite was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.InviteDelete">
            <summary>
            Indicates that the invite was deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.WebhookCreate">
            <summary>
            Indicates that the webhook was created.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.WebhookUpdate">
            <summary>
            Indicates that the webook was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.WebhookDelete">
            <summary>
            Indicates that the webhook was deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.EmojiCreate">
            <summary>
            Indicates that the emoji was created.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.EmojiUpdate">
            <summary>
            Indicates that the emoji was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.EmojiDelete">
            <summary>
            Indicates that the emoji was deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MessageDelete">
            <summary>
            Indicates that the message was deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MessageBulkDelete">
            <summary>
            Indicates that messages were bulk-deleted.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MessagePin">
            <summary>
            Indicates that a message was pinned.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.MessageUnpin">
            <summary>
            Indicates that a message was unpinned.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.IntegrationCreate">
            <summary>
            Indicates that an integration was created.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.IntegrationUpdate">
            <summary>
            Indicates that an integration was updated.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogActionType.IntegrationDelete">
            <summary>
            Indicates that an integration was deleted.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogChange">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogChange.NewValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogChange.OldValue">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogChange.Key">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry.TargetId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry.Changes">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry.UserId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry.ActionType">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry.Options">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.AuditLogEntry.Reason">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeBase">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeBase.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeBase.Type">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel.Position">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel.Topic">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel.Bitrate">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel.PermissionOverwrites">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel.Nsfw">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel.ApplicationId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeChannel.RateLimitPerUser">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.Name">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.IconHash">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.SplashHash">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.OwnerId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.Region">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.AfkChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.AfkTimeout">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.MfaLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.VerificationLevel">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.ExplicitContentFilter">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.DefaultMessageNotifications">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.VanityUrlCode">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.Add">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.Remove">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.PruneDeleteDays">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.WidgetEnabled">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.WidgetChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeGuild.SystemChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeIntegration">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeIntegration.EnableEmoticons">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeIntegration.ExpireBehavior">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeIntegration.ExpireGracePeriod">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite.Code">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite.ChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite.InviterId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite.MaxUses">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite.Uses">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite.MaxAge">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeInvite.Temporary">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeRole">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeRole.Permissions">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeRole.Color">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeRole.Hoist">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeRole.Mentionable">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeRole.Allow">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeRole.Deny">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeUser">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeUser.Deaf">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeUser.Mute">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeUser.Nick">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.Change.AuditLogChangeUser.AvatarHash">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.DeleteMemberDays">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.MembersRemoved">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.ChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.MessageId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.Count">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.Id">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.Type">
            <summary>
            
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.AuditLogs.OptionalAuditEntryInfo.RoleName">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/guild#create-guild-channel-json-params">Guild Channel Create Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.Name">
            <summary>
            The name of the channel (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.Type">
            <summary>
            the type of channel <see cref="T:Oxide.Ext.Rocket.Entities.Channels.ChannelType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.Topic">
            <summary>
            The channel topic (0-1024 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.Bitrate">
            <summary>
            The bitrate (in bits) of the voice channel
            8000 to 96000 (128000 for VIP servers)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.UserLimit">
            <summary>
            The user limit of the voice channel
            0 refers to no limit, 1 to 99 refers to a user limit
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.RateLimitPerUser">
            <summary>
            Amount of seconds a user has to wait before sending another message (0-21600);
            bots, as well as users with the permission manage_messages or manage_channel, are unaffected
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.Position">
            <summary>
            Sorting position of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.PermissionOverwrites">
            <summary>
            Explicit permission overwrites for members and roles <see cref="T:Oxide.Ext.Rocket.Entities.Channels.Overwrite"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.ParentId">
            <summary>
            ID of the parent category for a channel (each parent category can contain up to 50 channels)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelCreate.Nsfw">
            <summary>
            Whether the channel is nsfw
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#create-channel-invite-json-params">Channel Invite Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite.MaxAge">
            <summary>
            Duration of invite in seconds before expiry, or 0 for never
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite.MaxUses">
            <summary>
            Max number of uses or 0 for unlimited
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite.Temporary">
            <summary>
            Whether this invite only grants temporary membership
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite.Unique">
            <summary>
            If true, don't try to reuse a similar invite (useful for creating many unique one time use invites)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite.TargetUserType">
            <summary>
            The type of target user for this invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite.TargetUser">
            <summary>
            The target user id for this invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelInvite.TargetApplicationId">
            <summary>
            The id of the embedded application to open for this invite,
            Required if TargetUserType is EMBEDDED_APPLICATION, the application must have the EMBEDDED flag	
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.ChannelMention">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#channel-mention-object-channel-mention-structure">Channel Mention Structure</a> in a message 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMention.Id">
            <summary>
            ID of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMention.GuildId">
            <summary>
            ID of the guild containing the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMention.Type">
            <summary>
            The type of channel
            <see cref="T:Oxide.Ext.Rocket.Entities.Channels.ChannelType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMention.Name">
            <summary>
            The name of the channel
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.ChannelMessagesRequest">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#get-channel-messages">Get Channel Messages Request</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMessagesRequest.Around">
            <summary>
            Get messages around this message ID
            Before, after, and around keys are mutually exclusive, only one may be passed at a time
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMessagesRequest.Before">
            <summary>
            Get messages before this message ID
            Before, after, and around keys are mutually exclusive, only one may be passed at a time
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMessagesRequest.After">
            <summary>
            Get messages after this message ID
            Before, after, and around keys are mutually exclusive, only one may be passed at a time
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ChannelMessagesRequest.Limit">
            <summary>
            Max number of messages to return (1-100)
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.ChannelMessagesRequest.ToQueryString">
            <summary>
            Returns the request as a query string
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.ChannelType">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#channel-object-channel-types">Types of Channels</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildText">
            <summary>
            A text channel within a server
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.Dm">
            <summary>
            A direct message between users
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildVoice">
            <summary>
            A voice channel within a server
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GroupDm">
            <summary>
            A direct message between multiple users
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildCategory">
            <summary>
            An organizational category that contains up to 50 channels
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildNews">
            <summary>
            A channel that users can follow and crosspost into their own server
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildStore">
            <summary>
            A channel in which game developers can sell their game on Rocket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildNewsThread">
            <summary>
            A temporary sub-channel within a GUILD_NEWS channel
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildPublicThread">
            <summary>
            A temporary sub-channel within a GUILD_TEXT channel
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildPrivateThread">
            <summary>
            A temporary sub-channel within a GUILD_TEXT channel that is only viewable by those invited and those with the MANAGE_THREADS permission
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.ChannelType.GuildStageVoice">
            <summary>
            A voice channel for <a href="https://support.Rocket.com/hc/en-us/articles/1500005513722">hosting events with an audience</a>
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.RocketChannel">
            <summary>
            Represents a guild or DM <a href="https://Rocket.com/developers/docs/resources/channel#channel-object">Channel Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Id">
            <summary>
            The ID of this channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Type">
            <summary>
            the type of channel <see cref="T:Oxide.Ext.Rocket.Entities.Channels.ChannelType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GuildId">
            <summary>
            the ID of the guild
            Warning: May be missing for some channel objects received over gateway guild dispatches
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Position">
            <summary>
            Sorting position of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.PermissionOverwrites">
            <summary>
            Explicit permission overwrites for members and roles <see cref="T:Oxide.Ext.Rocket.Entities.Channels.Overwrite"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Name">
            <summary>
            The name of the channel (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Topic">
            <summary>
            The channel topic (0-1024 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Nsfw">
            <summary>
            Whether the channel is nsfw
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.LastMessageId">
            <summary>
            The id of the last message sent in this channel (may not point to an existing or valid message)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Bitrate">
            <summary>
            The bitrate (in bits) of the voice channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.UserLimit">
            <summary>
            The user limit of the voice channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.RateLimitPerUser">
            <summary>
            Amount of seconds a user has to wait before sending another message (0-21600);
            bots, as well as users with the permission manage_messages or manage_channel, are unaffected
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Recipients">
            <summary>
            The recipients of the DM
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Icon">
            <summary>
            icon hash of the group DM  
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.OwnerId">
            <summary>
            ID of the DM creator
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ApplicationId">
            <summary>
            Application id of the group DM creator if it is bot-created
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ParentId">
            <summary>
            ID of the parent category for a channel (each parent category can contain up to 50 channels)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.LastPinTimestamp">
            <summary>
            When the last pinned message was pinned.
            This may be null in events such as GUILD_CREATE when a message is not pinned.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.RtcRegion">
            <summary>
            Voice region id for the voice channel, automatic when set to null
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.VideoQualityMode">
            <summary>
            The camera video quality mode of the voice channel
            1 when not present
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.MessageCount">
            <summary>
            An approximate count of messages in a thread, stops counting at 50
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.MemberCount">
            <summary>
            An approximate count of users in a thread, stops counting at 50
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ThreadMetadata">
            <summary>
            Thread-specific fields not needed by other channels
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Member">
            <summary>
            Thread member object for the current user, if they have joined the thread, only included on certain API endpoints
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.DefaultAutoArchiveDuration">
            <summary>
            Default duration for newly created threads, in minutes, to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Permissions">
            <summary>
            Default duration for newly created threads, in minutes, to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ThreadMembers">
            <summary>
            List of thread members if channel is thread; Null Otherwise.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.Mention">
            <summary>
            Returns a string to mention this channel in a message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.IconUrl">
            <summary>
            Returns the Icon URL for the given channel
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.CreateGuildChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Channels.ChannelCreate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new channel object for the guild.
            Requires the MANAGE_CHANNELS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#create-guild-channel">Create Guild Channel</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild to create the channel in</param>
            <param name="channel">Channel to create</param>
            <param name="callback">Callback with created channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GetChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Get a channel by ID
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-channel">Get Channel</a>
            If the channel is a thread, a thread member object is included in the returned result.
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">ID of the channel to get</param>
            <param name="callback">Callback with the channel object</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ModifyGroupDmChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.GroupDmChannelUpdate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Update a group dm channel's settings.
            See <a href="https://Rocket.com/developers/docs/resources/channel#modify-channel">Modify Channel</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="update">Update to be made to the channel. All fields are optional</param>
            <param name="callback">Callback with the updated channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ModifyGuildChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Update a guild channel's settings.
            Requires the MANAGE_CHANNELS permission for the guild.
            See <a href="https://Rocket.com/developers/docs/resources/channel#modify-channel">Modify Channel</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="update">Update to be made to the channel. All fields are optional</param>
            <param name="callback">Callback with the updated channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ModifyThreadChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Update a thread channel's settings.
            Requires the MANAGE_THREADS permission for the guild.
            See <a href="https://Rocket.com/developers/docs/resources/channel#modify-channel">Modify Channel</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="update">Update to be made to the channel. All fields are optional</param>
            <param name="callback">Callback with the updated channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.DeleteChannel(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a channel, or close a private message.
            Requires the MANAGE_CHANNELS or MANAGE_THREADS permission for the guild depending on the channel type.
            See <a href="https://Rocket.com/developers/docs/resources/channel#deleteclose-channel">Delete/Close Channel</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the deleted channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GetChannelMessages(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.ChannelMessagesRequest,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Messages.RocketMessage}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the messages for a channel.
            If operating on a guild channel, this endpoint requires the VIEW_CHANNEL permission to be present on the current user.
            If the current user is missing the 'READ_MESSAGE_HISTORY' permission in the channel then this will return no messages (since they cannot read the message history).
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-channel-messages">Get Channel Messages</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="request">Optional request filters</param>
            <param name="callback">Callback with list of channel messages</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GetChannelMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a specific message in the channel.
            If operating on a guild channel, this endpoint requires the 'READ_MESSAGE_HISTORY' permission to be present on the current user.
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-channel-message">Get Channel Messages</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">Message ID of the message</param>
            <param name="callback">Callback with the message for the ID</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.CreateMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.MessageCreate,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message to be created</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.CreateMessage(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Content of the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.CreateMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="embed">Embed to be send in the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.CreateMessage(Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed},System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="embeds">Embeds to be send in the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.BulkDeleteMessages(Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.ICollection{Oxide.Ext.Rocket.Entities.Snowflake},System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete multiple messages in a single request.
            This endpoint can only be used on guild channels and requires the MANAGE_MESSAGES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#bulk-delete-messages">Bulk Delete Messages</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageIds">Collect of message ids to delete (Between 2 - 100)</param>
            <param name="callback">Callback once the action is complete</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.EditChannelPermissions(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.Overwrite,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edit the channel permission overwrites for a user or role in a channel.
            Only usable for guild channels.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#edit-channel-permissions">Edit Channel Permissions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="overwrite">Overwrite to edit with changes</param>
            <param name="callback">Callback once the action is complete</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.EditChannelPermissions(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Nullable{Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags},System.Nullable{Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags},Oxide.Ext.Rocket.Entities.Channels.PermissionType,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edit the channel permission overwrites for a user or role in a channel.
            Only usable for guild channels.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#edit-channel-permissions">Edit Channel Permissions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="overwriteId">ID of the overwrite to edit</param>
            <param name="allow">Allow Permission Flags</param>
            <param name="deny">Deny Permission Flags</param>
            <param name="type">Permission Type Flag</param>
            <param name="callback">Callback once the action is complete</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GetChannelInvites(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Invites.RocketInvite}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of invite objects (with invite metadata) for the channel.
            Only usable for guild channels.
            Requires the MANAGE_CHANNELS permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-channel-invites">Get Channel Invites</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with list of invites for the channel</param>
            <exception cref="T:System.Exception">Thrown when the channel type is Dm or GroupDm</exception>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.CreateChannelInvite(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.ChannelInvite,System.Action{Oxide.Ext.Rocket.Entities.Invites.RocketInvite},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new invite object for the channel.
            Only usable for guild channels.
            Requires the CREATE_INSTANT_INVITE permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-channel-invite">Create Channel Invite</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="invite">Invite to create</param>
            <param name="callback">Callback with the created invite</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.DeleteChannelPermission(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.Overwrite,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a channel permission overwrite for a user or role in a channel.
            Only usable for guild channels.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-channel-permission">Delete Channel Permission</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="overwrite">Overwrite to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.DeleteChannelPermission(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a channel permission overwrite for a user or role in a channel.
            Only usable for guild channels.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-channel-permission">Delete Channel Permission</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="overwriteId">Overwrite ID to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.FollowNewsChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Channels.FollowedChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Follow a News Channel to send messages to a target channel.
            Requires the MANAGE_WEBHOOKS permission in the target channel.
            See <a href="https://Rocket.com/developers/docs/resources/channel#follow-news-channel">Delete Channel Permission</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="webhookChannelId">ID of target channel</param>
            <param name="callback">callback with the followed channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.TriggerTypingIndicator(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a typing indicator for the specified channel.
            Generally bots should not implement this route. However, if a bot is responding to a command and expects the computation to take a few seconds, this endpoint may be called to let the user know that the bot is processing their message.
            See <a href="https://Rocket.com/developers/docs/resources/channel#trigger-typing-indicator">Trigger Typing Indicator</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GetPinnedMessages(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Messages.RocketMessage}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns all pinned messages in the channel
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-pinned-messages">Get Pinned Messages</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback of all the pinned messages</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GroupDmAddRecipient(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Users.RocketUser,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a recipient to a Group DM using their access token
            See <a href="https://Rocket.com/developers/docs/resources/channel#group-dm-add-recipient">Group DM Add Recipient</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="user">User to add</param>
            <param name="accessToken">Users access token</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GroupDmAddRecipient(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a recipient to a Group DM using their access token
            See <a href="https://Rocket.com/developers/docs/resources/channel#group-dm-add-recipient">Group DM Add Recipient</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User to add</param>
            <param name="accessToken">Users access token</param>
            <param name="nick">User nickname</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GroupDmRemoveRecipient(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Removes a recipient from a Group DM
            See <a href="https://Rocket.com/developers/docs/resources/channel#group-dm-remove-recipient">Group DM Remove Recipient</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID to remove</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.StartThreadWithMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Creates a new public thread from a message
            See <a href="https://Rocket.com/developers/docs/resources/channel#start-thread-with-message">Start Thread with Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">ID of the message to start the thread from</param>
            <param name="create">Data to use when creating the thread</param>
            <param name="callback">Callback with the thread once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.StartThreadWithoutMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Creates a new thread that is not connected to an existing message. The created thread is always a GUILD_PRIVATE_THREAD
            See <a href="https://Rocket.com/developers/docs/resources/channel#start-thread-without-message">Start Thread without Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="create">Data to use when creating the thread</param>
            <param name="callback">Callback with the thread once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.JoinThread(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds the bot to the thread. Also requires the thread is not archived.
            See <a href="https://Rocket.com/developers/docs/resources/channel#join-thread">Join Thread</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the thread once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.AddThreadMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds another user to a thread.
            Requires the ability to send messages in the thread. Also requires the thread is not archived.
            See <a href="https://Rocket.com/developers/docs/resources/channel#add-thread-member">Add Thread Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">ID of the user to thread</param>
            <param name="callback">Callback with the thread once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.LeaveThread(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Removes the bot from the thread. Also requires the thread is not archived.
            See <a href="https://Rocket.com/developers/docs/resources/channel#leave-thread">Leave Thread</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the thread once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.RemoveThreadMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Removes another user from a thread.
            Requires the MANAGE_THREADS permission or that you are the creator of the thread. Also requires the thread is not archived.
            See <a href="https://Rocket.com/developers/docs/resources/channel#remove-thread-member">Remove Thread Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">ID of the user to thread</param>
            <param name="callback">Callback with the thread once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GetThreadMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMember},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a thread member object for the specified user if they are a member of the thread
            returns a 404 response otherwise.
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-thread-member">Remove Thread Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">ID of the user to thread</param>
            <param name="callback">Callback with the thread member</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ListThreadMembers(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMember}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns array of thread members objects that are members of the thread.
            This endpoint is restricted according to whether the GUILD_MEMBERS Privileged Intent is enabled for your application.
            See <a href="https://Rocket.com/developers/docs/resources/channel#list-thread-members">List Thread Members</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the list of thread members</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ListActiveThreads(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns all active threads in the channel, including public and private threads. Threads are ordered by their id, in descending order.
            Requires the READ_MESSAGE_HISTORY permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#list-active-threads">List Active Threads</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the thread list information</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ListPublicArchivedThreads(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadArchivedLookup,System.Action{Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns archived threads in the channel that are public.
            When called on a GUILD_TEXT channel, returns threads of type GUILD_PUBLIC_THREAD. When called on a GUILD_NEWS channel returns threads of type GUILD_NEWS_THREAD. Threads are ordered by archive_timestamp, in descending order.
            Requires the READ_MESSAGE_HISTORY permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#list-public-archived-threads">List Public Archived Threads</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="lookup">The options to use when looking up the archived threads</param>
            <param name="callback">Callback with the thread list information</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ListPrivateArchivedThreads(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadArchivedLookup,System.Action{Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns archived threads in the channel that are of type GUILD_PRIVATE_THREAD.
            Threads are ordered by archive_timestamp, in descending order.
            Requires both the READ_MESSAGE_HISTORY and MANAGE_THREADS permissions.
            See <a href="https://Rocket.com/developers/docs/resources/channel#list-private-archived-threads">List Private Archived Threads</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="lookup">The options to use when looking up the archived threads</param>
            <param name="callback">Callback with the thread list information</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.ListJoinedPrivateArchivedThreads(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadArchivedLookup,System.Action{Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns archived threads in the channel that are of type GUILD_PRIVATE_THREAD, and the user has joined.
            Threads are ordered by their id, in descending order.
            Requires the READ_MESSAGE_HISTORY permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#list-joined-private-archived-threads">List Joined Private Archived Threads</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="lookup">The options to use when looking up the archived threads</param>
            <param name="callback">Callback with the thread list information</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.RocketChannel.GetStageInstance(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Gets the stage instance associated with the Stage channel, if it exists.
            See <a href="https://Rocket.com/developers/docs/resources/stage-instance#get-stage-instance">Get Stage Instance</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the new stage instance</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.FollowedChannel">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#followed-channel-object-followed-channel-structure">Followed Channel Structure</a> from an API response
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.FollowedChannel.ChannelId">
            <summary>
            Source channel ID
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.FollowedChannel.WebhookId">
            <summary>
            Created target webhook ID
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.GroupDmChannelUpdate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#modify-channel-json-params-group-dm">Group DM Channel Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GroupDmChannelUpdate.Name">
            <summary>
            The name of the channel (2-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GroupDmChannelUpdate.Icon">
            <summary>
            Base64 encoded icon
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#modify-channel-json-params-guild-channel">Guild Channel Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.Name">
            <summary>
            The name of the channel (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.Type">
            <summary>
            the type of channel
            See <see cref="T:Oxide.Ext.Rocket.Entities.Channels.ChannelType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.Position">
            <summary>
            The position of the channel in the left-hand listing
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.Topic">
            <summary>
            The channel topic (0-1024 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.Nsfw">
            <summary>
            Whether the channel is nsfw
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.RateLimitPerUser">
            <summary>
            Amount of seconds a user has to wait before sending another message (0-21600);
            bots, as well as users with the permission manage_messages or manage_channel, are unaffected
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.Bitrate">
            <summary>
            The bitrate (in bits) of the voice channel
            8000 to 96000 (128000 for VIP servers)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.UserLimit">
            <summary>
            The user limit of the voice channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.PermissionOverwrites">
            <summary>
            Explicit permission overwrites for members and roles <see cref="T:Oxide.Ext.Rocket.Entities.Channels.Overwrite"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.ParentId">
            <summary>
            ID of the parent category for a channel (each parent category can contain up to 50 channels)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.RtcRegion">
            <summary>
            Channel voice region id, automatic when set to null
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.VideoQualityMode">
            <summary>
            The camera video quality mode of the voice channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.GuildChannelUpdate.DefaultAutoArchiveDuration">
            <summary>
            The default duration for newly created threads in the channel, in minutes, to automatically archive the thread after recent activity
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Overwrite">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#overwrite-object-overwrite-structure">Overwrite Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Overwrite.Id">
            <summary>
            Role or user ID
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Overwrite.Type">
            <summary>
            Permission Type <see cref="T:Oxide.Ext.Rocket.Entities.Channels.PermissionType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Overwrite.Allow">
            <summary>
            Permissions allowed <see cref="T:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Overwrite.Deny">
            <summary>
            Permissions denied <see cref="T:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags"/>
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.PermissionType">
            <summary>
            Represents the type of a permission
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.PermissionType.Role">
            <summary>
            This permission belongs to a role
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.PermissionType.Member">
            <summary>
            This permission belongs to a member
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Stages.PrivacyLevel">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/stage-instance#stage-instance-object-privacy-level">Stage Privacy Level</a> within Rocket.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.Stages.PrivacyLevel.Public">
            <summary>
            The Stage instance is visible publicly. (deprecated)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.Stages.PrivacyLevel.GuildOnly">
            <summary>
            The Stage instance is visible to only guild members.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance">
            <summary>
            Represents a channel <a href="https://Rocket.com/developers/docs/resources/stage-instance#stage-instance-object-stage-instance-structure">Stage Instance</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.Id">
            <summary>
            The ID of this Stage instance
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.GuildId">
            <summary>
            The guild ID of the associated Stage channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.ChannelId">
            <summary>
            The ID of the associated Stage channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.PrivacyLevel">
            <summary>
            The privacy level of the Stage instance
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.DiscoverableDisabled">
            <summary>
            Whether or not Stage discovery is disabled (deprecated)   
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.Topic">
            <summary>
            The topic of the Stage instance (1-120 characters)
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.CreateStageInstance(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Entities.Channels.Stages.PrivacyLevel,System.Action{Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Creates a new Stage instance associated to a Stage channel.
            Requires the user to be a moderator of the Stage channel.
            See <a href="https://Rocket.com/developers/docs/resources/stage-instance#create-stage-instance">Create Stage Instance</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to create a stage in</param>
            <param name="topic">The topic for the stage instance</param>
            <param name="privacyLevel">Privacy level for the stage instance</param>
            <param name="callback">Callback with the new stage instance</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.GetStageInstance(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Gets the stage instance associated with the Stage channel, if it exists.
            See <a href="https://Rocket.com/developers/docs/resources/stage-instance#get-stage-instance">Get Stage Instance</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to get the stage instance for</param>
            <param name="callback">Callback with the new stage instance</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.ModifyStageInstance(Oxide.Ext.Rocket.RocketClient,System.String,System.Nullable{Oxide.Ext.Rocket.Entities.Channels.Stages.PrivacyLevel},System.Action{Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modifies fields of an existing Stage instance.
            Requires the user to be a moderator of the Stage channel.
            See <a href="https://Rocket.com/developers/docs/resources/stage-instance#modify-stage-instance">Update Stage Instance</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="topic">The new topic for the stage instance</param>
            <param name="privacyLevel">Privacy level for the stage instance</param>
            <param name="callback">Callback when the updated stage instance</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance.DeleteStageInstance(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes the Stage instance.
            Requires the user to be a moderator of the Stage channel.
            See <a href="https://Rocket.com/developers/docs/resources/stage-instance#delete-stage-instance">Delete Stage Instance</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback when the stage instance is deleted</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#modify-channel-json-params-thread">Thread Channel Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate.Name">
            <summary>
            The name of the channel (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate.Archived">
            <summary>
            Whether the channel is archived
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate.AutoArchiveDuration">
            <summary>
            Duration in minutes to automatically archive the thread after recent activity
            Can be set to: 60, 1440, 4320, 10080
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate.Locked">
            <summary>
            Whether the thread is locked
            When a thread is locked, only users with MANAGE_THREADS can unarchive it
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate.Invitable">
            <summary>
            Whether non-moderators can add other non-moderators to a thread
            Only available on private threads
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.ThreadChannelUpdate.RateLimitPerUser">
            <summary>
            Amount of seconds a user has to wait before sending another message (0-21600)
            Bots and users with the permission manage_messages, manage_thread, or manage_channel, are unaffected
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadArchivedLookup">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#list-public-archived-threads-query-string-params">Thread Archive Lookup Structure</a> within Rocket.
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#list-private-archived-threads-query-string-params">Thread Archive Lookup Structure</a> within Rocket.
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#list-joined-private-archived-threads-query-string-params">Thread Archive Lookup Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadArchivedLookup.Before">
            <summary>
            Returns threads before this timestamp
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadArchivedLookup.Limit">
            <summary>
            Optional maximum number of threads to return
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#start-thread-with-message-json-params">Thread Create Structure</a> within Rocket.
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#start-thread-without-message-json-params">Thread Create Structure</a> within Rocket.
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#start-thread-with-message-json-params">Thread Create Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate.Name">
            <summary>
            2-100 character thread name
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate.AutoArchiveDuration">
            <summary>
            Duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate.Type">
            <summary>
            The type of thread to create
            Can only be GuildNewsThread, GuildPublicThread, or GuildPrivateThread
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate.Invitable">
            <summary>
            Whether non-moderators can add other non-moderators to a thread; only available when creating a private thread
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#list-active-threads">Thread List Structure</a> within Rocket.
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#list-public-archived-threads-response-body">Thread List Public Archived Structure</a> within Rocket.
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#list-private-archived-threads-response-body">Thread List Private Archived Structure</a> within Rocket.
            Represents a <a href="https://Rocket.com/developers/docs/resources/guild#list-active-threads">Thread List Private Archived Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList.Threads">
            <summary>
            The active threads
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList.Members">
            <summary>
            A thread member object for each returned thread the current user has joined
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList.HasMore">
            <summary>
            Whether there are potentially additional threads that could be returned on a subsequent call
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMember">
            <summary>
            Represents a guild or DM <a href="https://Rocket.com/developers/docs/resources/channel#thread-member-object">Thread Member Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMember.Id">
            <summary>
            The id of the thread
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMember.UserId">
            <summary>
            The id of the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMember.JoinTimestamp">
            <summary>
            The time the current user last joined the thread
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMember.Flags">
            <summary>
            Any user-thread settings, currently only used for notifications
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMetadata">
            <summary>
            Represents a guild or DM <a href="https://Rocket.com/developers/docs/resources/channel#thread-metadata-object-thread-metadata-structure">Thread Metadata Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMetadata.Archived">
            <summary>
            Whether the thread is archived
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMetadata.AutoArchiveDuration">
            <summary>
            Duration in minutes to automatically archive the thread after recent activity, can be set to: 60, 1440, 4320, 10080
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMetadata.ArchiveTimestamp">
            <summary>
            Timestamp when the thread's archive status was last changed, used for calculating recent activity
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMetadata.Locked">
            <summary>
            Whether the thread is locked
            When a thread is locked, only users with MANAGE_THREADS can unarchive it
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMetadata.Invitable">
            <summary>
            Whether non-moderators can add other non-moderators to a thread
            Only available on private threads
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadMetadata.CreateTimestamp">
            <summary>
            Timestamp when the thread was created; only populated for threads created after 2022-01-09
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Channels.VideoQualityMode">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#channel-object-video-quality-modes">Video Quality Mode</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.VideoQualityMode.Auto">
            <summary>
            Rocket chooses the quality for optimal performance
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Channels.VideoQualityMode.Full">
            <summary>
            720p
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/emoji#emoji-object">Emoji Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.Id">
            <summary>
            The ID for the emoji if it is custom; Otherwise invalid snowflake
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.EmojiId">
            <summary>
            Emoji id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.User">
            <summary>
            User that created this emoji
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.RequireColons">
            <summary>
            Whether this emoji must be wrapped in colons
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.Managed">
            <summary>
            Whether this emoji is managed
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.Animated">
            <summary>
            Whether this emoji is animated
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.Available">
            <summary>
            Whether this emoji can be used, may be false due to loss of Server Boosts
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.Url">
            <summary>
            Url to the emoji image
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.FromCharacter(System.String)">
            <summary>
            Returns an emoji object for the given emoji character
            </summary>
            <param name="emoji"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji.ToDataString">
            <summary>
            Returns the data string to be used in the API request
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Emojis.EmojiCreate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/emoji#create-guild-emoji-json-params">Emoji Create Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.EmojiCreate.ImageData">
            <summary>
            The 128x128 emoji image
            Emojis and animated emojis have a maximum file size of 256kb.
            Attempting to upload an emoji larger than this limit will fail and return 400 Bad Request
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Emojis.EmojiUpdate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/emoji#modify-guild-emoji-json-params">Emoji Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.EmojiUpdate.Name">
            <summary>
            Emoji name
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Emojis.EmojiUpdate.Roles">
            <summary>
            Roles this emoji is whitelisted to
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.CommandPayload">
            <summary>
            Represents a command payload
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.CommandPayload.OpCode">
            <summary>
            Command Code for the payload
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.CommandPayload.Payload">
            <summary>
            Payload data
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.ClientStatus">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#client-status-object">Client Status Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.ClientStatus.Desktop">
            <summary>
            The user's status set for an active desktop (Windows, Linux, Mac) application session
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.ClientStatus.Mobile">
            <summary>
            The user's status set for an active mobile (iOS, Android) application session
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.ClientStatus.Web">
            <summary>
            The user's status set for an active web (browser, bot account) application session
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes">Gateway Opcodes</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode.Heartbeat">
            <summary>
            Maintains an active gateway connection
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode.Identify">
            <summary>
            Starts a new session during the initial handshake.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode.PresenceUpdate">
            <summary>
            Update the client's status.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode.VoiceStateUpdate">
            <summary>
            Used to join/leave or move between voice channels.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode.Resume">
            <summary>
            Resume a previous session that was disconnected.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode.RequestGuildMembers">
            <summary>
            Request information about offline guild members in a large guild.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#request-guild-members">Request Guild Members</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand.GuildId">
            <summary>
            ID of the guild to get members for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand.Query">
            <summary>
            String that username starts with, or an empty string to return all members
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand.Limit">
            <summary>
            Maximum number of members to send matching the query;
            a limit of 0 can be used with an empty string query to return all members
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand.Presences">
            <summary>
            Used to specify if we want the presences of the matched members
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand.UserIds">
            <summary>
            Used to specify which users you wish to fetch
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.GuildMembersRequestCommand.Nonce">
            <summary>
            Nonce to identify the Guild Members Chunk response (Up to 25 characters)
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#identify">Identify</a> Command
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand.Token">
            <summary>
            Authentication token
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand.Properties">
            <summary>
            Connection properties
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand.Compress">
            <summary>
            Whether this connection supports compression of packets
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand.LargeThreshold">
            <summary>
            Value between 50 and 250, total number of members where the gateway will stop sending offline members in the guild member list
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand.Shard">
            <summary>
            Used for Guild Sharding
            See <a href="https://Rocket.com/developers/docs/topics/gateway#sharding">Guild Sharding</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand.PresenceUpdate">
            <summary>
            Presence structure for initial presence information
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.IdentifyCommand.Intents">
            <summary>
            The Gateway Intents you wish to receive
            See <a href="https://Rocket.com/developers/docs/topics/gateway#gateway-intents">Gateway Intents</a>
            See <see cref="T:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents"/>
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.Properties">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#identify-identify-connection-properties">Identify Connection Properties</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.Properties.OS">
            <summary>
            Your operating system
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.Properties.Browser">
            <summary>
            Your library name
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.Properties.Device">
            <summary>
            Your library name
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.ResumeSessionCommand">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#resume">Resume</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.ResumeSessionCommand.Token">
            <summary>
            Session token
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.ResumeSessionCommand.SessionId">
            <summary>
            Session ID
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Commands.ResumeSessionCommand.Sequence">
            <summary>
            Last sequence number received
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdatePresenceCommand">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#update-presence">Update Status</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdatePresenceCommand.Status">
            <summary>
            The user's new status
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.UserStatusType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdatePresenceCommand.Activities">
            <summary>
            The user's activities (Required)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdatePresenceCommand.Since">
            <summary>
            Unix time (in milliseconds) of when the client went idle, or null if the client is not idle
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdatePresenceCommand.Afk">
            <summary>
            Whether or not the client is afk
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdateVoiceStatusCommand">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#update-voice-state">Update Voice State</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdateVoiceStatusCommand.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdateVoiceStatusCommand.ChannelId">
            <summary>
            ID of the voice channel client wants to join (null if disconnecting)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdateVoiceStatusCommand.SelfMute">
            <summary>
            Is the client muted
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Commands.UpdateVoiceStatusCommand.SelfDeaf">
            <summary>
            Is the client deafened
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.EventPayload">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#payloads">Gateway Payload Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.EventPayload.OpCode">
            <summary>
            Op Code for the payload
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.EventPayload.EventName">
            <summary>
            The event name for this payload
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.EventPayload.Data">
            <summary>
            Event data
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.EventPayload.Sequence">
            <summary>
            Sequence number, used for resuming sessions and heartbeats
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.EventPayload.EventCode">
            <summary>
            Returns a DispatchCode enum value for the EventName if the extension supports it; Else the code will be Unknown
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.EventPayload.EventData">
            <summary>
            Data as JObject
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.EventPayload.TokenData">
            <summary>
            Data as JToken
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.ChannelPinsUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#channel-pins-update">Channel Pins Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ChannelPinsUpdatedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ChannelPinsUpdatedEvent.ChannelId">
            <summary>
            The id of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ChannelPinsUpdatedEvent.LastPinTimestamp">
            <summary>
            The time at which the most recent pinned message was pinned
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayEventCode">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-opcodes">Gateway Opcodes</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayEventCode.Dispatch">
            <summary>
            An event was dispatched.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayEventCode.Heartbeat">
            <summary>
            Fired periodically by the client to keep the connection alive.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayEventCode.Reconnect">
            <summary>
            You should attempt to reconnect and resume immediately.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayEventCode.InvalidSession">
            <summary>
            The session has been invalidated. You should reconnect and identify/resume accordingly.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayEventCode.Hello">
            <summary>
            Sent immediately after connecting, contains the heartbeat_interval to use.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayEventCode.HeartbeatAcknowledge">
            <summary>
            Sent in response to receiving a heartbeat to acknowledge that it has been received.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayHelloEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#hello">Hello</a>
            Sent on connection to the websocket. Defines the heartbeat interval that the client should heartbeat to.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayHelloEvent.HeartbeatInterval">
            <summary>
            The interval (in milliseconds) the client should heartbeat with
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#ready">Ready</a>
            The ready event is dispatched when a client has completed the initial handshake with the gateway (for new sessions)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent.Version">
            <summary>
            Gateway version
            See <a href="https://Rocket.com/developers/docs/topics/gateway#gateways-gateway-versions">Gateway Version</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent.User">
            <summary>
            Information about the user including email
            See <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent.Guilds">
            <summary>
            The guilds the user is in
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent.SessionId">
            <summary>
            Used for resuming connections
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent.Shard">
            <summary>
            The shard information associated with this session, if sent when identifying
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent.Application">
            <summary>
            Contains id and flags
            See <see cref="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayReadyEvent.Application"/>
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GatewayResumedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#resumed">Resumed</a>
            The resumed event is dispatched when a client has sent a resume payload to the gateway (for resuming existing sessions).
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildEmojisUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-emojis-update">Guild Emojis Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildEmojisUpdatedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildEmojisUpdatedEvent.Emojis">
            <summary>
            List of emojis
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildIntegrationsUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-integrations-update">Guild Integrations Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildIntegrationsUpdatedEvent.GuildId">
            <summary>
            ID of the guild whose integrations were updated
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberAddedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-member-add">Guild Member Add</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberAddedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberBannedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-ban-add">Guild Ban Add</a> Event
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-ban-remove">Guild Ban Remove</a> Event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberBannedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberBannedEvent.User">
            <summary>
            The banned / unbanned user
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberRemovedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-member-remove">Guild Member Remove</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberRemovedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberRemovedEvent.User">
            <summary>
            The user who was removed
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-members-chunk">Guild Members Chunk</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent.Members">
            <summary>
            Set of guild members
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent.ChunkIndex">
            <summary>
            The chunk index in the expected chunks for this response (0 &lt;= chunk_index &lt; chunk_count)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent.ChunkCount">
            <summary>
            The total number of expected chunks for this response
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent.NotFound">
            <summary>
            If passing an invalid id to REQUEST_GUILD_MEMBERS, it will be returned here
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent.Presences">
            <summary>
            If passing true to REQUEST_GUILD_MEMBERS, presences of the returned members will be here
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMembersChunkEvent.Nonce">
            <summary>
            The nonce used in the Guild Members Request
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-member-update">Guild Member Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildMemberUpdatedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleCreatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-role-create">Guild Role Create</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleCreatedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleCreatedEvent.Role">
            <summary>
            The role created
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleDeletedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-role-delete">Guild Role Delete</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleDeletedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleDeletedEvent.RoleId">
            <summary>
            ID of the role
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-role-update">Guild Role Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleUpdatedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildRoleUpdatedEvent.Role">
            <summary>
            The role updated
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserAddedEvent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/topics/gateway#guild-scheduled-event-user-add-guild-scheduled-event-user-add-event-fields">Guild Scheduled Event User Add Event Fields</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserAddedEvent.GuildScheduledEventId">
            <summary>
            ID of the guild scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserAddedEvent.UserId">
            <summary>
            ID of the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserAddedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserRemovedEvent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/topics/gateway#guild-scheduled-event-user-remove">Guild Scheduled Event User Remove Event Fields</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserRemovedEvent.GuildScheduledEventId">
            <summary>
            ID of the guild scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserRemovedEvent.UserId">
            <summary>
            ID of the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildScheduleEventUserRemovedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildStickersUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#guild-stickers-update">Guild Stickers Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildStickersUpdatedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.GuildStickersUpdatedEvent.Stickers">
            <summary>
            List of emojis
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationCreatedEvent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/topics/gateway#integration-create-integration-create-event-additional-fields">Integration Create Structure</a> 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationCreatedEvent.GuildId">
            <summary>
            Guild Id the Integration was created in
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationDeletedEvent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/topics/gateway#integration-delete-integration-delete-event-fields">Integration Delete Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationDeletedEvent.Id">
            <summary>
            ID of the integration
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationDeletedEvent.GuildId">
            <summary>
            Guild ID the integration was in
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationDeletedEvent.ApplicationId">
            <summary>
            Application ID of the integration
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationUpdatedEvent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/topics/gateway#integration-update-integration-update-event-additional-fields">Integration Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.IntegrationUpdatedEvent.GuildId">
            <summary>
            Guild ID the integration was updated In
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#invite-create">Invite Create</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.ChannelId">
            <summary>
            The channel the invite is for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.Code">
            <summary>
            The unique invite code
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.CreatedAt">
            <summary>
            The time at which the invite was created
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.GuildId">
            <summary>
            The guild of the invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.Inviter">
            <summary>
            The user that created the invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.MaxAge">
            <summary>
            How long the invite is valid for (in seconds)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.MaxUses">
            <summary>
            The maximum number of times the invite can be use
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.TargetUser">
            <summary>
            The target user for this invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.TargetUserType">
            <summary>
            The type of user target for this invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.Temporary">
            <summary>
            Whether or not the invite is temporary (invited users will be kicked on disconnect unless they're assigned a role)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteCreatedEvent.Uses">
            <summary>
            How many times the invite has been used (always will be 0)
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteDeletedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#invite-delete">Invite Delete</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteDeletedEvent.ChannelId">
            <summary>
            The channel of the invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteDeletedEvent.GuildId">
            <summary>
            The guild of the invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.InviteDeletedEvent.Code">
            <summary>
            The unique invite code
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageBulkDeletedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#message-delete-bulk">Message Delete Bulk</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageBulkDeletedEvent.Ids">
            <summary>
            The ids of the messages
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageBulkDeletedEvent.ChannelId">
            <summary>
            The id of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageBulkDeletedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageDeletedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#message-delete">Message Delete</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageDeletedEvent.Id">
            <summary>
            The id of the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageDeletedEvent.ChannelId">
            <summary>
            The id of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageDeletedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionAddedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-add">Message Reaction Add</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionAddedEvent.UserId">
            <summary>
            The id of the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionAddedEvent.ChannelId">
            <summary>
            The id of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionAddedEvent.MessageId">
            <summary>
            The id of the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionAddedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionAddedEvent.Member">
            <summary>
            The member who reacted if this happened in a guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionAddedEvent.Emoji">
            <summary>
            The emoji used to react
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedAllEmojiEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-remove-emoji-message-reaction-remove-emoji">Message Reaction Remove All</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedAllEmojiEvent.Emoji">
            <summary>
            Emoji that was removed from the message
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedAllEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-remove-all">Message Reaction Remove All</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedAllEvent.ChannelId">
            <summary>
            The id of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedAllEvent.MessageId">
            <summary>
            The id of the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedAllEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-remove">Message Reaction Remove</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedEvent.UserId">
            <summary>
            The id of the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedEvent.ChannelId">
            <summary>
            The id of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedEvent.MessageId">
            <summary>
            The id of the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedEvent.GuildId">
            <summary>
            The id of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.MessageReactionRemovedEvent.Emoji">
            <summary>
            The emoji removed
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.PresenceUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#presence-update">Presence Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.PresenceUpdatedEvent.User">
            <summary>
            The user presence is being updated for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.PresenceUpdatedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.PresenceUpdatedEvent.Status">
            <summary>
            Users status
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.PresenceUpdatedEvent.Activities">
            <summary>
            User's current activities
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.PresenceUpdatedEvent.ClientStatus">
            <summary>
            User's platform-dependent status
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadListSyncEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#thread-list-sync-thread-list-sync-event-fields">Thread List Sync</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadListSyncEvent.GuildId">
            <summary>
            The ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadListSyncEvent.ChannelIds">
            <summary>
            The parent channel ids whose threads are being synced. If omitted, then threads were synced for the entire guild. This array may contain channel_ids that have no active threads as well, so you know to clear that data.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadListSyncEvent.Threads">
            <summary>
            All active threads in the given channels that the current user can access
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadListSyncEvent.Members">
            <summary>
            All thread member objects from the synced threads for the current user, indicating which threads the current user has been added to
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMembersUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#thread-members-update-thread-members-update-event-fields">Thread Members Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMembersUpdatedEvent.Id">
            <summary>
            The id of the thread
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMembersUpdatedEvent.GuildId">
            <summary>
            The ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMembersUpdatedEvent.MemberCount">
            <summary>
            The approximate number of members in the thread, capped at 50
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMembersUpdatedEvent.AddedMembers">
            <summary>
            The users who were added to the thread
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMembersUpdatedEvent.RemovedMemberIds">
            <summary>
            The id of the users who were removed from the thread
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMemberUpdateEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#thread-member-update">Thread Member Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.ThreadMemberUpdateEvent.GuildId">
            <summary>
            The ID of the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.TypingStartedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#typing-start">Typing Start</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.TypingStartedEvent.ChannelId">
            <summary>
            ID of the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.TypingStartedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.TypingStartedEvent.UserId">
            <summary>
            ID of the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.TypingStartedEvent.Timestamp">
            <summary>
            Unix time (in seconds) of when the user started typing
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.TypingStartedEvent.Member">
            <summary>
            The member who started typing if this happened in a guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.VoiceServerUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#voice-server-update">Voice Server Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.VoiceServerUpdatedEvent.Token">
            <summary>
            Voice connection token
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.VoiceServerUpdatedEvent.GuildId">
            <summary>
            The guild this voice server update is for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.VoiceServerUpdatedEvent.Endpoint">
            <summary>
            The voice server host
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Events.WebhooksUpdatedEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#webhooks-update">Webhooks Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.WebhooksUpdatedEvent.GuildId">
            <summary>
            ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Events.WebhooksUpdatedEvent.ChannelId">
            <summary>
            ID of the channel
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.Gateway">
            <summary>
            Represents Rocket Gatway Connection Url
            See <a href="https://Rocket.com/developers/docs/topics/gateway#get-gateway">Get Gateway</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Gateway.Url">
            <summary>
            Gatway URL to use
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Gatway.Gateway.WebsocketUrl">
            <summary>
            Saved Gateway URL
            Example: wss://gateway.Rocket.gg/?v=8&amp;encoding=json
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Gatway.Gateway.GetGateway(Oxide.Ext.Rocket.BotClient,System.Action{Oxide.Ext.Rocket.Entities.Gatway.Gateway})">
            <summary>
            Returns an object with a single valid WSS URL, which the client can use for Connecting.
            Clients should cache this value and only call this endpoint to retrieve a new URL if they are unable to properly establish a connection using the cached version of the URL.
            See <a href="https://Rocket.com/developers/docs/topics/gateway#get-gateway">Get Gateway</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the Gateway response</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.GatewayConnect">
            <summary>
            Represents the websocket connection data
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayConnect.Version">
            <summary>
            Which websocket version to use
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayConnect.Encoding">
            <summary>
            How the data sent / received will be encoded
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayConnect.Compress">
            <summary>
            Compression the websocket should use
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayConnect.ConnectionArgs">
            <summary>
            Generated connection string for the websocket
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/gateway#gateway-intents">Gateway Intents</a>
            These are used to indicate which events your bot / application wants to listen to / have access to
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.None">
            <summary>
            Represents No Intents
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.Guilds">
            <summary>
            - GUILD_CREATE
            - GUILD_UPDATE
            - GUILD_DELETE
            - GUILD_ROLE_CREATE
            - GUILD_ROLE_UPDATE
            - GUILD_ROLE_DELETE
            - CHANNEL_CREATE
            - CHANNEL_UPDATE
            - CHANNEL_DELETE
            - CHANNEL_PINS_UPDATE
            - THREAD_CREATE
            - THREAD_UPDATE
            - THREAD_DELETE
            - THREAD_LIST_SYNC
            - THREAD_MEMBER_UPDATE
            - THREAD_MEMBERS_UPDATE
            - STAGE_INSTANCE_CREATE
            - STAGE_INSTANCE_UPDATE
            - STAGE_INSTANCE_DELETE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildMembers">
            <summary>
            - GUILD_MEMBER_ADD
            - GUILD_MEMBER_UPDATE
            - GUILD_MEMBER_REMOVE
            - THREAD_MEMBERS_UPDATE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildBans">
            <summary>
            - GUILD_BAN_ADD
            - GUILD_BAN_REMOVE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildEmojisAndStickers">
            <summary>
            - GUILD_EMOJIS_UPDATE
            - GUILD_STICKERS_UPDATE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildIntegrations">
            <summary>
            - GUILD_INTEGRATIONS_UPDATE
            - INTEGRATION_CREATE
            - INTEGRATION_UPDATE
            - INTEGRATION_DELETE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildWebhooks">
            <summary>
            - WEBHOOKS_UPDATE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildInvites">
            <summary>
            - INVITE_CREATE
            - INVITE_DELETE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildVoiceStates">
            <summary>
            - VOICE_STATE_UPDATE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildPresences">
            <summary>
            - PRESENCE_UPDATE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildMessages">
            <summary>
            - MESSAGE_CREATE
            - MESSAGE_UPDATE
            - MESSAGE_DELETE
            - MESSAGE_DELETE_BULK
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildMessageReactions">
            <summary>
            - MESSAGE_REACTION_ADD
            - MESSAGE_REACTION_REMOVE
            - MESSAGE_REACTION_REMOVE_ALL
            - MESSAGE_REACTION_REMOVE_EMOJI
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildMessageTyping">
            <summary>
            - TYPING_START
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.DirectMessages">
            <summary>
            - MESSAGE_CREATE
            - MESSAGE_UPDATE
            - MESSAGE_DELETE
            - CHANNEL_PINS_UPDATE
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.DirectMessageReactions">
            <summary>
            - MESSAGE_REACTION_ADD
            - MESSAGE_REACTION_REMOVE
            - MESSAGE_REACTION_REMOVE_ALL
            - MESSAGE_REACTION_REMOVE_EMOJI
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.DirectMessageTyping">
            <summary>
            - TYPING_START
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Gatway.GatewayIntents.GuildScheduledEvents">
            <summary>
            - GUILD_SCHEDULED_EVENT_CREATE
            - GUILD_SCHEDULED_EVENT_UPDATE
            - GUILD_SCHEDULED_EVENT_DELETE
            - GUILD_SCHEDULED_EVENT_USER_ADD
            - GUILD_SCHEDULED_EVENT_USER_REMOVE
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.DefaultNotificationLevel">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object-default-message-notification-level">Default Message Notification Level</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.DefaultNotificationLevel.AllMessages">
            <summary>
            Notify for all guild messages
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.DefaultNotificationLevel.OnlyMentions">
            <summary>
            Notify for only mentions
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object">Guild Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Id">
            <summary>
            Guild id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Name">
            <summary>
            Name of the guild (2-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Icon">
            <summary>
            Base64 128x128 image for the guild icon
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.IconHash">
            <summary>
            Icon hash
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Splash">
            <summary>
            Splash hash
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DiscoverySplash">
            <summary>
            Discovery splash hash
            Only present for guilds with the "DISCOVERABLE" feature
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Owner">
            <summary>
            True if the user is the owner of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.OwnerId">
            <summary>
            ID of owner
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Permissions">
            <summary>
            Total permissions for the user in the guild (excludes overrides)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.AfkChannelId">
            <summary>
            ID of afk channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.AfkTimeout">
            <summary>
            Afk timeout in seconds
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.WidgetEnabled">
            <summary>
            True if the server widget is enabled
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.WidgetChannelId">
            <summary>
            The channel id that the widget will generate an invite to, or null if set to no invite
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.VerificationLevel">
            <summary>
            Verification level
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DefaultMessageNotifications">
            <summary>
            Default message notification level
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ExplicitContentFilter">
            <summary>
            Explicit content filter level
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Roles">
            <summary>
            Roles in the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Emojis">
            <summary>
            Custom guild emojis
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Features">
            <summary>
            Enabled guild features
            See <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.MfaLevel">
            <summary>
            Required MFA level for the guild
            See <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.GuildMFALevel"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ApplicationId">
            <summary>
            Application id of the guild creator if it is bot-created
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.SystemChannelId">
            <summary>
            The id of the channel where guild notices such as welcome messages and boost events are posted
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.SystemChannelFlags">
            <summary>
            System channel flags
            See <see cref="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.SystemChannelFlags"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.RulesChannelId">
            <summary>
            The id of the channel where Community guilds can display rules and/or guidelines
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.JoinedAt">
            <summary>
            When this guild was joined at
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Large">
            <summary>
            True if this is considered a large guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Unavailable">
            <summary>
            True if this guild is unavailable due to an outage
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.MemberCount">
            <summary>
            Total number of members in this guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.VoiceStates">
            <summary>
            States of members currently in voice channels; lacks the guild_id key
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Members">
            <summary>
            Users in the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Channels">
            <summary>
            Channels in the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Threads">
            <summary>
            All active threads in the guild that current user has permission to view
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Presences">
            <summary>
            Presences of the members in the guild
            will only include non-offline members if the size is greater than large threshold
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.MaxPresences">
            <summary>
            The maximum number of presences for the guild (the default value, currently 25000, is in effect when null is returned)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.MaxMembers">
            <summary>
            The maximum number of members for the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.VanityUrlCode">
            <summary>
            The vanity url code for the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Description">
            <summary>
            The description of a Community guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Banner">
            <summary>
            Banner hash
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.PremiumTier">
            <summary>
            Premium tier (Server Boost level)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.PremiumSubscriptionCount">
            <summary>
            The number of boosts this guild currently has
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.PreferredLocale">
            <summary>
            The preferred locale of a Community guild
            Used in server discovery and notices from Rocket
            Defaults to "en-US"
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.PublicUpdatesChannelId">
            <summary>
            The maximum amount of users in a video channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.MaxVideoChannelUsers">
            <summary>
            The maximum amount of users in a video channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ApproximateMemberCount">
            <summary>
            Approximate number of members in this guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ApproximatePresenceCount">
            <summary>
            Approximate number of non-offline members in this guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.WelcomeScreen">
            <summary>
            The welcome screen of a Community guild
            Shown to new members, returned in an Invite's guild object
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.NsfwLevel">
            <summary>
            Guild NSFW level
            <a href="https://support.Rocket.com/hc/en-us/articles/1500005389362-NSFW-Server-Designation">NSFW Information</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.StageInstances">
            <summary>
            Stage instances in the guild
            <see cref="T:Oxide.Ext.Rocket.Entities.Channels.Stages.StageInstance"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.Stickers">
            <summary>
            Custom guild stickers
            <see cref="T:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ScheduledEvents">
            <summary>
            The scheduled events in the guild
            <see cref="T:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.PremiumProgressBarEnabled">
            <summary>
            The scheduled events in the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.HasLoadedAllMembers">
            <summary>
            Returns true if all guild members have been loaded
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.IsAvailable">
            <summary>
            Returns if the guild is available to use
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.IconUrl">
            <summary>
            Returns the guild Icon Url
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.SplashUrl">
            <summary>
            Returns the Guilds Splash Url
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DiscoverySplashUrl">
            <summary>
            Returns the guilds Discovery Splash
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.BannerUrl">
            <summary>
            Return the guilds Banner Url
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.EveryoneRole">
            <summary>
            Returns the everyone role for the guild.
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetChannel(System.String)">
            <summary>
            Returns a channel with the given name (Case Insensitive)
            </summary>
            <param name="name">Name of the channel</param>
            <returns>Channel with the given name; Null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetParentChannel(Oxide.Ext.Rocket.Entities.Channels.RocketChannel)">
            <summary>
            Returns the parent channel for a channel if it exists
            </summary>
            <param name="channel">Channel to find the parent for</param>
            <returns>Parent channel for the given channel; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetRole(System.String)">
            <summary>
            Returns a Role with the given name (Case Insensitive)
            </summary>
            <param name="name">Name of the role</param>
            <returns>Role with the given name; Null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetBoosterRole">
            <summary>
            Returns the booster role for the guild if it exists
            </summary>
            <returns>Booster role; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetMember(System.String)">
            <summary>
            Returns a GuildMember with the given username (Case Insensitive)
            </summary>
            <param name="userName">Username of the GuildMember</param>
            <returns>GuildMember with the given username; Null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetEmoji(System.String)">
            <summary>
            Finds guild emoji by name
            </summary>
            <param name="name">Name of the emoji</param>
            <returns>Emoji if found; null otherwise</returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.CreateGuild(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.GuildCreate,System.Action{Oxide.Ext.Rocket.Entities.Guilds.RocketGuild},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new guild.
            See <a href="https://Rocket.com/developers/docs/resources/guild#create-guild">Create Guild</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="create">Guild Create Object</param>
            <param name="callback">Callback with the created guild</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuild(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Guilds.RocketGuild},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the guild object for the given id
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild">Get Guild</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID to lookup</param>
            <param name="callback">callback with the guild for the given ID</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildPreview(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildPreview},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the guild preview object for the given id.
            If the user is not in the guild, then the guild must be Discoverable.
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID to get preview for</param>
            <param name="callback">Callback with the guild preview for the ID</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuild(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Guilds.RocketGuild},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify a guild's settings.
            Requires the MANAGE_GUILD permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild">Modify Guild</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the updated guild</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DeleteGuild(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a guild permanently.
            User must be owner
            See <a href="https://Rocket.com/developers/docs/resources/guild#delete-guild">Delete Guild</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildChannels(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Channels.RocketChannel}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of guild channel objects.
            Does not include threads
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-channels">Get Guild Channels</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the list of channels</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.CreateGuildChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.ChannelCreate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new channel object for the guild.
            Requires the MANAGE_CHANNELS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#create-guild-channel">Create Guild Channel</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channel">Channel to create</param>
            <param name="callback">Callback with created channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuildChannelPositions(Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.GuildChannelPosition},System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the positions of a set of channel objects for the guild.
            Requires MANAGE_CHANNELS permission.
            Only channels to be modified are required, with the minimum being a swap between at least two channels.
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-channel-positions">Modify Guild Channel Positions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="positions">List new channel positions for each channel</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ListActiveThreads(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadList}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns all active threads in the guild, including public and private threads. Threads are ordered by their id, in descending order.
            See <a href="https://Rocket.com/developers/docs/resources/guild#list-active-threads">List Active Threads</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with a list of threads and thread members for a guild</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildMember},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a guild member object for the specified user.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-member">Get Guild Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">UserID to get guild member for</param>
            <param name="callback">Callback with guild member matching user Id</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ListGuildMembers(Oxide.Ext.Rocket.RocketClient,System.Int32,System.String,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.GuildMember}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of guild member objects that are members of the guild.
            In the future, this endpoint will be restricted in line with our Privileged Intents
            </summary>
            <param name="client">Client to use</param>
            <param name="limit">Max number of members to return (1-1000)</param>
            <param name="afterSnowflake">The highest user id in the previous page</param>
            <param name="callback">Callback with list of guild members</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.SearchGuildMembers(Oxide.Ext.Rocket.RocketClient,System.String,System.Int32,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.GuildMember}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Searches for guild members by username or nickname
            </summary>
            <param name="client">Client to use</param>
            <param name="search">Username or nickname to match</param>
            <param name="limit">Max number of members to return (1-1000)</param>
            <param name="callback">Callback with matching guild members</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.AddGuildMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.GuildMember,System.String,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Permissions.RocketRole},System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildMember},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope. 
            See <a href="https://Rocket.com/developers/docs/resources/guild#add-guild-member">Add Guild Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="member">Member to copy from</param>
            <param name="accessToken">Member access token</param>
            <param name="roles">List of roles to grant</param>
            <param name="callback">Callback with the added guild member</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.AddGuildMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.GuildMemberAdd,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildMember},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a user to the guild, provided you have a valid oauth2 access token for the user with the guilds.join scope. 
            See <a href="https://Rocket.com/developers/docs/resources/guild#add-guild-member">Add Guild Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID of the user to add</param>
            <param name="member">Member to copy from</param>
            <param name="callback">Callback with the added guild member</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuildMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildMember},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify attributes of a guild member
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-member">Modify Guild Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID of the user to update</param>
            <param name="update">Changes to make to the user</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyUsersNick(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildMember},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify attributes of a guild member
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-member">Modify Guild Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID of the user to update</param>
            <param name="nick">Nickname for the user</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyCurrentMember(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildMember},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modifies the current members nickname in the guild
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-current-member">Modify Current Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="nick">New members nickname</param>
            <param name="callback">Callback with the updated guild member</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyCurrentUsersNick(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{System.String},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modifies the nickname of the current user in a guild
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-current-user-nick">Modify Current User Nick</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="nick">New user nickname</param>
            <param name="callback">Callback with updated nickname</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.AddGuildMemberRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Users.RocketUser,Oxide.Ext.Rocket.Entities.Permissions.RocketRole,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a role to a guild member.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#add-guild-member-role">Add Guild Member Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="user">User to add role to</param>
            <param name="role">Role to add</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.AddGuildMemberRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a role to a guild member.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#add-guild-member-role">Add Guild Member Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID to add role to</param>
            <param name="roleId">Role ID to add</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.RemoveGuildMemberRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Users.RocketUser,Oxide.Ext.Rocket.Entities.Permissions.RocketRole,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Removes a role from a guild member.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#remove-guild-member-role">Remove Guild Member Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="user">User to remove role form</param>
            <param name="role">Role to remove</param>
            <param name="callback">callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.RemoveGuildMemberRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Removes a role from a guild member.
            Requires the MANAGE_ROLES permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#remove-guild-member-role">Remove Guild Member Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID to remove role form</param>
            <param name="roleId">Role ID to remove</param>
            <param name="callback">callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.RemoveGuildMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.GuildMember,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Remove a member from a guild.
            Requires KICK_MEMBERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#remove-guild-member">Remove Guild Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="member">Guild Member to remove</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.RemoveGuildMember(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Remove a member from a guild.
            Requires KICK_MEMBERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#remove-guild-member">Remove Guild Member</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID of the user to remove</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildBans(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.GuildBan}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of ban objects for the users banned from this guild.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-bans">Get Guild Bans</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the list of guild bans</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildBan(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildBan},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a guild ban for a specific user
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-ban">Get Guild Ban</a>
            Returns 404 if not found
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID to get guild ban for</param>
            <param name="callback">Callback with the guild ban for the user</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.CreateGuildBan(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.GuildMember,Oxide.Ext.Rocket.Entities.Guilds.GuildBanCreate,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a guild ban, and optionally delete previous messages sent by the banned user.
            Requires the BAN_MEMBERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#create-guild-ban">Create Guild Ban</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="member">Guild Member to ban</param>
            <param name="ban">User ban information</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.CreateGuildBan(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.GuildBanCreate,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a guild ban, and optionally delete previous messages sent by the banned user.
            Requires the BAN_MEMBERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#create-guild-ban">Create Guild Ban</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID to ban</param>
            <param name="ban">User ban information</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.RemoveGuildBan(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Remove the ban for a user.
            Requires the BAN_MEMBERS permissions.
            See <a href="https://Rocket.com/developers/docs/resources/guild#remove-guild-ban">Remove Guild Ban</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID of the user to unban</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildRoles(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Permissions.RocketRole}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of role objects for the guild.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-roles">Get Guild Roles</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with a list of role objects</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.CreateGuildRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Permissions.RocketRole,System.Action{Oxide.Ext.Rocket.Entities.Permissions.RocketRole},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new role for the guild.
            Requires the MANAGE_ROLES permission.
            Returns the new role object on success.
            See <a href="https://Rocket.com/developers/docs/resources/guild#create-guild-role">Create Guild Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="role">New role to create</param>
            <param name="callback">Callback with the created role</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuildRolePositions(Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.GuildRolePosition},System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Permissions.RocketRole}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the positions of a set of role objects for the guild.
            Requires the MANAGE_ROLES permission.
            Returns a list of all of the guild's role objects on success.
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-role-positions">Modify Guild Role Positions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="positions">List of role with updated positions</param>
            <param name="callback">Callback with a list of all guild role objects</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuildRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Permissions.RocketRole,System.Action{Oxide.Ext.Rocket.Entities.Permissions.RocketRole},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify a guild role.
            Requires the MANAGE_ROLES permission.
            Returns the updated role on success.
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-role">Modify Guild Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="role">Role to update</param>
            <param name="callback">Callback with the updated role</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuildRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Permissions.RocketRole,System.Action{Oxide.Ext.Rocket.Entities.Permissions.RocketRole},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify a guild role.
            Requires the MANAGE_ROLES permission.
            Returns the updated role on success.
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-role">Modify Guild Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="roleId">Role ID to update</param>
            <param name="role">Role to update</param>
            <param name="callback">Callback with the updated role</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DeleteGuildRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Permissions.RocketRole,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a guild role.
            Requires the MANAGE_ROLES permission
            See <a href="https://Rocket.com/developers/docs/resources/guild#delete-guild-role">Delete Guild Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="role">Role to Delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DeleteGuildRole(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a guild role.
            Requires the MANAGE_ROLES permission
            See <a href="https://Rocket.com/developers/docs/resources/guild#delete-guild-role">Delete Guild Role</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="roleId">Role ID to Delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildPruneCount(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.GuildPruneGet,System.Action{System.Nullable{System.Int32}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns an object with one 'pruned' key indicating the number of members that would be removed in a prune operation.
            Requires the KICK_MEMBERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-prune-count">Get Guild Prune Count</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="prune">Prune get request</param>
            <param name="callback">Callback with the number of members that would be pruned</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.BeginGuildPrune(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.GuildPruneBegin,System.Action{System.Nullable{System.Int32}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Begin a prune operation.
            Requires the KICK_MEMBERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#begin-guild-prune">Begin Guild Prune</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="prune">Prune begin request</param>
            <param name="callback">Callback with number of pruned members</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildVoiceRegions(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Voice.VoiceRegion}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of voice region objects for the guild.
            Unlike the similar /voice route, this returns VIP servers when the guild is VIP-enabled.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-voice-regions">Get Guild Voice Regions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with list of guild voice regions</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildInvites(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Invites.InviteMetadata}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of invite objects (with invite metadata) for the guild.
            Requires the MANAGE_GUILD permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-invites">Get Guild Invites</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with a list of guild invites</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildIntegrations(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Integrations.Integration}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of integration objects for the guild.
            Requires the MANAGE_GUILD permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-integrations">Get Guild Integrations</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with a list of guild integrations</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DeleteGuildIntegration(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Integrations.Integration,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete the attached integration object for the guild.
            Deletes any associated webhooks and kicks the associated bot if there is one.
            Requires the MANAGE_GUILD permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#delete-guild-integration">Delete Guild Integration</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="integration">Integration to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DeleteGuildIntegration(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete the attached integration object for the guild.
            Deletes any associated webhooks and kicks the associated bot if there is one.
            Requires the MANAGE_GUILD permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#delete-guild-integration">Delete Guild Integration</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="integrationId">Integration ID to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildWidgetSettings(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildWidgetSettings},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a guild widget object.
            Requires the MANAGE_GUILD permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-widget-settings">Get Guild Widget Settings</a>
            </summary>
            <param name="client">client to use</param>
            <param name="callback">Callback with guild widget settings</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuildWidget(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.GuildWidget,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildWidget},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify a guild widget object for the guild.
            Requires the MANAGE_GUILD permission.
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-widget">Modify Guild Widget</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="widget">Updated widget</param>
            <param name="callback">Callback with update guild widget</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildWidget(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildWidget},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the widget for the guild.
            See <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-widget">Get Guild Widget</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with guild widget</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildWelcomeScreen(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreen},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the Welcome Screen object for the guild.
            Requires the `MANAGE_GUILD` permission.
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with welcome screen for the guild</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyWelcomeScreen(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.WelcomeScreenUpdate,System.Action{Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreen},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the guild's Welcome Screen.
            Requires the MANAGE_GUILD permission.
            Returns the updated Welcome Screen object.
            </summary>
            <param name="client">Client to use</param>
            <param name="update">Update to be made to the welcome screen</param>
            <param name="callback">Callback with updated welcome screen for the guild</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildVanityUrl(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Invites.InviteMetadata},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a partial invite object for guilds with that feature enabled.
            Requires the MANAGE_GUILD permission.
            Code will be null if a vanity url for the guild is not set.
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with invite </param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ListGuildEmojis(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of emoji objects for the given guild.
            See <a href="https://Rocket.com/developers/docs/resources/emoji#list-guild-emojis">List Guild Emojis</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with list of guild emojis</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildEmoji(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns an emoji object for the given guild and emoji IDs.
            See <a href="https://Rocket.com/developers/docs/resources/emoji#get-guild-emoji">Get Guild Emoji</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emjoiId">Emoji to lookup</param>
            <param name="callback">Callback with the guild emoji</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.CreateGuildEmoji(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Emojis.EmojiCreate,System.Action{Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new emoji for the guild.
            Requires the MANAGE_EMOJIS permission.
            Returns the new emoji object on success.
            See <a href="https://Rocket.com/developers/docs/resources/emoji#create-guild-emoji">Create Guild Emoji</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to create</param>
            <param name="callback">Callback with the created emoji</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.UpdateGuildEmoji(Oxide.Ext.Rocket.RocketClient,System.String,Oxide.Ext.Rocket.Entities.Emojis.EmojiUpdate,System.Action{Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the given emoji.
            Requires the MANAGE_EMOJIS permission.
            Returns the updated emoji object on success.
            See <a href="https://Rocket.com/developers/docs/resources/emoji#modify-guild-emoji">Modify Guild Emoji</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emojiId">Emoji ID to update</param>
            <param name="emoji">Emoji update</param>
            <param name="callback">Callback with the updated emoji</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DeleteGuildEmoji(Oxide.Ext.Rocket.RocketClient,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete the given emoji.
            Requires the MANAGE_EMOJIS permission.
            See <a href="https://Rocket.com/developers/docs/resources/emoji#delete-guild-emoji">Delete Guild Emoji</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emojiId">Emoji ID to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyCurrentUserVoiceState(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Nullable{System.Boolean},System.Nullable{System.DateTime},System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modifies the current user's voice state.
            See <a href="https://Rocket.com/developers/docs/resources/guild#update-current-user-voice-state">Update Current User Voice State</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID of the stage channel</param>
            <param name="suppress">Changes the users suppressed state</param>
            <param name="requestToSpeak">Sets the user's request to speak</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyUserVoiceState(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.Nullable{System.Boolean},System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modifies another user's voice state.
            See <a href="https://Rocket.com/developers/docs/resources/guild#modify-user-voice-state">Update Users Voice State</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID of the users state to update</param>
            <param name="channelId">Channel ID of the stage channel</param>
            <param name="suppress">Changes the users suppressed state</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ListGuildStickers(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Stickers.RocketSticker}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns an array of sticker objects for the given guild.
            Includes user fields if the bot has the MANAGE_EMOJIS_AND_STICKERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#list-guild-stickers">List Guild Stickers</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the list of stickers</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.GetGuildSticker(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Stickers.RocketSticker},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a sticker object for the given guild and sticker IDs.
            Includes the user field if the bot has the MANAGE_EMOJIS_AND_STICKERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#get-guild-sticker">Get Guild Sticker</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="stickerId">ID of the sticker to get</param>
            <param name="callback">Callback with the Rocket sticker</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.CreateGuildSticker(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Stickers.GuildStickerCreate,System.Action{Oxide.Ext.Rocket.Entities.Stickers.RocketSticker},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new sticker for the guild.
            Requires the MANAGE_EMOJIS_AND_STICKERS permission.
            Returns the new sticker object on success.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#create-guild-sticker">Create Guild Sticker</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="sticker">Sticker to create</param>
            <param name="callback">Callback with the Rocket sticker</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.ModifyGuildSticker(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Stickers.RocketSticker,System.Action{Oxide.Ext.Rocket.Entities.Stickers.RocketSticker},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the given sticker.
            Requires the MANAGE_EMOJIS_AND_STICKERS permission.
            Returns the updated sticker object on success.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#modify-guild-sticker">Modify Guild Sticker</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="sticker">Sticker to modify</param>
            <param name="callback">Callback with the updated Rocket sticker</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.RocketGuild.DeleteGuildSticker(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete the given sticker.
            Requires the MANAGE_EMOJIS_AND_STICKERS permission.
            </summary>
            <param name="client">Client to use</param>
            <param name="stickerId">ID of the sticker to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
            See <a href="https://Rocket.com/developers/docs/resources/sticker#delete-guild-sticker">Delete Guild Sticker</a>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ExplicitContentFilterLevel">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object-explicit-content-filter-level">Explicit Content Filter Level</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ExplicitContentFilterLevel.Disabled">
            <summary>
            Disable explicit content filter
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ExplicitContentFilterLevel.MembersWithoutRoles">
            <summary>
            Filter for only members without roles
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ExplicitContentFilterLevel.AllMembers">
            <summary>
            Filter for all members
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildBan">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#ban-object-ban-structure">Guild Ban Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildBan.Reason">
            <summary>
            The reason for the ban
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildBan.User">
            <summary>
            The banned user
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildBanCreate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#create-guild-ban">Guild Ban Create Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildBanCreate.DeleteMessageDays">
            <summary>
            Number of days to delete messages for (0-7)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildBanCreate.Reason">
            <summary>
            Reason for the ban
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildChannelPosition">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-channel-positions">Modify Guild Channel Position</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildChannelPosition.Id">
            <summary>
            ID of the channel or role
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildChannelPosition.Position">
            <summary>
            New position for the role / channel
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#create-guild">Create Guild Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.Name">
            <summary>
            Name of the guild (2-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.Region">
            <summary>
            Voice region id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.Icon">
            <summary>
            Base64 128x128 image for the guild icon
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.VerificationLevel">
            <summary>
            Verification level
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.DefaultMessageNotifications">
            <summary>
            Default message notification level
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.ExplicitContentFilter">
            <summary>
            Explicit content filter level
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.Roles">
            <summary>
            Roles in the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.Channels">
            <summary>
            Channels in the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.AfkChannelId">
            <summary>
            ID of afk channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.AfkTimeout">
            <summary>
            Afk timeout in seconds
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.SystemChannelId">
            <summary>
            The id of the channel where guild notices such as welcome messages and boost events are posted
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildCreate.SystemChannelFlags">
            <summary>
            System channel flags
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object-guild-features">Guild Features</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Unknown">
            <summary>
            Rocket Extension doesn't currently support a guild features
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.AnimatedIcon">
            <summary>
            Guild has access to set an animated guild icon
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Banner">
            <summary>
            Guild has access to set a guild banner image
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Commerce">
            <summary>
            Guild has access to use commerce features (i.e. create store channels)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Community">
            <summary>
            Guild can enable welcome screen and discovery, and receives community updates
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Discoverable">
            <summary>
            Guild is lurkable and able to be discovered in the directory
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Featurable">
            <summary>
            Guild is able to be featured in the directory
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.InviteSplash">
            <summary>
            Guild has access to set an invite splash background
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.MemberVerificationGateEnabled">
            <summary>
            Guild has enabled Membership Screening
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.MonetizationEnabled">
            <summary>
            Guild has enabled monetization
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.MoreStickers">
            <summary>
            Guild has increased custom sticker slots
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.News">
            <summary>
            Guild has access to create news channels
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Partnered">
            <summary>
            Guild is partnered
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.PreviewEnabled">
            <summary>
            Guild can be previewed before joining via Membership Screening or the directory
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.PrivateThreads">
            <summary>
            Guild has access to create private threads
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.RoleIcons">
            <summary>
            Guild can be previewed before joining via Membership Screening or the directory
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.SevenDayThreadArchive">
            <summary>
            Guild has access to the seven day archive time for threads
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.ThreeDayThreadArchive">
            <summary>
            Guild has access to the three day archive time for threads
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.TicketedEventsEnabled">
            <summary>
            Guild has enabled ticketed events
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.VanityUrl">
            <summary>
            Guild has access to set a vanity URL
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.Verified">
            <summary>
            Guild is verified
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.VipRegions">
            <summary>
            Guild has access to set 384kbps bitrate in voice (previously VIP voice servers)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures.WelcomeScreenEnabled">
            <summary>
            Guild has enabled the welcome screen
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildMember">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-member-object-guild-member-structure">Guild Member Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Id">
            <summary>
            Id for guild member
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.User">
            <summary>
            The user this guild member represents
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Nickname">
            <summary>
            This users guild nickname
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Avatar">
            <summary>
            The member's guild avatar hash
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Roles">
            <summary>
            List of member roles
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.JoinedAt">
            <summary>
            When the user joined the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.PremiumSince">
            <summary>
            When the user started boosting the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Permissions">
            <summary>
            Total permissions of the member in the channel, including overrides, returned when in the interaction object
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Deaf">
            <summary>
            Whether the user is deafened in voice channels
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Mute">
            <summary>
            Whether the user is muted in voice channels
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.Pending">
            <summary>
            Whether the user has not yet passed the guild's Membership Screening requirements
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.CommunicationDisabledUntil">
            <summary>
            When the user's timeout will expire and the user will be able to communicate in the guild again, null or a time in the past if the user is not timed out
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.DisplayName">
            <summary>
            Returns the display name show for the user in a guild
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.HasRole(Oxide.Ext.Rocket.Entities.Permissions.RocketRole)">
            <summary>
            Returns if member has the given role
            </summary>
            <param name="role">Role to check</param>
            <returns>Return true if has role; False otherwise;</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if role is null</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.GuildMember.HasRole(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns if member has the given role
            </summary>
            <param name="roleId">Role ID to check</param>
            <returns>Return true if has role; False otherwise;</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberAdd">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#add-guild-member-json-params">Guild Member Add</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberAdd.AccessToken">
            <summary>
            An oauth2 access token granted with the guilds.join to the bot's application for the user you want to add to the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberAdd.Nick">
            <summary>
            Value to set users nickname to
            Requires permission MANAGE_NICKNAMES
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberAdd.Roles">
            <summary>
            Role ids the member is assigned
            Requires permission MANAGE_ROLES
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberAdd.Mute">
            <summary>
            Whether the user is muted in voice channels
            Requires permission MUTE_MEMBERS
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberAdd.Deaf">
            <summary>
            Whether the user is deafened in voice channels
            Requires permission DEAFEN_MEMBERS
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-member-json-params">Guild Member Update Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate.Nick">
            <summary>
            The nickname to give the user
            Requires MANAGE_NICKNAMES Permission
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate.Roles">
            <summary>
            New list of guild members roles
            Will replaces all roles with the ones in this list
            Requires MANAGE_ROLES Permission
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate.Deaf">
            <summary>
            Deafen the guild member
            Requires DEAFEN_MEMBERS Permission
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate.Mute">
            <summary>
            Mute the guild member
            Requires MUTE_MEMBERS Permission
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate.ChannelId">
            <summary>
            The channel to move the user to
            Requires MOVE_MEMBERS Permission
            Setting to null will remove that member from a voice channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildMemberUpdate.CommunicationDisabledUntil">
            <summary>
            When the user's timeout will expire and the user will be able to communicate in the guild again (up to 28 days in the future), set to null to remove timeout
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildMFALevel">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object-mfa-level">MFA Level</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildMFALevel.None">
            <summary>
            Guild does not require MFA
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildMFALevel.Elevated">
            <summary>
            Guild requires elevated MFA
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildNsfwLevel">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-nsfw-level">Guild NSFW Level</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildNsfwLevel.Default">
            <summary>
            Default NSFW Level
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildNsfwLevel.Explicit">
            <summary>
            Guild is explicitly NSFW
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildNsfwLevel.Safe">
            <summary>
            Guild is safe from NSFW
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildNsfwLevel.AgeRestricted">
            <summary>
            Guild is age restricted
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildPremiumTier">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object-verification-level">Verification Level</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildPremiumTier.None">
            <summary>
            Guild does not have any premium tier
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildPremiumTier.Tier1">
            <summary>
            Guild is premium tier 1
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildPremiumTier.Tier2">
            <summary>
            Guild is premium tier 2
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildPremiumTier.Tier3">
            <summary>
            Guild is premium tier 3
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-preview-object">Guild Preview Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Id">
            <summary>
            Guild id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Name">
            <summary>
            Name of the guild (2-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Icon">
            <summary>
            Base64 128x128 image for the guild icon
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Splash">
            <summary>
            Splash hash
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.DiscoverySplash">
            <summary>
            Discovery splash hash
            Only present for guilds with the "DISCOVERABLE" feature
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Emojis">
            <summary>
            Custom guild emojis
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Features">
            <summary>
            Enabled guild features
            See <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.GuildFeatures"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.ApproximateMemberCount">
            <summary>
            Approximate number of members in this guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.ApproximatePresenceCount">
            <summary>
            Approximate number of non-offline members in this guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Description">
            <summary>
            The description of a Community guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPreview.Stickers">
            <summary>
            Custom guild stickers
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneBegin">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#begin-guild-prune">Guild Prune Begin</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneBegin.ComputePruneCount">
            <summary>
            Whether 'pruned' is returned, discouraged for large guilds
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneBegin.Reason">
            <summary>
            Reason for the prune
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneBegin.ToQueryString">
            <summary>
            Returns Guild Prune Begin query string for the API Endpoint
            </summary>
            <returns>Guild Prune Begin Query String</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneGet">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#get-guild-prune-count">Guild Prune Get</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneGet.Days">
            <summary>
            Number of days to count prune for (1 - 30)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneGet.IncludeRoles">
            <summary>
            List of roles to include
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.GuildPruneGet.ToQueryString">
            <summary>
            Returns the query string for the Guild Prune Get endpoint
            </summary>
            <returns>Guild Prune Get Query String</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildRolePosition">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-role-positions">Guild Role Position</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildRolePosition.Id">
            <summary>
            ID of the channel or role
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildRolePosition.Position">
            <summary>
            New position for the role / channel
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildVerificationLevel">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object-verification-level">Verification Level</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildVerificationLevel.None">
            <summary>
            Unrestricted
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildVerificationLevel.Low">
            <summary>
            Must have verified email on account
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildVerificationLevel.Medium">
            <summary>
            Must be registered on Rocket for longer than 5 minutes
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildVerificationLevel.High">
            <summary>
            Must be a member of the server for longer than 10 minutes
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.GuildVerificationLevel.VeryHigh">
            <summary>
            Must have a verified phone number
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreen">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#welcome-screen-object">Welcome Screen Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreen.Description">
            <summary>
            The server description shown in the welcome screen
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreen.WelcomeChannels">
            <summary>
            The channels shown in the welcome screen
            Up to 5
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreenChannel">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#welcome-screen-object-welcome-screen-channel-structure">Welcome Screen Channel Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreenChannel.ChannelId">
            <summary>
            Channel ID for the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreenChannel.Description">
            <summary>
            The description shown for the channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreenChannel.EmojiId">
            <summary>
            The emoji id, if the emoji is custom
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWelcomeScreenChannel.EmojiName">
            <summary>
            The emoji name if custom, the unicode character if standard, or null if no emoji is set
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildWidget">
            <summary>
            Represents <a href=""></a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidget.Id">
            <summary>
            Guild id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidget.Name">
            <summary>
            Guild name (2-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidget.InstantInvite">
            <summary>
            Instant invite for the guilds specified widget invite channel
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidget.Channels">
            <summary>
            Voice and stage channels which are accessible by @everyone
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidget.Members">
            <summary>
            Special widget user objects that includes users presence (Limit 100)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidget.PresenceCount">
            <summary>
            Number of online members in this guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.GuildWidgetSettings">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-widget-object-guild-widget-structure">Guild Widget Settings Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidgetSettings.Enabled">
            <summary>
            Whether the widget is enabled
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.GuildWidgetSettings.ChannelId">
            <summary>
            The widget channel id
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event">Guild Scheduled Event Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Id">
            <summary>
            The ID of the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.GuildId">
            <summary>
            The guild ID which the scheduled event belongs to
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.ChannelId">
            <summary>
            The channel ID in which the scheduled event will be hosted, or null if <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType">scheduled entity type</see> is <see cref="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.External">EXTERNAL</see>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.CreatorId">
            <summary>
            The ID of the user that created the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Name">
            <summary>
            The name of the scheduled event (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Description">
            <summary>
            The description of the scheduled event (1-1000 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.ScheduledStartTime">
            <summary>
            The time the scheduled event will start
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.ScheduledEndTime">
            <summary>
            The time the scheduled event will end, required if <see cref="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.EntityType">EntityType</see> is <see cref="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.External">EXTERNAL</see>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.PrivacyLevel">
            <summary>
            The privacy level of the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Status">
            <summary>
            The status of the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.EntityType">
            <summary>
            The type of the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.EntityId">
            <summary>
            The id of an entity associated with a guild scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.EntityMetadata">
            <summary>
            Additional metadata for the guild scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Creator">
            <summary>
            The user that created the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.UserCount">
            <summary>
            The number of users subscribed to the scheduled event
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.ListForGuild(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventLookup,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of guild scheduled event objects for the given guild.
            See <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild">List Scheduled Events for Guild</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild to get events for</param>
            <param name="lookup">Query string parameters</param>
            <param name="callback">Callback with the list of scheduled events</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Create(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate,System.Action{Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a guild scheduled event in the guild.
            Returns a <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent">guild scheduled event</see> object on success.
            See <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event">Create Guild Scheduled Event</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild to create event in</param>
            <param name="create">Guild Scheduled Event to create</param>
            <param name="callback">Callback with the created scheduled events</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Get(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventLookup,System.Action{Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Get a guild scheduled event.
            Returns a guild scheduled event object on success.
            See <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event">Get Guild Scheduled Event</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild to get events for</param>
            <param name="eventId">Id of the scheduled event</param>
            <param name="lookup">Query string parameters</param>
            <param name="callback">Callback with the scheduled event</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Modify(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate,System.Action{Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify a guild scheduled event.
            Returns the modified <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent">guild scheduled event</see> object on success.
            See <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event">Modify Guild Scheduled Event</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild to modify event in</param>
            <param name="eventId">Id of the event to update</param>
            <param name="update">Guild Scheduled Event to update</param>
            <param name="callback">Callback with the updated scheduled events</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.Delete(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a guild scheduled event
            See <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#delete-guild-scheduled-event">Delete Guild Scheduled Event</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild to modify event in</param>
            <param name="eventId">Id of the event to delete</param>
            <param name="callback">Callback with the updated scheduled events</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.GetUsers(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUsersLookup,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUser}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Get a list of guild scheduled event users subscribed to a guild scheduled event.
            Returns a list of guild scheduled event user objects on success.
            Guild member data, if it exists, is included if the WithMember query parameter is set.
            See <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#get-guild-scheduled-event-users">Get Guild Scheduled Event Users</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild to get event users for</param>
            <param name="eventId">Id of the event to get users for</param>
            <param name="lookup">Query string parameters</param>
            <param name="callback">Callback with the list of scheduled event users</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#create-guild-scheduled-event">Guild Scheduled Event Create</a> within Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.ChannelId">
            <summary>
            The channel ID in which the scheduled event will be hosted, or null if <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType">scheduled entity type</see> is <see cref="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.External">External</see>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.EntityMetadata">
            <summary>
            Additional metadata for the guild scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.Name">
            <summary>
            The name of the scheduled event (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.PrivacyLevel">
            <summary>
            The privacy level of the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.ScheduledStartTime">
            <summary>
            The time the scheduled event will start
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.ScheduledEndTime">
            <summary>
            The time the scheduled event will end, required if <see cref="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.EntityType">EntityType</see> is <see cref="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.External">EXTERNAL</see>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.Description">
            <summary>
            The description of the scheduled event (1-1000 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventCreate.EntityType">
            <summary>
            The type of the scheduled event
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityMetadata">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-metadata">Guild Scheduled Event Entity Metadata</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityMetadata.Location">
            <summary>
            Location of the event (1-100 characters)
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-entity-types">Scheduled Entity Type</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.StageInstance">
            <summary>
            Event will be held in a stage instance
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.Voice">
            <summary>
            Event will be held in a voice channel
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.External">
            <summary>
            Event will be held externally outside of Rocket.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventLookup">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild-query-string-params">Scheduled Event Lookup Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventLookup.WithUserCount">
            <summary>
            Include number of users subscribed to each event
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventPrivacyLevel">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-privacy-level">Guild Scheduled Event Privacy Level</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventPrivacyLevel.None">
            <summary>
            No Privacy Level
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventPrivacyLevel.GuildOnly">
            <summary>
            The scheduled event is only accessible to guild members
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventStatus">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-object-guild-scheduled-event-status">Guild Scheduled Event Status</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventStatus.Scheduled">
            <summary>
            Scheduled Event is scheduled and has not happened yet.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventStatus.Active">
            <summary>
            Scheduled event is currently occuring
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventStatus.Completed">
            <summary>
            Scheduled event has completed
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventStatus.Canceled">
            <summary>
            Scheduled event was canceled.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#modify-guild-scheduled-event">Guild Scheduled Event Update</a> within Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.ChannelId">
            <summary>
            The channel ID in which the scheduled event will be hosted, or null if <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType">scheduled entity type</see> is <see cref="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.External">External</see>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.EntityMetadata">
            <summary>
            Additional metadata for the guild scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.Name">
            <summary>
            The name of the scheduled event (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.PrivacyLevel">
            <summary>
            The privacy level of the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.ScheduledStartTime">
            <summary>
            The time the scheduled event will start
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.ScheduledEndTime">
            <summary>
            The time the scheduled event will end, required if <see cref="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.GuildScheduledEvent.EntityType">EntityType</see> is <see cref="F:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventEntityType.External">EXTERNAL</see>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.Description">
            <summary>
            The description of the scheduled event (1-1000 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.EntityType">
            <summary>
            The type of the scheduled event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUpdate.Status">
            <summary>
            The status of the scheduled event
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUser">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#guild-scheduled-event-user-object-guild-scheduled-event-user-structure">Guild Scheduled Event User Object</a> within Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUser.GuildScheduledEventId">
            <summary>
            The scheduled event id which the user subscribed to
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUser.User">
            <summary>
            User which subscribed to an event
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUser.Member">
            <summary>
            Guild member data for this user for the guild which this event belongs to, if any
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUsersLookup">
             <summary>
             Represents a <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild-query-string-params">Scheduled Event Lookup Structure</a> within Rocket.
            
             Provide a user id to before and after for pagination.
             Users will always be returned in ascending order by user_id.
             If both before and after are provided, only before is respected.
             Fetching users in-between before and after is not supported.
             </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUsersLookup.Limit">
            <summary>
            Number of users to return (up to maximum 100)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUsersLookup.WithMember">
            <summary>
            Include guild member data if it exists
            Default false
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUsersLookup.Before">
            <summary>
            Consider only users before given user id
            Default null
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.ScheduledEvents.ScheduledEventUsersLookup.After">
            <summary>
            Consider only users after given user id
            Default null
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.SystemChannelFlags">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#guild-object-system-channel-flags">System Channel Flags</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.SystemChannelFlags.SuppressJoinNotifications">
            <summary>
            Suppress member join notifications
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.SystemChannelFlags.SuppressPremiumSubscriptions">
            <summary>
            Suppress server boost notifications
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.SystemChannelFlags.SuppressGuildReminderNotifications">
            <summary>
            Suppress server setup tips
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Guilds.SystemChannelFlags.SuppressJoinNotificationReplies">
            <summary>
            Hide member join sticker reply buttons
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Guilds.WelcomeScreenUpdate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-welcome-screen"></a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.WelcomeScreenUpdate.Enabled">
            <summary>
            Whether the welcome screen is enabled
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.WelcomeScreenUpdate.WelcomeChannels">
            <summary>
            Channels linked in the welcome screen and their display options
            Up to 5
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Guilds.WelcomeScreenUpdate.Description">
            <summary>
            The server description shown in the welcome screen
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Integrations.Integration">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#integration-object">Integration Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Id">
            <summary>
            Integration ID
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Name">
            <summary>
            Integration Name
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Type">
            <summary>
            Integration type
            See <see cref="T:Oxide.Ext.Rocket.Entities.Integrations.IntegrationType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Enabled">
            <summary>
            Is this integration enabled
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Syncing">
            <summary>
            Is this integration syncing
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.RoleId">
            <summary>
            ID that this integration uses for "subscribers"
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.User">
            <summary>
            User for this integration
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Account">
            <summary>
            Integration account information
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.SyncedAt">
            <summary>
            When this integration was last synced
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.SubscriberCount">
            <summary>
            How many subscribers this integration has
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Revoked">
            <summary>
            Has this integration been revoked
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Integration.Application">
            <summary>
            The bot/OAuth2 application for Rocket integrations
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Integrations.Account">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#integration-account-object">Integration Account Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Account.Id">
            <summary>
            ID of the account
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.Account.Name">
            <summary>
            Name of the account
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Integrations.IntegrationApplication">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#integration-application-object">Integration Application Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationApplication.Id">
            <summary>
            The ID of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationApplication.Name">
            <summary>
            The name of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationApplication.Icon">
            <summary>
            The icon hash of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationApplication.Description">
            <summary>
            The description of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationApplication.Summary">
            <summary>
            The summary of the app
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationApplication.Bot">
            <summary>
            The bot associated with this application
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Integrations.IntegrationExpireBehaviors">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#integration-object-integration-expire-behaviors">Integration Expire Behaviors</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Integrations.IntegrationExpireBehaviors.RemoveRole">
            <summary>
            Remove the role when integration expires
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Integrations.IntegrationExpireBehaviors.Kick">
            <summary>
            Kick when integration expires
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Integrations.IntegrationType">
            <summary>
            Represents Integrations types
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Integrations.IntegrationType.Twitch">
            <summary>
            Integration is for twitch
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Integrations.IntegrationType.Youtube">
            <summary>
            Integration is for youtube
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Integrations.IntegrationType.Rocket">
            <summary>
            integration is for Rocket
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Integrations.IntegrationUpdate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/guild#modify-guild-integration-json-params">Integration Update Structure</a> 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationUpdate.EnableEmoticons">
            <summary>
            Whether emoticons should be synced for this integration (twitch only currently)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationUpdate.ExpireBehaviour">
            <summary>
            The behavior when an integration subscription lapses
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Integrations.IntegrationUpdate.ExpireGracePeriod">
            <summary>
            Period (in days) where the integration will ignore lapsed subscriptions
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-object-application-command-types">Application Command Type</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType.ChatInput">
            <summary>
            Slash commands; a text-based command that shows up when a user types /
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType.User">
            <summary>
            A UI-based command that shows up when you right click or tap on a user
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType.Message">
            <summary>
            A UI-based command that shows up when you right click or tap on a messages
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#create-guild-application-command-json-params">Application Command Create</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate.Name">
            <summary>
            1-32 lowercase character name matching ^[\w-]{1,32}$
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate.Description">
            <summary>
            Description of the command (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate.Options">
            <summary>
            The parameters for the command
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate.DefaultPermissions">
            <summary>
            Whether the command is enabled by default when the app is added to a guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandCreate.Type">
            <summary>
            The type of command, defaults Slash Command if not set
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandFollowupCreate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#create-followup-message">Command Followup</a> within Rocket.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandFollowupUpdate">
            <summary>
            Represents a <a href="">Command Followup</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandFollowupUpdate.Flags">
            <summary>
            Callback data flags
            Set to 64 to make your response ephemeral
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-structure">ApplicationCommandOption</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.Type">
            <summary>
            They type of command option
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.Name">
            <summary>
            Name of the command option (1-32 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.Description">
            <summary>
            Description the command option (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.Required">
            <summary>
            If the parameter is required or optional
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.Autocomplete">
            <summary>
            If autocomplete interactions are enabled for this `STRING`, `INTEGER`, or `NUMBER` type option
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.Choices">
            <summary>
            Choices for string and int types for the user to pick from
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.Options">
            <summary>
            If the option is a subcommand or subcommand group type, this nested options will be the parameters
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.ChannelTypes">
            <summary>
            If the option is a channel type, the channels shown will be restricted to these types
            See <see cref="T:Oxide.Ext.Rocket.Entities.Channels.ChannelType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.MinValue">
            <summary>
            If the option is an INTEGER or NUMBER type, the minimum value permitted
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption.MaxValue">
            <summary>
            If the option is an INTEGER or NUMBER type, the maximum value permitted
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionChoice">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-choice-structure">ApplicationCommandOptionChoice</a>
            If you specify choices for an option, they are the only valid values for a user to pick
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionChoice.Name">
            <summary>
            Choice name (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionChoice.Value">
            <summary>
            Type can be string, integer, double or boolean
            Value of the choice, up to 100 characters if string
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-object-application-command-option-type">ApplicationCommandOptionType</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.SubCommand">
            <summary>
            The command option is a sub command
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.SubCommandGroup">
            <summary>
            The command option is a sub command group
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.String">
            <summary>
            The sub command option is a string
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.Integer">
            <summary>
            The sub command options is an integer
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.Boolean">
            <summary>
            The sub command option is a boolean
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.User">
            <summary>
            The sub command option is a user
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.Channel">
            <summary>
            The sub command option is a channel
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.Role">
            <summary>
            The sub command option is a Role
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.Mentionable">
            <summary>
            The sub command option is a Mentionable
            Includes Users and Roles
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOptionType.Number">
            <summary>
            Any double between -2^53 and 2^53
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissions">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permissions-structure">ApplicationCommandPermissions</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissions.Id">
            <summary>
            The ID of the role or user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissions.Type">
            <summary>
            The type of permissions
            <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissionType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissions.Permission">
            <summary>
            True to allow, False to disallow
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissionType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-permissions-object-application-command-permission-type">ApplicationCommandPermissionType</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissionType.Role">
            <summary>
            This permissions uses Role ID
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissionType.User">
            <summary>
            This permission uses User ID
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandUpdate">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#edit-global-application-command-json-params">Application Command Update</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandUpdate.Name">
            <summary>
            1-32 lowercase character name matching ^[\w-]{1,32}$
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandUpdate.Description">
            <summary>
            Description of the command (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandUpdate.Options">
            <summary>
            The parameters for the command
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandUpdate.DefaultPermissions">
            <summary>
            Whether the command is enabled by default when the app is added to a guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-object-application-command-structure">ApplicationCommand</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Id">
            <summary>
            Unique id of the command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Type">
            <summary>
            The type of command, defaults 1 if not set
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.ApplicationId">
            <summary>
            Unique id of the parent application
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.GuildId">
            <summary>
            Guild ID of the command, if not global
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Name">
            <summary>
            1-32 lowercase character name matching ^[\w-]{1,32}$
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Description">
            <summary>
            Description of the command (1-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Options">
            <summary>
            The parameters for the command
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandOption"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.DefaultPermissions">
            <summary>
            Whether the command is enabled by default when the app is added to a guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Version">
            <summary>
            Auto incrementing version identifier updated during substantial record changes
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Edit(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandUpdate,System.Action{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edit a command.
            Updates will be available in all guilds after 1 hour.
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#edit-global-application-command">Edit Global Application Command</a>
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#edit-guild-application-command">Edit Guild Application Command</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="update">Command Update</param>
            <param name="callback">Callback with updated command</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.Delete(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes a command
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#delete-global-application-command">Delete Global Application Command</a>
            See <a href="https://Rocket.com/developers/docs/interactions/application-commands#delete-guild-application-command">Delete Guild Application Command</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.GetPermissions(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Fetches command permissions for a specific command for your application in a guild. Returns a GuildApplicationCommandPermissions object.
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID of the guild to get permissions for</param>
            <param name="callback">Callback with the permissions for the command</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand.EditPermissions(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandPermissions},System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edits command permissions for a specific command for your application in a guild.
            Warning: This endpoint will overwrite existing permissions for the command in that guild
            Warning: Deleting or renaming a command will permanently delete all permissions for that command
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID of the guild to edit permissions for</param>
            <param name="permissions">List of permissions for the command</param>
            <param name="callback">Callback with the list of permissions</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-permissions-object-guild-application-command-permissions-structure">ApplicationCommandPermissions</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions.Id">
            <summary>
            The ID of the command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions.ApplicationId">
            <summary>
            the ID of the application the command belongs to
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions.GuildId">
            <summary>
            The ID of the guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.GuildCommandPermissions.Permissions">
            <summary>
            The permissions for the command in the guild
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-structure">Interaction Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Id">
            <summary>
            Id of the interaction
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.ApplicationId">
            <summary>
            ID of the application this interaction is for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Type">
            <summary>
            The type of interaction
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Data">
            <summary>
            The command data payload
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionData"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.GuildId">
            <summary>
            The guild it was sent from
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.ChannelId">
            <summary>
            The channel it was sent from
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Member">
            <summary>
            Guild member data for the invoking user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.User">
            <summary>
            User object for the invoking user, if invoked in a DM
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Token">
            <summary>
            A continuation token for responding to the interaction
            Interaction tokens are valid for 15 minutes and can be used to send followup messages but you must send an initial response within 3 seconds of receiving the event.
            If the 3 second deadline is exceeded, the token will be invalidated.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Version">
            <summary>
            Read-only property, always 1
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Message">
            <summary>
             For components, the message they were attached to
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Locale">
            <summary>
            The selected language of the invoking user
            <a href="https://Rocket.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales">Rocket Locale Values</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.GuildLocale">
            <summary>
            The guild's preferred locale, if invoked in a guild
            <a href="https://Rocket.com/developers/docs/dispatch/field-values#predefined-field-values-accepted-locales">Rocket Locale Values</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.Parsed">
            <summary>
            Returns the interaction parsed args to make it easier to process that interaction.
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.CreateInteractionResponse(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Interactions.InteractionResponse,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a response to an Interaction from the gateway.
            See <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#create-interaction-response">Create Interaction Response</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="response">Response to respond with</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.EditOriginalInteractionResponse(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.RocketMessage,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edits the initial Interaction response
            See <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#edit-original-interaction-response">Edit Original Interaction Response</a>
            </summary>
            <param name="client">Client to use</param>
            /// <param name="message">Updated message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.DeleteOriginalInteractionResponse(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes the initial Interaction response
            See <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#delete-original-interaction-response">Delete Original Interaction Response</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.CreateFollowUpMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Webhooks.WebhookCreateMessage,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a followup message for an Interaction
            See <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#create-followup-message">Create Followup Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message to follow up with</param>
            <param name="callback">Callback with the message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.EditFollowUpMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.CommandFollowupUpdate,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edits a followup message for an Interaction
            See <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#edit-followup-message">Edit Followup Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">Message ID of the follow up message</param>
            <param name="edit">Updated message</param>
            <param name="callback">Callback with the updated message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction.DeleteFollowUpMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes a followup message for an Interaction
            See <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#delete-followup-message">Delete Followup Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">Message ID to delete</param>
            <param name="callback">Callback with the updated message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-data-structure">Interaction Application Command Callback Data Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.Tts">
            <summary>
            Is the response TTS
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.Content">
            <summary>
            Message content
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.Embeds">
            <summary>
            List of embeds
            Supports up to 10 embedsF
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.AllowedMentions">
            <summary>
            Allowed mentions 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.CustomId">
            <summary>
            A developer-defined identifier for the interactable form
            Max 100 characters
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.Title">
            <summary>
            Title of the modal if Modal Response
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.Flags">
            <summary>
            Callback data flags
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.Components">
            <summary>
            Message components 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionCallbackData.Attachments">
            <summary>
            Attachment objects with filename and description
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionData">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-data-structure">ApplicationCommandInteractionData</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.Id">
            <summary>
            ID of the invoked command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.Name">
            <summary>
            The name of the invoked command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.Type">
            <summary>
            The type of the invoked command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.Resolved">
            <summary>
            Converted <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/>s, <see cref="T:Oxide.Ext.Rocket.Entities.Permissions.RocketRole"/>s, <see cref="T:Oxide.Ext.Rocket.Entities.Channels.RocketChannel"/>s, <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.GuildMember"/>s, <see cref="T:Oxide.Ext.Rocket.Entities.Messages.RocketMessage"/>s
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.Options">
            <summary>
            The params + values from the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.CustomId">
            <summary>
            For components, the custom_id of the component
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.ComponentType">
            <summary>
            For components, the type of the component
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.Values">
            <summary>
            For components, the values for the select menu component
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionData.TargetId">
            <summary>
            Id the of user or message targeted by a user or message command
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataOption">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/application-commands#application-command-object-application-command-interaction-data-option-structure">Application Command Interaction Data Option</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataOption.Name">
            <summary>
            The name of the parameter
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataOption.Type">
            <summary>
            Value of ApplicationCommandOptionType
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataOption.Value">
            <summary>
            The value of the option resulting from user input
            Value can be string, integer, or double type
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataOption.Options">
            <summary>
            Present if this option is a group or subcommand
            See <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataOption"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataOption.Focused">
            <summary>
            True if this option is the currently focused option for autocomplete
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed">
            <summary>
            Parses Interaction Data to make it easier to process for application commands
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.Interaction">
            <summary>
            Interaction this data is for
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.Data">
            <summary>
            <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionData"/> for the Interaction
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.Type">
            <summary>
            <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType"/> The type of interaction that was triggered
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.Command">
            <summary>
            Parsed command for the interaction if an application command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.CommandGroup">
            <summary>
            Command group for the interaction if <see cref="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType.ChatInput"/> Command Type if an application command
            Null if command group is not used for the command.
            Defaults to empty string if command does not have a command group
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.SubCommand">
            <summary>
            Sub Command for the interaction if <see cref="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType.ChatInput"/> Command Typ  if an application command
            Null if sub command group is not used for the command.
            Defaults to empty string if command does not have sub command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.Args">
            <summary>
            Interaction Data Supplied Args if <see cref="F:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.ApplicationCommandType.ChatInput"/> Command Type if an application command
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.InGuild">
            <summary>
            Returns true if this command was used in a guild; false otherwise.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.TriggeredComponentId">
            <summary>
            The CustomId of the <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.BaseInteractableComponent"/> that triggered the interaction if a component triggered this interaction
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.SelectMenuValues">
            <summary>
            If a <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent"/> triggered this interaction. The values selected from the select menu.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.UserOxideLocale">
            <summary>
            Rocket User's locale converted to oxide lang locale
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.GuildOxideLocale">
            <summary>
            Rocket Guild's locale converted to oxide lang locale
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataParsed.#ctor(Oxide.Ext.Rocket.Entities.Interactions.RocketInteraction)">
            <summary>
            Constructor for the data parser.
            </summary>
            <param name="interaction">Interaction to be parsed</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs">
            <summary>
            Args supplied for the interaction
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.HasArg(System.String)">
            <summary>
            Returns if a given arg exists
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.GetString(System.String,System.String)">
            <summary>
            Returns the string value supplied to command option matching the name.
            If the arg was optional and wasn't supplied default supplied value will be used.
            </summary>
            <param name="name">Name of the command option</param>
            <param name="default">Default value to return if not supplied</param>
            <returns>String for the matching command option name</returns>
            <exception cref="T:System.Exception">Thrown if the option type is not a string</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.GetInt(System.String,System.Int32)">
            <summary>
            Returns the int value supplied to command option matching the name.
            If the arg was optional and wasn't supplied default supplied value will be used.
            </summary>
            <param name="name">Name of the command option</param>
            <param name="default">Default value to return if not supplied</param>
            <returns>Int for the matching command option name</returns>
            <exception cref="T:System.Exception">Thrown if the option type is not an int</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.GetBool(System.String,System.Boolean)">
            <summary>
            Returns the bool value supplied to command option matching the name.
            If the arg was optional and wasn't supplied default supplied value will be used.
            </summary>
            <param name="name">Name of the command option</param>
            <param name="default">Default value to return if not supplied</param>
            <returns>Bool for the matching command option name</returns>
            <exception cref="T:System.Exception">Thrown if the option type is not a bool</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.GetUser(System.String)">
            <summary>
            Returns the <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/> that was resolved from the command.
            </summary>
            <param name="name">Name of the command option</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/> resolved for the matching command option name</returns>
            <exception cref="T:System.Exception">Thrown if the option type is not a <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/> or mentionable</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.GetChannel(System.String)">
            <summary>
            Returns the <see cref="T:Oxide.Ext.Rocket.Entities.Channels.RocketChannel"/> that was resolved from the command.
            </summary>
            <param name="name">Name of the command option</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Entities.Channels.RocketChannel"/> resolved for the matching command option name</returns>
            <exception cref="T:System.Exception">Thrown if the option type is not a <see cref="T:Oxide.Ext.Rocket.Entities.Channels.RocketChannel"/></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.GetRole(System.String)">
            <summary>
            Returns the <see cref="T:Oxide.Ext.Rocket.Entities.Permissions.RocketRole"/> that was resolved from the command.
            </summary>
            <param name="name">Name of the command option</param>
            <returns><see cref="T:Oxide.Ext.Rocket.Entities.Permissions.RocketRole"/> resolved for the matching command option name</returns>
            <exception cref="T:System.Exception">Thrown if the option type is not a <see cref="T:Oxide.Ext.Rocket.Entities.Permissions.RocketRole"/> or mentionable</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataArgs.GetNumber(System.String,System.Double)">
            <summary>
            Returns the double value supplied to command option matching the name.
            If the arg was optional and wasn't supplied default supplied value will be used.
            </summary>
            <param name="name">Name of the command option</param>
            <param name="default">Default value to return if not supplied</param>
            <returns>double for the matching command option name</returns>
            <exception cref="T:System.Exception">Thrown if the option type is not a double</exception>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataResolved">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#interaction-object-resolved-data-structure">Application Command Interaction Data Option</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataResolved.Users">
            <summary>
            The IDs and User objects
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataResolved.Members">
            <summary>
            The IDs and partial Member objects
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataResolved.Roles">
            <summary>
            The IDs and Role objects
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataResolved.Channels">
            <summary>
            The IDs and partial Channel objects
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionDataResolved.Messages">
            <summary>
            The ids and partial Message objects
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponse">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#interaction-response-object">Interaction Response</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponse.Type">
            <summary>
            The type of response
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponse.Data">
            <summary>
            An optional response message
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#interaction-response-object-interaction-callback-type">InteractionResponseType</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType.Pong">
            <summary>
            Acknowledges a Ping
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType.ChannelMessageWithSource">
            <summary>
            Respond with a message, showing the user's input
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType.DeferredChannelMessageWithSource">
            <summary>
            Acknowledge a command without sending a message, showing the user's input
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType.DeferredUpdateMessage">
            <summary>
            For components, Acknowledge an interaction and edit the original message later
            The user does not see a loading state
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType.UpdateMessage">
            <summary>
            For components, edit the message the component was attached to
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType.ApplicationCommandAutocompleteResult">
            <summary>
            Respond to an autocomplete interaction with suggested choices
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionResponseType.Modal">
            <summary>
            Respond to an interaction with an modal for a user to fill-out
            Note: You can't respond to a <see cref="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionType.ModalSubmit">ModalSubmit</see> with a new MODAL.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.InteractionType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#interaction-object-interaction-type">InteractionType</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionType.Ping">
            <summary>
            The interaction is a ping
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionType.ApplicationCommand">
            <summary>
            The interaction is a user using a command
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionType.MessageComponent">
            <summary>
            The interaction is a message component
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionType.ApplicationCommandAutocomplete">
            <summary>
            The interaction is a application command autocomplete
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.InteractionType.ModalSubmit">
            <summary>
            The interaction is a modal
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ActionRowComponent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/message-components#actionrow">Action Row Component</a> within Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ActionRowComponent.Components">
            <summary>
            The components on the action row
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ActionRowComponent.#ctor">
            <summary>
            Constructor for ActionRowComponent
            Sets the Type to ActionRow
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.BaseComponent">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/message-components#component-object">Message Component</a> within Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.BaseComponent.Type">
            <summary>
            Message component type
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.BaseInteractableComponent">
            <summary>
            Represent a MessageComponent that can be interacted with
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.BaseInteractableComponent.CustomId">
            <summary>
            A developer-defined identifier for the interactable component
            Max 100 characters
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonComponent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/message-components#buttons">Button Component</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonComponent.Style">
            <summary>
            Style for the component
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonComponent.Label">
            <summary>
            Text that appears on the button
            Max 80 characters
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonComponent.Emoji">
            <summary>
            Emoji on the component
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonComponent.Url">
            <summary>
            A url for link-style buttons
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonComponent.Disabled">
            <summary>
            whether the button is disabled
            Default false
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonComponent.#ctor">
            <summary>
            Constructor for button
            Sets type to button
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonStyle">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/interactions/message-components#buttons-button-styles">Button Styles</a> within Rocket..
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonStyle.Primary">
            <summary>
            Color blurple
            Requires CustomId field
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonStyle.Secondary">
            <summary>
            Color grey
            Requires CustomId field
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonStyle.Success">
            <summary>
            Color green
            Requires CustomId field
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonStyle.Danger">
            <summary>
            Color red
            Requires CustomId field
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.ButtonStyle.Link">
            <summary>
            Color grey
            Navigates to a URL
            Requires Url field
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/message-components#input-text">Input Text Component</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.Style">
            <summary>
            The style of the input text
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.Label">
            <summary>
            Text that appears on top of the input text field, max 80 characters
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.MinLength">
            <summary>
            The minimum length of the text input
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.MaxLength">
            <summary>
            The maximum length of the text input
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.Placeholder">
            <summary>
            The placeholder for the text input field
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.Value">
            <summary>
            The pre-filled value for text input
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.Required">
            <summary>
            Is the Input Text Required to be filled out
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextComponent.#ctor">
            <summary>
            Input Text Constructor
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextStyles">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/message-components#input-text-styles">Input Text Styles</a> within Rocket.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextStyles.Short">
            <summary>
            Intended for short single-line text
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.InputTextStyles.Paragraph">
            <summary>
            Intended for much longer inputs
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.MessageComponentType">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/message-components#component-types">Message Component Type</a> within Rocket..
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.MessageComponentType.ActionRow">
            <summary>
            A container for other components
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.MessageComponentType.Button">
            <summary>
            A clickable button
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.MessageComponentType.SelectMenu">
            <summary>
            A select menu for picking from choices
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.MessageComponentType.InputText">
            <summary>
            A text box for inserting written responses
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/message-components#select-menus">Select Menus Component</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent.Options">
            <summary>
            The choices in the select
            Max 25 options
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent.Placeholder">
            <summary>
            Custom placeholder text if nothing is selected
            Max 100 characters
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent.MinValues">
            <summary>
            the minimum number of items that must be chosen;
            Default 1, Min 0, Max 25
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent.MaxValues">
            <summary>
            the maximum  number of items that must be chosen;
            Default 1, Min 0, Max 25
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent.Disabled">
            <summary>
            Disable the select
            Default false
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuComponent.#ctor">
            <summary>
            Select Menu Component Constructor
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuOption">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/message-components#select-option-structure">Select Menu Option Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuOption.Label">
            <summary>
            The user-facing name of the option,
            Max 100 characters
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuOption.Value">
            <summary>
            The dev-define value of the option,
            Max 100 characters
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuOption.Description">
            <summary>
            An additional description of the option,
            Max 100 characters
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuOption.Emoji">
            <summary>
            Emoji in the option
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Interactions.MessageComponents.SelectMenuOption.Default">
            <summary>
            Will render this option as selected by default
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Invites.RocketInvite">
            <summary>
            Represents an <a href="https://Rocket.com/developers/docs/resources/invite#invite-object">Invite Structure</a> that when used, adds a user to a guild or group DM channel.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.Code">
            <summary>
            The invite code (unique ID)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.Guild">
            <summary>
            The guild this invite is for
            See <see cref="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.Guild"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.Channel">
            <summary>
            The channel this invite is for
            See <see cref="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.Channel"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.Inviter">
            <summary>
            The user who created the invite
            See <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.TargetUser">
            <summary>
            The target user for this invite
            See <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.UserTargetType">
            <summary>
            The type of user target for this invite
            See <see cref="T:Oxide.Ext.Rocket.Entities.Invites.TargetUserType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.ApproximatePresenceCount">
            <summary>
            Approximate count of online members (only present when target_user is set)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.ApproximateMemberCount">
            <summary>
            Approximate count of total members
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.ExpiresAt">
            <summary>
            When the invite code expires
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.StageInstance">
            <summary>
            Stage instance data if there is a public Stage instance in the Stage channel this invite is for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.GuildScheduledEvent">
            <summary>
            Guild scheduled event data, only included if guild_scheduled_event_id contains a valid guild scheduled event id
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.GetInvite(Oxide.Ext.Rocket.RocketClient,System.String,Oxide.Ext.Rocket.Entities.Invites.InviteLookup,System.Action{Oxide.Ext.Rocket.Entities.Invites.RocketInvite},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns an invite object for the given code.
            See <a href="https://Rocket.com/developers/docs/resources/invite#get-invite">Get Invite</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="inviteCode">Invite code</param>
            <param name="lookup">Lookup query string parameters for the request</param>
            <param name="callback">Callback with the invite</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Invites.RocketInvite.DeleteInvite(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Invites.RocketInvite},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete an invite.
            Requires the MANAGE_CHANNELS permission on the channel this invite belongs to, or MANAGE_GUILD to remove any invite across the guild.
            Returns an invite object on success.
            See <a href="https://Rocket.com/developers/docs/resources/invite#delete-invite">Delete Invite</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the deleted invite</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Invites.InviteLookup">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/guild-scheduled-event#list-scheduled-events-for-guild-query-string-params">Scheduled Event Lookup Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteLookup.WithCounts">
            <summary>
            Whether the invite should contain approximate member counts
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteLookup.WithExpiration">
            <summary>
            Whether the invite should contain the expiration date
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteLookup.GuildScheduledEventId">
            <summary>
            The guild scheduled event to include with the invite
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Invites.InviteMetadata">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/invite#invite-metadata-object-invite-metadata-structure">Invite Metadata Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteMetadata.Uses">
            <summary>
            Number of times this invite has been used
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteMetadata.MaxUses">
            <summary>
            Max number of times this invite can be used
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteMetadata.MaxAge">
            <summary>
            Duration (in seconds) after which the invite expires
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteMetadata.Temporary">
            <summary>
            Whether this invite only grants temporary membership
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteMetadata.CreatedAt">
            <summary>
            When this invite was created
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Invites.InviteStageInstance">
            <summary>
            Represents an <a href="https://Rocket.com/developers/docs/resources/invite#invite-stage-instance-object">Invite Stage Instance</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteStageInstance.Members">
            <summary>
            The members speaking in the Stage
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteStageInstance.ParticipantCount">
            <summary>
            The number of users in the Stage
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteStageInstance.SpeakerCount">
            <summary>
            The number of users speaking in the Stage
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Invites.InviteStageInstance.Topic">
            <summary>
            The topic of the Stage instance (1-120 characters)
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Invites.TargetUserType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/invite#invite-object-target-user-types">Target User Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Invites.TargetUserType.Undefined">
            <summary>
            Target user type is not defined
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Invites.TargetUserType.Stream">
            <summary>
            Invite is for a go live stream
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMention">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#allowed-mentions-object">Allowed Mention Types</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMention.AllowedTypes">
            <summary>
            An array of allowed mention types to parse from the content.
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMentionTypes"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMention.Roles">
            <summary>
            Array of Role IDs to mention (Max size of 100)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMention.Users">
            <summary>
            Array of User IDs to mention (Max size of 100)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMention.RepliedUser">
            <summary>
            For replies, whether to mention the author of the message being replied to (default false)
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMentionTypes">
            <summary>
             Represents a <a href="https://Rocket.com/developers/docs/resources/channel#allowed-mentions-object-allowed-mention-types">Allowed Mention Types</a> for a message
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMentionTypes.Unknown">
            <summary>
            Rocket Extension doesn't currently support this allowed mention type.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMentionTypes.Roles">
            <summary>
            Controls role mentions
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMentionTypes.Users">
            <summary>
            	Controls user mentions
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.AllowedMentions.AllowedMentionTypes.Everyone">
            <summary>
            Controls @everyone and @here mentions
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.RocketMessage">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#message-object">Message Structure</a> sent in a channel within Rocket..
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Id">
            <summary>
            ID of the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.ChannelId">
            <summary>
            ID of the channel the message was sent in
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.GuildId">
            <summary>
            ID of the guild the message was sent in
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Author">
            <summary>
            The author of this message (not guaranteed to be a valid user)
            The author object follows the structure of the user object, but is only a valid user in the case where the message is generated by a user or bot user.
            If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar.
            You can tell if a message is generated by a webhook by checking for the webhook_id on the message object.
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Member">
            <summary>
            Member properties for this message's author
            <see cref="T:Oxide.Ext.Rocket.Entities.Guilds.GuildMember"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Timestamp">
            <summary>
            When this message was sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.EditedTimestamp">
            <summary>
            When this message was edited (or null if never)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Tts">
            <summary>
            Whether this was a TTS message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.MentionEveryone">
            <summary>
            Whether this message mentions everyone
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Mentions">
            <summary>
            Users specifically mentioned in the message
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.MentionRoles">
            <summary>
            Roles specifically mentioned in this message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.MentionsChannels">
            <summary>
            Channels specifically mentioned in this message
            <see cref="T:Oxide.Ext.Rocket.Entities.Channels.ChannelMention"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Attachments">
            <summary>
            Any attached files
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Embeds">
            <summary>
            Any embedded content
            <see cref="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Embeds"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Reactions">
            <summary>
            Reactions to the message
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.MessageReaction"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Nonce">
            <summary>
            Used for validating a message was sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Pinned">
            <summary>
            Whether this message is pinned
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.WebhookId">
            <summary>
            If the message is generated by a webhook, this is the webhook's id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Type">
            <summary>
            Type of message
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.MessageType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Activity">
            <summary>
            Sent with Rich Presence-related chat embeds
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.MessageActivity"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Application">
            <summary>
            Sent with Rich Presence-related chat embeds
            <see cref="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Application"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.ApplicationId">
            <summary>
            If the message is an Interaction or application-owned webhook, this is the id of the application
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.MessageReference">
            <summary>
            Data showing the source of a crosspost, channel follow add, pin, or reply message
            <see cref="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.MessageReference"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Flags">
            <summary>
            Message flags combined as a bitfield
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.MessageFlags"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.ReferencedMessage">
            <summary>
            The message associated with the message_reference
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Interaction">
            <summary>
            Sent if the message is a response to an Interaction
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Thread">
            <summary>
            The thread that was started from this message, includes thread member object
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Components">
            <summary>
            Sent if the message contains components like buttons, action rows, or other interactive components
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.StickerItems">
            <summary>
            Sent if the message contains stickers
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.FileAttachments">
            <summary>
            File Attachments to add to the message on edit
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CreateMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Messages.MessageCreate,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to send the message to</param>
            <param name="message">Message to be created</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CreateMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to send the message to</param>
            <param name="message">Content of the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CreateMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to send the message to</param>
            <param name="embed">Embed to be send in the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CreateMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed},System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Post a message to a guild text or DM channel.
            If operating on a guild channel, this endpoint requires the SEND_MESSAGES permission to be present on the current user.
            If the tts field is set to true, the SEND_TTS_MESSAGES permission is required for the message to be spoken.
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to send the message to</param>
            <param name="embeds">Embeds to be send in the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.GetChannelMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a specific message in the channel.
            If operating on a guild channel, this endpoint requires the 'READ_MESSAGE_HISTORY' permission to be present on the current user.
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-channel-message">Get Channel Messages</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID where the message is</param>
            <param name="messageId">Message ID of the message</param>
            <param name="callback">Callback with the message for the ID</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Reply(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.MessageCreate,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Replies to a previously sent message
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message to send</param>
            <param name="callback">Callback with the message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Reply(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Replies to a previously sent message
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message text to send</param>
            <param name="callback">Callback with the message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Reply(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Replies to a previously sent message
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="embed">Embed to send</param>
            <param name="callback">Callback with the message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.Reply(Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed},System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Replies to a previously sent message
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-message">Create Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="embeds">Embeds to send</param>
            <param name="callback">Callback with the message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CrossPostMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Crosspost a message in a News Channel to following channels.
            This endpoint requires the 'SEND_MESSAGES' permission, if the current user sent the message, or additionally the 'MANAGE_MESSAGES' permission, for all other messages, to be present for the current user.
            See <a href="https://Rocket.com/developers/docs/resources/channel#crosspost-message">Crosspost Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">Message ID to cross post</param>
            <param name="callback">Callback with the cross posted message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CrossPostMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.RocketMessage,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Crosspost a message in a News Channel to following channels.
            This endpoint requires the 'SEND_MESSAGES' permission, if the current user sent the message, or additionally the 'MANAGE_MESSAGES' permission, for all other messages, to be present for the current user.
            See <a href="https://Rocket.com/developers/docs/resources/channel#crosspost-message">Crosspost Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message to cross post</param>
            <param name="callback">Callback with the cross posted message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CreateReaction(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a reaction for the message.
            This endpoint requires the 'READ_MESSAGE_HISTORY' permission to be present on the current user.
            Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the 'ADD_REACTIONS' permission to be present on the current user.
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-reaction">Create Reaction</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to react with.</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.CreateReaction(Oxide.Ext.Rocket.RocketClient,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a reaction for the message.
            This endpoint requires the 'READ_MESSAGE_HISTORY' permission to be present on the current user.
            Additionally, if nobody else has reacted to the message using this emoji, this endpoint requires the 'ADD_REACTIONS' permission to be present on the current user.
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#create-reaction">Create Reaction</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to react with.</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteOwnReaction(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a reaction the current user has made for the message
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-own-reaction">Delete Own Reaction</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteOwnReaction(Oxide.Ext.Rocket.RocketClient,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a reaction the current user has made for the message
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-own-reaction">Delete Own Reaction</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteUserReaction(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes another user's reaction.
            This endpoint requires the 'MANAGE_MESSAGES' permission to be present on the current user.
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-user-reaction">Delete User Reaction</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to delete</param>
            <param name="userId">User ID who add the reaction</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteUserReaction(Oxide.Ext.Rocket.RocketClient,System.String,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes another user's reaction.
            This endpoint requires the 'MANAGE_MESSAGES' permission to be present on the current user.
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-user-reaction">Delete User Reaction</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to delete</param>
            <param name="userId">User ID who add the reaction</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.GetReactions(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Users.RocketUser}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Get a list of users that reacted with this emoji
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-reactions">Get Reactions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to get the list for</param>
            <param name="callback">Callback with a list of users who reacted</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.GetReactions(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Users.RocketUser}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Get a list of users that reacted with this emoji
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#get-reactions">Get Reactions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to get the list for</param>
            <param name="callback">Callback with a list of users who reacted</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteAllReactions(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes all reactions on a message.
            This endpoint requires the 'MANAGE_MESSAGES' permission to be present on the current user.
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteAllReactionsForEmoji(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Emojis.RocketEmoji,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes all the reactions for a given emoji on a message.
            This endpoint requires the MANAGE_MESSAGES permission to be present on the current user.
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">Delete All Reactions for Emoji</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to delete all reactions for</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteAllReactionsForEmoji(Oxide.Ext.Rocket.RocketClient,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes all the reactions for a given emoji on a message.
            This endpoint requires the MANAGE_MESSAGES permission to be present on the current user.
            Valid emoji formats are the unicode emoji character '😀' or for custom emoji format must be &lt;emojiName:emojiId&gt;
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-all-reactions-for-emoji">Delete All Reactions for Emoji</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="emoji">Emoji to delete all reactions for</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.EditMessage(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edit a previously sent message.
            The fields content, embed, allowed_mentions and flags can be edited by the original message author.
            Other users can only edit flags and only if they have the MANAGE_MESSAGES permission in the corresponding channel.
            When specifying flags, ensure to include all previously set flags/bits in addition to ones that you are modifying.
            Only flags documented in the table below may be modified by users (unsupported flag changes are currently ignored without error).
            See <a href="https://Rocket.com/developers/docs/resources/channel#edit-message">Edit Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the updated message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.DeleteMessage(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a message.
            If operating on a guild channel and trying to delete a message that was not sent by the current user, this endpoint requires the MANAGE_MESSAGES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-message">Delete Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the delete message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.PinMessage(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Pin a message in a channel.
            Requires the MANAGE_MESSAGES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#add-pinned-channel-message">Add Pinned Channel Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback when the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.UnpinMessage(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a pinned message in a channel.
            Requires the MANAGE_MESSAGES permission.
            See <a href="https://Rocket.com/developers/docs/resources/channel#delete-pinned-channel-message">Unpin Pinned Channel Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.RocketMessage.StartPublicThread(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.Threads.ThreadCreate,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Creates a new public thread this message
            </summary>
            <param name="client">Client to use</param>
            <param name="create">Data to use when creating the thread</param>
            <param name="callback">Callback with the thread once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
            See <a href="https://Rocket.com/developers/docs/resources/channel#start-thread-with-message"></a>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object">Embed Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Title">
            <summary>
            Title of embed
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Type">
            <summary>
            Type of embed (always "rich" for webhook embeds)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Description">
            <summary>
            Description of embed
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Url">
            <summary>
            Url of embed
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Timestamp">
            <summary>
            Timestamp of embed content
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Color">
            <summary>
            Color code of the embed
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Footer">
            <summary>
            Footer information
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedFooter"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Image">
            <summary>
            Image information
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Thumbnail">
            <summary>
            Thumbnail information
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Video">
            <summary>
            Video information
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Provider">
            <summary>
            Provider information
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedProvider"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Author">
            <summary>
            Author information
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed.Fields">
            <summary>
            Fields information
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedField"/>
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object-embed-author-structure">Embed Author Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor.Name">
            <summary>
            Name of author
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor.Url">
            <summary>
            Url of author
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor.IconUrl">
            <summary>
            Url of author icon (only supports http(s) and attachments)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor.ProxyIconUrl">
            <summary>
            A proxied url of author icon
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor.#ctor">
            <summary>
            Embed Author Constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedAuthor.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            Embed Author Constructor
            </summary>
            <param name="name"></param>
            <param name="url"></param>
            <param name="iconUrl"></param>
            <param name="proxyIconUrl"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedField">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object-embed-field-structure">Embed Field Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedField.Name">
            <summary>
            Name of the field
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedField.Value">
            <summary>
            Value of the field
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedField.Inline">
            <summary>
            Whether or not this field should display inline
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedField.#ctor">
            <summary>
            Embed Field constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedField.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Embed Field constructor
            </summary>
            <param name="name">Field Name</param>
            <param name="value">Field Value</param>
            <param name="inline">Should field be inlined</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedFooter">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object-embed-footer-structure">Embed Footer Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedFooter.Text">
            <summary>
            Footer text
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedFooter.IconUrl">
            <summary>
            Url of footer icon (only supports http(s) and attachments)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedFooter.ProxyIconUrl">
            <summary>
            A proxied url of footer icon
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedFooter.#ctor">
            <summary>
            Embed Footer Constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedFooter.#ctor(System.String,System.String,System.String)">
            <summary>
            Embed Footer Constructor
            </summary>
            <param name="text"></param>
            <param name="iconUrl"></param>
            <param name="proxyIconUrl"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object-embed-image-structure">Embed Image Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage.Url">
            <summary>
            Source url of image (only supports http(s) and attachments)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage.ProxyUrl">
            <summary>
            A proxied url of the image
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage.Height">
            <summary>
            Height of image
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage.Width">
            <summary>
            Width of image
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage.#ctor">
            <summary>
            Embed Image Constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedImage.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Embed Image Constructor
            </summary>
            <param name="url"></param>
            <param name="height"></param>
            <param name="width"></param>
            <param name="proxyUrl"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedProvider">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object-embed-provider-structure">Embed Provider Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedProvider.Name">
            <summary>
            Name of provider
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedProvider.Url">
            <summary>
            Url of provider
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedProvider.#ctor">
            <summary>
            Embed Provider Constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedProvider.#ctor(System.String,System.String)">
            <summary>
            Embed Provider Constructor
            </summary>
            <param name="name"></param>
            <param name="url"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object-embed-thumbnail-structure">Embed Thumbnail Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail.Url">
            <summary>
            Source url of thumbnail (only supports http(s) and attachments)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail.ProxyUrl">
            <summary>
            A proxied url of the thumbnail
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail.Height">
            <summary>
            Height of thumbnail
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail.Width">
            <summary>
            Width of thumbnail
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail.#ctor">
            <summary>
            Embed Thumbnail constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedThumbnail.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Embed Thumbnail constructor
            </summary>
            <param name="url"></param>
            <param name="height"></param>
            <param name="width"></param>
            <param name="proxyUrl"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#embed-object-embed-video-structure">Embed Video Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo.Url">
            <summary>
            Source url of video
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo.ProxyUrl">
            <summary>
            Source url of video
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo.Height">
            <summary>
            Height of video
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo.Width">
            <summary>
            Width of video
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo.#ctor">
            <summary>
            Embed Video Constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.Embeds.EmbedVideo.#ctor(System.String,System.Nullable{System.Int32},System.Nullable{System.Int32},System.String)">
            <summary>
            Embed Video Constructor
            </summary>
            <param name="url"></param>
            <param name="proxyUrl"></param>
            <param name="height"></param>
            <param name="width"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageActivity">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#message-object">Message Activity Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageActivity.Type">
            <summary>
            Type of message activity
            <see cref="T:Oxide.Ext.Rocket.Entities.Messages.MessageActivityType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageActivity.PartyId">
            <summary>
            Party ID from a Rich Presence event
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageActivityType">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#message-object-message-activity-types">Message Activity Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageActivityType.Join">
            <summary>
            Message Activity Join
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageActivityType.Spectate">
            <summary>
            Message Activity Spectate
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageActivityType.Listen">
            <summary>
            Message Activity Listen
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageActivityType.JoinRequest">
            <summary>
            Message Activity JoinRequest
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment">
            <summary>
            Represents a message <a href="https://Rocket.com/developers/docs/resources/channel#message-object">Attachment Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Id">
            <summary>
            Attachment ID
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Filename">
            <summary>
            Name of file attached
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Description">
            <summary>
            Description for the file
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.ContentType">
            <summary>
            The attachment's <a href="https://en.wikipedia.org/wiki/Media_type">media type</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Size">
            <summary>
            Size of file in bytes
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Url">
            <summary>
            Source url of file
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.ProxyUrl">
            <summary>
            A proxied url of file
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Height">
            <summary>
            Height of file (if image)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Width">
            <summary>
            Width of file (if image)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageAttachment.Ephemeral">
            <summary>
            Whether this attachment is ephemeral
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageCreate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#create-message-parameters-for-contenttype-applicationjson">Message Create Structure</a> to be created in Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.Content">
            <summary>
            Contents of the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.Nonce">
            <summary>
            Used for validating a message was sent (Up to 25 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.Tts">
            <summary>
            Whether this was a TTS message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.Embeds">
            <summary>
            Embeds for the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.AllowedMention">
            <summary>
            Allowed mentions for a message
            Allows for more granular control over mentions without various hacks to the message content. 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.MessageReference">
            <summary>
            Include to make your message a reply
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.Components">
            <summary>
            Used to create message components on a message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.StickerIds">
            <summary>
            IDs of up to 3 stickers in the server to send in the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.Attachments">
            <summary>
            Attachments for the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.Flags">
            <summary>
            Attachments for the message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.FileAttachments">
            <summary>
            Attachments for a Rocket message
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.MessageCreate.AddAttachment(System.String,System.Byte[],System.String,System.String)">
            <summary>
            Adds an attachment to the message
            </summary>
            <param name="filename">Name of the file</param>
            <param name="data">byte[] of the attachment</param>
            <param name="contentType">Attachment content type</param>
            <param name="description">Description for the attachment</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageFileAttachment">
            <summary>
            Represents a file attachment for a Rocket message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageFileAttachment.FileName">
            <summary>
            Name of the file attachment
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageFileAttachment.Data">
            <summary>
            Data for the file attachment
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageFileAttachment.ContentType">
            <summary>
            Web Content Type for the file attachment
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.MessageFileAttachment.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Messages.MessageFileAttachment.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">File Attachment Name</param>
            <param name="data">Data for the file</param>
            <param name="contentType">Web Content Type for the file attachment</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageFlags">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#message-object-message-flags">Message Flags</a> for a message
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.None">
            <summary>
            This message has no flags
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.CrossPosted">
            <summary>
            This message has been published to subscribed channels (via Channel Following)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.IsCrossPost">
            <summary>
            This message originated from a message in another channel (via Channel Following)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.SuppressEmbeds">
            <summary>
            Do not include any embeds when serializing this message
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.SourceMessageDeleted">
            <summary>
            The source message for this crosspost has been deleted (via Channel Following)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.Urgent">
            <summary>
            This message came from the urgent message system
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.HasThread">
            <summary>
            This message has an associated thread, with the same id as the message
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.Ephemeral">
            <summary>
            This message is only visible to the user who invoked the Interaction
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageFlags.Loading">
            <summary>
            This message is an Interaction Response and the bot is "thinking"
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageInteraction">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/interactions/receiving-and-responding#message-interaction-object">Message Interaction Structure</a> within Rocket.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageInteraction.Id">
            <summary>
            ID of the interaction
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageInteraction.Type">
            <summary>
            The type of interaction
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageInteraction.Name">
            <summary>
            The name of the <see cref="T:Oxide.Ext.Rocket.Entities.Interactions.ApplicationCommands.RocketApplicationCommand"/> 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageInteraction.User">
            <summary>
            The user who invoked the interaction
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageReaction">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#reaction-object">Reaction Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageReaction.Count">
            <summary>
            Times this emoji has been used to react
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageReaction.Me">
            <summary>
            Whether the current user reacted using this emoji
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageReaction.Emoji">
            <summary>
            Emoji information
            <see cref="P:Oxide.Ext.Rocket.Entities.Messages.MessageReaction.Emoji"/>
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageReference">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/channel#message-object-message-reference-structure">Message Reference Structure</a> for a message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageReference.MessageId">
            <summary>
            ID of the originating message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageReference.ChannelId">
            <summary>
            ID of the originating message's channel
            Is optional when creating a reply, but will always be present when receiving an event/response that includes this data model.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageReference.GuildId">
            <summary>
            ID of the originating message's guild
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Messages.MessageReference.FailIfNotExists">
            <summary>
            When sending, whether to error if the referenced message doesn't exist instead of sending as a normal (non-reply) message, default true
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Messages.MessageType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/channel#message-object-message-types">Message Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.Default">
            <summary>
            The default message type
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.RecipientAdd">
            <summary>
            The message when a recipient is added
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.RecipientRemove">
            <summary>
            The message when a recipient is removed
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.Call">
            <summary>
            The message when a user is called
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ChannelNameChange">
            <summary>
            The message when a channel name is changed
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ChannelIconChange">
            <summary>
            The message when a channel icon is changed
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ChannelPinnedMessage">
            <summary>
            The message when another message is pinned
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.GuildMemberJoin">
            <summary>
            The message when a new member joined
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.UserPremiumGuildSubscription">
            <summary>
             The message for when a user boosts a guild
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.UserPremiumGuildSubscriptionTier1">
            <summary>
            The message for when a guild reaches Tier 1 of Nitro boosts
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.UserPremiumGuildSubscriptionTier2">
            <summary>
            The message for when a guild reaches Tier 2 of Nitro boosts
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.UserPremiumGuildSubscriptionTier3">
            <summary>
            The message for when a guild reaches Tier 3 of Nitro boosts
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ChannelFollowAdd">
            <summary>
            The message for when a news channel subscription is added to a text channel
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.GuildDiscoveryDisqualified">
            <summary>
            The message for when a guild discovery is disqualified
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.GuildDiscoveryRequalified">
            <summary>
            The message for when a guild discovery is requalified
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.GuildDiscoveryGracePeriodInitialWarning">
            <summary>
            The message for grace period initial warning
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.GuildDiscoveryGracePeriodFinalWarning">
            <summary>
            The message for grace period final warning
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ThreadCreated">
            <summary>
            The message created a thread
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.Reply">
            <summary>
            The message for when the message is a reply
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ChatInputCommand">
            <summary>
            The message for when the message is an application command
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ThreadStarterMessage">
            <summary>
            Starter message for a thread
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.GuildInviteReminder">
            <summary>
            Reminder for a guild invite
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Messages.MessageType.ContextMenuCommand">
            <summary>
            Reminder for a guild invite
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Permissions.RocketColor">
            <summary>
            Represents a Rocket Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Default">
            <summary>
            Default Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Teal">
            <summary>
            Teal Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkTeal">
            <summary>
            Dark Teal Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Green">
            <summary>
            Green Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkGreen">
            <summary>
            Dark Green Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Blue">
            <summary>
            Blue Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkBlue">
            <summary>
            Dark Blue Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Purple">
            <summary>
            Purple Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkPurple">
            <summary>
            Dark Purple Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Magenta">
            <summary>
            Magenta Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkMagenta">
            <summary>
            Dark Magenta Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Gold">
            <summary>
            Gold Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.LightOrange">
            <summary>
            Light Orange Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Orange">
            <summary>
            Orange Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkOrange">
            <summary>
            Dark Orange Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Red">
            <summary>
            Red Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkRed">
            <summary>
            Dark Red Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.LightGrey">
            <summary>
            Light Gray Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.LighterGrey">
            <summary>
            Lighter Gray Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkGrey">
            <summary>
            Dark Gray Role Color
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.DarkerGrey">
            <summary>
            Darker Gray Role Color
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.Color">
            <summary>
            uint value of the hex color code
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.#ctor(System.UInt32)">
            <summary>
            RocketColor Constructor
            </summary>
            <param name="color">uint value of hex color code</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.#ctor(System.String)">
            <summary>
            RocketColor Constructor
            </summary>
            <param name="color">string hex color code</param>
            <exception cref="T:System.Exception">Throw if color is greater than #FFFFFF</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            RocketColor Constructor
            </summary>
            <param name="red">Red color (0-255)</param>
            <param name="green">Green color (0-255)</param>
            <param name="blue">Blue color (0-255)</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            RocketColor Constructor
            </summary>
            <param name="red">Red color (0-255)</param>
            <param name="green">Green color (0-255)</param>
            <param name="blue">Blue color (0-255)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any of the colors are &lt; 0 or &gt; 255</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.#ctor(System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            RocketColor Constructor
            </summary>
            <param name="red">Red color (0-255)</param>
            <param name="green">Green color (0-255)</param>
            <param name="blue">Blue color (0-255)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any of the colors are &gt; 255</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            RocketColor Constructor
            </summary>
            <param name="red">Red color (0.0 - 1.0)</param>
            <param name="green">Green color (0.0 - 1.0)</param>
            <param name="blue">Blue color (0.0 - 1.0)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any of the colors are &lt; 0.0 or &gt; 1.0</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColor.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            RocketColor Constructor
            </summary>
            <param name="red">Red color (0.0 - 1.0)</param>
            <param name="green">Green color (0.0 - 1.0)</param>
            <param name="blue">Blue color (0.0 - 1.0)</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if any of the colors are &lt; 0.0 or &gt; 1.0</exception>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Permissions.RocketColorConverter">
            <summary>
            Handles the JSON Serialization / Deserialization for RocketColor
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColorConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes to JSON
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColorConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads from JSON
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketColorConverter.CanConvert(System.Type)">
            <summary>
            Check if can convert
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Permissions.RocketRole">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/permissions#role-object">Role Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Id">
            <summary>
            Role id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Name">
            <summary>
            Role name
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Color">
            <summary>
            Role Color
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Hoist">
            <summary>
            If this role is pinned in the user listing
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Icon">
            <summary>
            The role's icon image (if the guild has the ROLE_ICONS feature)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.UnicodeEmoji">
            <summary>
            The role's unicode emoji as a standard emoji (if the guild has the ROLE_ICONS feature)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Position">
            <summary>
            Position of this role
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Permissions">
            <summary>
            Role Permissions
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Managed">
            <summary>
            Whether this role is managed by an integration
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Mentionable">
            <summary>
            Whether this role is mentionable
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Tags">
            <summary>
            The tags this role has
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.Mention">
            <summary>
            Returns a string to mention this role in a message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.RoleIcon">
            <summary>
            Return the Role Icon URL for a Rocket Role. Empty string is not set.
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.HasPermission(Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags)">
            <summary>
            Returns if the role has the specified permission
            </summary>
            <param name="perm">Permission to check for</param>
            <returns>Return true if role has permission; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Permissions.RocketRole.IsBoosterRole">
            <summary>
            Returns if this role is the booster
            </summary>
            <returns>True if booster role. False otherwise;</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/permissions#permissions-bitwise-permission-flags">Permission Flags</a> for user or role
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.CreateInstantInvite">
            <summary>
            Allows creation of instant invites
            Channel Type (Text, Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.KickMembers">
            <summary>
            Allows kicking members
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.BanMembers">
            <summary>
            Allows banning members
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.Administrator">
            <summary>
            Allows all permissions and bypasses channel permission overwrites
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageChannels">
            <summary>
            Allows management and editing of channels
            Channel Type (Text, Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageGuild">
            <summary>
            Allows management and editing of the guild
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.AddReactions">
            <summary>
            Allows for the addition of reactions to messages
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ViewAuditLog">
            <summary>
            Allows for viewing of audit logs
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.PrioritySpeaker">
            <summary>
            Allows for using priority speaker in a voice channel
            Channel Type (Voice)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.Stream">
            <summary>
            Allows the user to go live
            Channel Type (Voice)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ViewChannel">
            <summary>
            Allows guild members to view a channel, which includes reading messages in text channels
            Channel Type (Text, Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.SendMessages">
            <summary>
            Allows for sending messages in a channel
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.SendTtsMessages">
            <summary>
            Allows for sending of /tts messages
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageMessages">
            <summary>
            Allows for deletion of other users messages
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.EmbedLinks">
            <summary>
            Links sent by users with this permission will be auto-embedded
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.AttachFiles">
            <summary>
            Allows for uploading images and files
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ReadMessageHistory">
            <summary>
            Allows for reading of message history
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.MentionEveryone">
            <summary>
            Allows for using the @everyone tag to notify all users in a channel,
            and the @here tag to notify all online users in a channel
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.UseExternalEmojis">
            <summary>
            Allows the usage of custom emojis from other servers
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ViewGuildInsights">
            <summary>
            Allows for viewing guild insights
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.Connect">
            <summary>
            Allows for joining of a voice channel
            Channel Type (Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.Speak">
            <summary>
            Allows for speaking in a voice channel
            Channel Type (Voice)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.MuteMembers">
            <summary>
            Allows for muting members in a voice channel
            Channel Type (Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.DeafanMembers">
            <summary>
            Allows for deafening of members in a voice channel
            Channel Type (Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.MoveMembers">
            <summary>
            Allows for moving of members between voice channels
            Channel Type (Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.UseVad">
            <summary>
            Allows for using voice-activity-detection in a voice channel
            Channel Type (Voice)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ChangeNickname">
            <summary>
            Allows for modification of own nickname
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageNicknames">
            <summary>
            Allows for modification of other users nicknames
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageRoles">
            <summary>
            Allows management and editing of roles
            Channel Type (Text, Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageWebhooks">
            <summary>
            Allows management and editing of webhooks
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageEmojisAndStickers">
            <summary>
            Allows management and editing of emojis
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.UseSlashCommands">
            <summary>
            Allows members to use application commands, including slash commands and context menu commands.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.RequestToSpeak">
            <summary>
            Allows for requesting to speak in stage channels.
            Channel Type (Stage)
            (This permission is under active development and may be changed or removed.)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageEvents">
            <summary>
            Allows for creating, editing, and deleting scheduled events
            Channel Type (Voice, Stage)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ManageThreads">
            <summary>
            Allows for deleting and archiving threads, and viewing all private threads
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.UsePublicThreads">
            <summary>
            Allows for creating and participating in threads
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.CreatePublicThreads">
            <summary>
            Allows for creating threads
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.UsePrivateThreads">
            <summary>
            Allows for creating and participating in private threads
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.CreatePrivateThreads">
            <summary>
            Allows for creating private threads
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.UseExternalStickers">
            <summary>
            Allows the usage of custom stickers from other servers
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.SendMessagesInThreads">
            <summary>
            Allows for sending messages in threads
            Channel Type (Text)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.StartEmbeddedActivities">
            <summary>
            Allows for launching activities (applications with the `EMBEDDED` flag) in a voice channel
            Channel Type (Voice)
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Permissions.PermissionFlags.ModerateMembers">
            <summary>
            Allows for timing out users to prevent them from sending or reacting to messages in chat and threads, and from speaking in voice and stage channels
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Permissions.RoleTags">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/permissions#role-object-role-tags-structure">Role Tags Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RoleTags.BotId">
            <summary>
            The id of the bot this role belongs to
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RoleTags.IntegrationId">
            <summary>
            The id of the integration this role belongs to
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Permissions.RoleTags.PremiumSubscriber">
            <summary>
            Whether this is the guild's premium subscriber role
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Snowflake">
            <summary>
            Represents an ID in Rocket.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Snowflake.Id">
            <summary>
            Snowflake Value
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.#ctor(System.UInt64)">
            <summary>
            Create a new snowflake from a ulong
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.#ctor(System.String)">
            <summary>
            Create a new snowflake from a string
            </summary>
            <param name="id"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.#ctor(System.DateTimeOffset)">
            <summary>
            Create a snowflake from a DateTimeOffset
            </summary>
            <param name="offset"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.GetCreationDate">
            <summary>
            Returns when the ID was created
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.IsValid">
            <summary>
            Returns if the ID value is not 0
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.TryParse(System.String,Oxide.Ext.Rocket.Entities.Snowflake@)">
            <summary>
            Try to parse the a string into a snowflake value
            </summary>
            <param name="value">String to parse</param>
            <param name="snowflake">Snowflake to return</param>
            <returns>True if parse succeeded; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.Equals(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns if the two snowflakes are the same ID.
            </summary>
            <param name="other">Other snowflake to compare</param>
            <returns>True if the snowflake IDs match; false otherwise.</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.Equals(System.Object)">
            <summary>
            Returns if the obj is snowflake or ulong with matching ID.
            </summary>
            <param name="obj">Object to check</param>
            <returns>True if equal; False otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.Equals(System.UInt64)">
            <summary>
            Returns if other equals our ID
            </summary>
            <param name="other">Other to compare against</param>
            <returns>True if ID equals; False otherwise.</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.GetHashCode">
            <summary>
            Returns the HashCode of the ID
            </summary>
            <returns>ID fields hashcode</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.ToString">
            <summary>
            Returns ID as a string
            </summary>
            <returns>ID as a string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.CompareTo(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns the ID field of num compared to this snowflakes ID field
            </summary>
            <param name="num">Value to compare ID to</param>
            <returns>A value indication if the num is less than, equal to, or greater than our ID</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.CompareTo(System.UInt64)">
            <summary>
            Returns the ID field of num compared to this snowflakes ID field
            </summary>
            <param name="other">Value to compare ID to</param>
            <returns>A value indication if the num is less than, equal to, or greater than our ID</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_Equality(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns true if left and right are equal
            </summary>
            <param name="left">Snowflake to compare</param>
            <param name="right">Snowflake to compare</param>
            <returns>True if the snowflake ID's are equal; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_Inequality(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns true if left and right are not equal
            </summary>
            <param name="left">Snowflake to compare</param>
            <param name="right">Snowflake to compare</param>
            <returns>True if the snowflake ID's are not equal; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_LessThan(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns true if left snowflake's ID is less than right's ID
            </summary>
            <param name="left">Snowflake to be less than</param>
            <param name="right">Snowflake to be greater than</param>
            <returns>True if left is less than right</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_GreaterThan(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns true if left snowflake's ID is greater than right's ID
            </summary>
            <param name="left">Snowflake to be greater than</param>
            <param name="right">Snowflake to be less than</param>
            <returns>True if left is greater than right</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_LessThanOrEqual(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns true if left snowflake's ID is less than right's ID or equal
            </summary>
            <param name="left">Snowflake to be less than or equal</param>
            <param name="right">Snowflake to be greater than or equal</param>
            <returns>True if left is less than or equal to right</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_GreaterThanOrEqual(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns true if left snowflake's ID is greater or equal to right's ID
            </summary>
            <param name="left">Snowflake to be greater than or equal</param>
            <param name="right">Snowflake to be less than or equal</param>
            <returns>True if left is greater or equal to right</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_Implicit(Oxide.Ext.Rocket.Entities.Snowflake)~System.UInt64">
            <summary>
            Converts snowflake to a ulong
            </summary>
            <param name="snowflake">Snowflake to be converted to ulong</param>
            <returns>Snowflake ID as ulong</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_Explicit(System.UInt64)~Oxide.Ext.Rocket.Entities.Snowflake">
            <summary>
            Converts a ulong to a snowflake
            </summary>
            <param name="id">Id to be converted to snowflake</param>
            <returns>ID converted to a snowflake</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_Implicit(Oxide.Ext.Rocket.Entities.Snowflake)~System.String">
            <summary>
            Converts snowflake to a string
            </summary>
            <param name="snowflake">Snowflake to be converted to string</param>
            <returns>Snowflake ID as string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Snowflake.op_Explicit(System.String)~Oxide.Ext.Rocket.Entities.Snowflake">
            <summary>
            Converts a string to a snowflake
            </summary>
            <param name="id">Id to be converted to snowflake</param>
            <returns>ID converted to a snowflake</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/sticker#sticker-object">Rocket Sticker Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.Id">
            <summary>
            ID of the sticker
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.PackId">
            <summary>
            ID of the pack the sticker is from
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.Name">
            <summary>
            Name of the sticker
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.Description">
            <summary>
            Description of the sticker
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.Tags">
            <summary>
            For guild stickers, a unicode emoji representing the sticker's expression.
            For nitro stickers, a comma-separated list of related expressions.
            autocomplete/suggestion tags for the sticker (max 200 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.Type">
            <summary>
            Type of sticker.
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.FormatType">
            <summary>
            Type of sticker format
            <see cref="T:Oxide.Ext.Rocket.Entities.Stickers.StickerFormatType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.Available">
            <summary>
            Whether or not the sticker is available
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.GuildId">
            <summary>
            Id of the guild that owns this sticker
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.User">
            <summary>
            The user that uploaded the sticker
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.SortValue">
            <summary>
            A sticker's sort order within a pack
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.StickerUrl">
            <summary>
            Returns the Url for the sticker
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.GetSticker(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Stickers.RocketSticker},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a sticker object for the given sticker ID.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#get-sticker">Get Sticker</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="stickerId">ID of the sticker</param>
            <param name="callback">Callback with the RocketSticker</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.ModifyGuildSticker(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Stickers.RocketSticker},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the given sticker.
            Requires the MANAGE_EMOJIS_AND_STICKERS permission.
            Returns the updated sticker object on success.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#modify-guild-sticker">Modify Guild Sticker</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the updated Rocket sticker</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Stickers.RocketSticker.DeleteGuildSticker(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete the given sticker.
            Requires the MANAGE_EMOJIS_AND_STICKERS permission.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#delete-guild-sticker">Delete Guild Sticker</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/sticker#sticker-pack-object">Sticker Pack Object</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.Id">
            <summary>
            ID of the sticker pack
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.Stickers">
            <summary>
            The stickers in the pack
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.Name">
            <summary>
            Name of the sticker pack
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.SkuId">
            <summary>
            ID of the pack's SKU
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.CoverStickerId">
            <summary>
            ID of a sticker in the pack which is shown as the pack's icon
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.Description">
            <summary>
            Description of the sticker pack
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.BannerAssetId">
            <summary>
            ID of the sticker pack's banner image
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack.GetNitroStickerPacks(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Stickers.RocketStickerPack}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the list of sticker packs available to Nitro subscribers.
            See <a href="https://Rocket.com/developers/docs/resources/sticker#list-nitro-sticker-packs">List Nitro Sticker Packs</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with a list of Nitro sticker packs</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Stickers.GuildStickerCreate">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/sticker#sticker-pack-object">Sticker Pack Object</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.GuildStickerCreate.Name">
            <summary>
            Name of the sticker (2-30 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.GuildStickerCreate.Description">
            <summary>
            Description of the sticker (empty or 2-100 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.GuildStickerCreate.Tags">
            <summary>
            Autocomplete/suggestion tags for the sticker (max 200 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Stickers.GuildStickerCreate.FileAttachments">
            <summary>
            Sticker image attachment
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Stickers.GuildStickerCreate.AddSticker(System.String,System.String,System.Byte[])">
            <summary>
            Adds the sticker for guild sticker create
            </summary>
            <param name="fileName">Name of the file</param>
            <param name="contentType">Content type of the file</param>
            <param name="data">data for the file</param>
            <exception cref="T:System.Exception">
            Throw if more than 1 sticker is added.
            Thrown if the data is more than 500KB
            Thrown if the file extension is not .png, .apng, or .json
            </exception>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Stickers.StickerFormatType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/sticker#sticker-format-types">Sticker Format Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Stickers.StickerFormatType.Png">
            <summary>
            Sticker format type PNG
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Stickers.StickerFormatType.Apng">
            <summary>
            Sticker format type APNG
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Stickers.StickerFormatType.Lottie">
            <summary>
            Sticker format type LOTTIE
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Stickers.StickerType">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/sticker#sticker-types">Sticker Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Stickers.StickerType.Standard">
            <summary>
            An official sticker in a pack, part of Nitro or in a removed purchasable pack
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Stickers.StickerType.Guild">
            <summary>
            A sticker uploaded to a Boosted guild for the guild's members
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Teams.RocketTeam">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/topics/teams#data-models-team-object">Team Object</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.RocketTeam.Id">
            <summary>
            The unique id of the team
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.RocketTeam.Icon">
            <summary>
            A hash of the image of the team's icon
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.RocketTeam.Members">
            <summary>
            The members of the team
            See <see cref="T:Oxide.Ext.Rocket.Entities.Teams.TeamMember"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.RocketTeam.Name">
            <summary>
             The name of the team
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.RocketTeam.OwnerUserId">
            <summary>
            The user id of the current team owner
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.RocketTeam.GetTeamIconUrl">
            <summary>
            Returns the url for the team icon
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Teams.TeamMember">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/teams#data-models-team-members-object">Team Members Object</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.TeamMember.MembershipState">
            <summary>
            The user's membership state on the team
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.TeamMember.Permissions">
            <summary>
            The teams permissions
            Will always be ["*"]
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.TeamMember.TeamId">
            <summary>
            The id of the parent team of which they are a member
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Teams.TeamMember.User">
            <summary>
            The avatar, discriminator, id, and username of the user
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Teams.TeamMembershipState">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/teams#data-models-membership-state-enum">Membership State Enum</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Teams.TeamMembershipState.Invited">
            <summary>
            If the user has been invited
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Teams.TeamMembershipState.Accepted">
            <summary>
            If the is part of the team
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.Connections.Connection">
            <summary>
            Represents a Rocket Users <a href="https://Rocket.com/developers/docs/resources/user#connection-object">Connection</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.Id">
            <summary>
            ID of the connection account
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.Name">
            <summary>
            The username of the connection account
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.Type">
            <summary>
            The service of the connection (twitch, youtube)
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.Revoked">
            <summary>
            Whether the connection is revoked
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.Integrations">
            <summary>
            An array of partial server integrations
            <see cref="T:Oxide.Ext.Rocket.Entities.Integrations.Integration"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.Verified">
            <summary>
            Whether the connection is verified
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.FriendSync">
            <summary>
            Whether friend sync is enabled for this connection
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.ShowActivity">
            <summary>
            Whether activities related to this connection will be shown in presence updates
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.Connections.Connection.Visibility">
            <summary>
            Visibility of this connection
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionVisibilityType"/>
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionType">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/user#connection-object-connection-structure">Connection Type</a> for a connection
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionType.Unknown">
            <summary>
            Rocket Extension doesn't currently support this connection type
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionType.Twitch">
            <summary>
            Connection type is Twitch
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionType.Youtube">
            <summary>
            Connection type is Youtube
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionVisibilityType">
            <summary>
            Represents connection <a href="https://Rocket.com/developers/docs/resources/user#connection-object-visibility-types">Visibility Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionVisibilityType.None">
            <summary>
            Invisible to everyone except the user themselves
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.Connections.ConnectionVisibilityType.Everyone">
            <summary>
            Visible to everyone
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.RocketUser">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/user#user-object">User Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Id">
            <summary>
            The user's id
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Username">
            <summary>
            The user's username, not unique across the platform
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Discriminator">
            <summary>
            The user's 4-digit Rocket-tag
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Avatar">
            <summary>
            The user's avatar hash
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Bot">
            <summary>
            Whether the user belongs to an OAuth2 application
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.System">
            <summary>
            Whether the user is an Official Rocket System user (part of the urgent message system)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.MfaEnabled">
            <summary>
            Whether the user has two factor enabled on their account
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Banner">
            <summary>
            The user's banner, or null if unset
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.AccentColor">
            <summary>
            The user's banner color encoded as an integer representation of hexadecimal color code
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Locale">
            <summary>
            The user's chosen language option
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Verified">
            <summary>
            Whether the email on this account has been verified
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Email">
            <summary>
            The user's email
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Flags">
            <summary>
            The flags on a user's account
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.UserFlags"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.PremiumType">
            <summary>
            The type of Nitro subscription on a user's account
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.UserPremiumType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.PublicFlags">
            <summary>
            The public flags on a user's account
            <see cref="T:Oxide.Ext.Rocket.Entities.Users.UserFlags"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Mention">
            <summary>
            Returns a string to mention this users nickname in a message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.MentionUser">
            <summary>
            Returns a string to mention this users username in a message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.GetDefaultAvatarUrl">
            <summary>
            Default Avatar Url for the User
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.GetAvatarUrl">
            <summary>
            Avatar Url for the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.GetFullUserName">
            <summary>
            Returns the username#discriminator for the user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.RocketUser.Player">
            <summary>
            Returns the IPlayer for the Rocket user if linked; null otherwise
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GetCurrentUser(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Users.RocketUser},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the currently logged in user account
            See <a href="https://Rocket.com/developers/docs/resources/user#get-current-user">Get Current User</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the logged in user</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GetUser(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Users.RocketUser},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the user for the given user Id
            See <a href="https://Rocket.com/developers/docs/resources/user#get-user">Get User</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID to lookup</param>
            <param name="callback">Callback with the looked up user</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.SendDirectMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.MessageCreate,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Send a message to a user in a direct message channel
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message to be created</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.SendDirectMessage(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Send a message to a user in a direct message channel
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Content of the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.SendDirectMessage(Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed},System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Send a message to a user in a direct message channel
            </summary>
            <param name="client">Client to use</param>
            <param name="embeds">Embeds to be send in the message</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.ModifyCurrentUser(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Users.RocketUser},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the currently logged in user with the currently set UserName and Avatar
            See <a href="https://Rocket.com/developers/docs/resources/user#modify-current-user">Modify Current User</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the updated user</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.ModifyCurrentUser(Oxide.Ext.Rocket.RocketClient,System.String,System.String,System.Action{Oxide.Ext.Rocket.Entities.Users.RocketUser},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify the currently logged in user
            See <a href="https://Rocket.com/developers/docs/resources/user#modify-current-user">Modify Current User</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="username">Username to set</param>
            <param name="avatarData">Avatar data to set</param>
            <param name="callback">Callback with the updated user</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GetCurrentUserGuilds(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Users.UserGuildsRequest,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Guilds.RocketGuild}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the guilds for the currently logged in user
            See <a href="https://Rocket.com/developers/docs/resources/user#get-current-user-guilds">Get Current User Guilds</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="request">Request parameters for filtering guilds</param>
            <param name="callback">Callback with the list of guilds</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.LeaveGuild(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Guilds.RocketGuild,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Leave the guild that the currently logged in user is in
            See <a href="https://Rocket.com/developers/docs/resources/user#leave-guild">Leave Guild</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guild">Guild to leave</param>
            <param name="callback">callback when the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.LeaveGuild(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Leave the guild that the currently logged in user is in
            See <a href="https://Rocket.com/developers/docs/resources/user#leave-guild">Leave Guild</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID to leave</param>
            <param name="callback">callback when the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.CreateDirectMessageChannel(Oxide.Ext.Rocket.RocketClient,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a Direct Message to the current User
            See <a href="https://Rocket.com/developers/docs/resources/user#create-dm">Create DM</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the direct message channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.CreateDirectMessageChannel(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a Direct Message to the current User
            See <a href="https://Rocket.com/developers/docs/resources/user#create-dm">Create DM</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="userId">User ID to send the message to</param>
            <param name="callback">Callback with the direct message channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.CreateGroupDm(Oxide.Ext.Rocket.RocketClient,System.String[],Oxide.Plugins.Hash{Oxide.Ext.Rocket.Entities.Snowflake,System.String},System.Action{Oxide.Ext.Rocket.Entities.Channels.RocketChannel},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a Group Direct Message
            </summary>
            <param name="client">Client to use</param>
            <param name="accessTokens">access tokens of users that have granted your app the gdm.join scope</param>
            <param name="nicks">a list of user ids to their respective nicknames</param>
            <param name="callback">Callback with the direct message channel</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GetUserConnections(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Users.Connections.Connection}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of connection objects.
            Requires the connections OAuth2 scope.
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with the list of connections</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GroupDmAddRecipient(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.RocketChannel,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a recipient to a Group DM using their access token
            See <a href="https://Rocket.com/developers/docs/resources/channel#group-dm-add-recipient">Group DM Add Recipient</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channel">Channel to add recipient to</param>
            <param name="accessToken">Users access token</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GroupDmAddRecipient(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.String,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Adds a recipient to a Group DM using their access token
            See <a href="https://Rocket.com/developers/docs/resources/channel#group-dm-add-recipient">Group DM Add Recipient</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to add user to</param>
            <param name="accessToken">Users access token</param>
            <param name="nick">User nickname</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GroupDmRemoveRecipient(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Channels.RocketChannel,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Removes a recipient from a Group DM
            </summary>
            <param name="client">Client to use</param>
            <param name="channel">Channel to remove recipient from</param>
            <param name="callback">callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.RocketUser.GroupDmRemoveRecipient(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Removes a recipient from a Group DM
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to remove recipient from</param>
            <param name="callback">callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.UserFlags">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/user#user-object-user-flags">User Flags</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.None">
            <summary>
            Default value for flags, when none are given to an account.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.Staff">
            <summary>
            Flag given to users who are a Rocket employee
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.Partner">
            <summary>
            Flag given to users who are owners of a partnered Rocket server
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HypeSquad">
            <summary>
            Flag given to users who are HypeSquad Events Coordinator
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.BugHunterLevel1">
            <summary>
            Flag given to users who have participated in the 𝐁ug report program and are level 1.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HypeSquadOnlineHouse1">
            <summary>
            Flag given to users who are in the HypeSquad House of Bravery.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HypeSquadOnlineHouse2">
            <summary>
            Flag given to users who are in the HypeSquad House of Brilliance.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HypeSquadOnlineHouse3">
            <summary>
            Flag given to users who are in the HypeSquad House of Balance.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.PremiumEarlySupporter">
            <summary>
            Flag given to users who subscribed to Nitro before games were added.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.TeamPseudoUser">
            <summary>
            Flag given to users who are part of a team.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.BugHunterLevel2">
            <summary>
            Flag given to users who have participated in the 𝐁ug report program and are level 2.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.VerifiedBot">
            <summary>
            Flag given to users who are verified bots.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.VerifiedDeveloper">
            <summary>
            Flag given to users that developed bots and early verified their accounts.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.CertifiedModerator">
            <summary>
            Flag given to users that are Rocket certified moderators
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.BotHttpInteractions">
            <summary>
            User is a Bot uses only HTTP interactions and is shown in the online member list
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.RocketEmployee">
            <summary>
            Flag given to users who are a Rocket employee.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.PartneredServerOwner">
            <summary>
            Flag given to users who are owners of a partnered Rocket server.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HyperSquadEvents">
            <summary>
            Flag given to users in HypeSquad events.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HouseBravery">
            <summary>
            Flag given to users who are in the HypeSquad House of Bravery.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HouseBrilliance">
            <summary>
            Flag given to users who are in the HypeSquad House of Brilliance.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.HouseBalance">
            <summary>
            Flag given to users who are in the HypeSquad House of Balance.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.EarlySupporter">
            <summary>
            Flag given to users who subscribed to Nitro before games were added.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.TeamUser">
            <summary>
            Flag given to users who are part of a team.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.EarlyVerifiedBotDeveloper">
            <summary>
             Flag given to users that developed bots and early verified their accounts.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserFlags.RocketCertifiedModerator">
            <summary>
            Flag given to users that are Rocket certified moderators
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.UserGuildsRequest">
            <summary>
            Represents a <a href="https://Rocket.com/developers/docs/resources/user#get-current-user-guilds-query-string-params">Users Guild Request</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.UserGuildsRequest.Before">
            <summary>
            Get guilds before this guild ID
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.UserGuildsRequest.After">
            <summary>
            Get guilds after this guild ID
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Users.UserGuildsRequest.Limit">
            <summary>
            Max number of guilds to return (1-200)
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Users.UserGuildsRequest.ToQueryString">
            <summary>
            Returns the query string for the request
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.UserPremiumType">
            <summary>
            Represents Rocket User <a href="https://Rocket.com/developers/docs/resources/user#user-object-premium-types">Premium Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserPremiumType.None">
            <summary>
            User has no premium
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserPremiumType.NitroClassic">
            <summary>
            User has nitro classic premium
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserPremiumType.Nitro">
            <summary>
            User has nitro premium
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Users.UserStatusType">
            <summary>
            Represents Rocket User <a href="https://Rocket.com/developers/docs/topics/gateway#update-status-status-types">Status Types</a> 
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserStatusType.Online">
            <summary>
            User is online
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserStatusType.DND">
            <summary>
            User has Do Not Disturb
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserStatusType.Idle">
            <summary>
            User is idle
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserStatusType.Invisible">
            <summary>
            User is invisible
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Users.UserStatusType.Offline">
            <summary>
            User is offline
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/voice#voice-region-object">Voice Region Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion.Id">
            <summary>
            Unique ID for the region
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion.Name">
            <summary>
            Name of the region
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion.Vip">
            <summary>
            True if this is a vip-only server
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion.Optimal">
            <summary>
            True for a single server that is closest to the current user's client
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion.Deprecated">
            <summary>
            Whether this is a deprecated voice region (avoid switching to these)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion.Custom">
            <summary>
            Whether this is a custom voice region (used for events/etc)
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Voice.VoiceRegion.ListVoiceRegions(Oxide.Ext.Rocket.RocketClient,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Voice.VoiceRegion}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns an array of voice region objects that can be used when creating servers.
            See <a href="https://Rocket.com/developers/docs/resources/voice#list-voice-regions">List Voice Regions</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback with a list of voice regions</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Voice.VoiceState">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/voice#voice-state-object">Voice State Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.Id">
            <summary>
            User ID for the voice state
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.GuildId">
            <summary>
            The guild id this voice state is for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.ChannelId">
            <summary>
            The channel id this user is connected to
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.UserId">
            <summary>
            The user id this voice state is for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.Member">
            <summary>
            The guild member this voice state is for
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.SessionId">
            <summary>
            The session id for this voice state
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.Deaf">
            <summary>
            Whether this user is deafened by the server
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.Mute">
            <summary>
            Whether this user is muted by the server
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.SelfDeaf">
            <summary>
            Whether this user is locally deafened
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.SelfMute">
            <summary>
            Whether this user is locally muted
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.SelfStream">
            <summary>
            Whether this user is streaming using "Go Live"
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.SelfVideo">
            <summary>
            Whether this user's camera is enabled
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.Suppress">
            <summary>
            Whether this user is muted by the current user
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Voice.VoiceState.RequestToSpeakTimestamp">
            <summary>
            Whether this user is muted by the current user
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/webhook#webhook-object">Webhook Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.Id">
            <summary>
            The id of the webhook
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.Type">
            <summary>
            The type of the webhook
            See <see cref="T:Oxide.Ext.Rocket.Entities.Webhooks.WebhookType"/>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.GuildId">
            <summary>
            The guild id this webhook is for, if any
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.ChannelId">
            <summary>
            The channel id this webhook is for, if any
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.User">
            <summary>
            The user this webhook was created by
            not returned when getting a webhook with its token
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.Name">
            <summary>
            The default name of the webhook
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.Avatar">
            <summary>
            the default user avatar hash of the webhook
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.Token">
            <summary>
            The secure token of the webhook
            returned for Incoming Webhooks
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.ApplicationId">
            <summary>
            The bot/OAuth2 application that created this webhook
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.SourceGuild">
            <summary>
            The guild of the channel that this webhook is following (returned for Channel Follower Webhooks)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.SourceChannel">
            <summary>
            The channel that this webhook is following (returned for Channel Follower Webhooks)
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.CreateWebhook(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.String,System.Action{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Create a new webhook.
            Requires the MANAGE_WEBHOOKS permission.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#create-webhook">Create Webhook</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID for the webhook</param>
            <param name="name">Name of the webhook (1-80 characters)</param>
            <param name="avatar">Image for the default webhook avatar</param>
            <param name="callback">Callback with the completed webhook</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.GetChannelWebhooks(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of channel webhook.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#get-channel-webhooks">Get Channel Webhooks</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="channelId">Channel ID to get webhooks for</param>
            <param name="callback">Callback with a list of channel webhooks</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.GetGuildWebhooks(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook}},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns a list of guild webhooks
            See <a href="https://Rocket.com/developers/docs/resources/webhook#get-guild-webhooks">Get Guild Webhooks</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="guildId">Guild ID to get webhooks for</param>
            <param name="callback">Callback with the list of guild webhooks</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.GetWebhook(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the webhook with the given webhook ID
            See <a href="https://Rocket.com/developers/docs/resources/webhook#get-webhook">Get Webhook</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="webhookId">Webhook ID to get</param>
            <param name="callback">Callback with the webhook</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.GetWebhookWithToken(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.Action{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the webhook with the given ID &amp; Token
            This call does not required authentication
            No user is returned in webhook object
            See <a href="https://Rocket.com/developers/docs/resources/webhook#get-webhook-with-token">Get Webhook with Token</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="webhookId">Webhook ID to get</param>
            <param name="webhookToken">Webhook Token</param>
            <param name="callback">Callback with the webhook</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.GetWebhookWithUrl(Oxide.Ext.Rocket.RocketClient,System.String,System.Action{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Returns the webhook with the given ID &amp; Token
            This call does not required authentication
            No user is returned in webhook object
            See <a href="https://Rocket.com/developers/docs/resources/webhook#get-webhook-with-token">Get Webhook with Token</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="webhookUrl">Returns the webhook for the specified URL</param>
            <param name="callback">Callback with the webhook</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.ModifyWebhook(Oxide.Ext.Rocket.RocketClient,System.String,System.String,System.Nullable{Oxide.Ext.Rocket.Entities.Snowflake},System.Action{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify a webhook.
            Requires the MANAGE_WEBHOOKS permission.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#modify-webhook">Modify Webhook</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="name">New webhook name</param>
            <param name="avatar">New avatar image</param>
            <param name="channelId">Channel to move the webhook to</param>
            <param name="callback">Callback with the updated webhook</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.ModifyWebhookWithToken(Oxide.Ext.Rocket.RocketClient,System.String,System.String,System.Action{Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Modify a webhook.
            Requires the MANAGE_WEBHOOKS permission.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#modify-webhook-with-token">Modify Webhook with Token</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="name">New webhook name</param>
            <param name="avatar">New avatar image</param>
            <param name="callback">Callback with the updated webhook</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.DeleteWebhook(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a webhook permanently.
            Requires the MANAGE_WEBHOOKS permission.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#delete-webhook">Delete Webhook</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.DeleteWebhookWithToken(Oxide.Ext.Rocket.RocketClient,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Delete a webhook permanently.
            Does not require authentication.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#delete-webhook-with-token">Delete Webhook with Token</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.ExecuteWebhook(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Webhooks.WebhookCreateMessage,Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Executes a webhook
            See <a href="https://Rocket.com/developers/docs/resources/webhook#execute-webhook">Execute Webhook</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message data</param>
            <param name="executeParams">Webhook execution parameters</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.ExecuteWebhook(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Webhooks.WebhookCreateMessage,Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Executes a webhook
            See <a href="https://Rocket.com/developers/docs/resources/webhook#execute-webhook">Execute Webhook</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="message">Message data</param>
            <param name="executeParams">Webhook execution parameters</param>
            <param name="callback">Callback with the created message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.GetWebhookMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Webhooks.WebhookMessageParams,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Gets a previously-sent webhook message from the same token.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#get-webhook-message">Edit Webhook Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">Message ID to get</param>
            <param name="messageParams">Message Params</param>
            <param name="callback">Callback with the message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.EditWebhookMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Messages.RocketMessage,Oxide.Ext.Rocket.Entities.Webhooks.WebhookMessageParams,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Edits a previously-sent webhook message from the same token.
            See <a href="https://Rocket.com/developers/docs/resources/webhook#edit-webhook-message">Edit Webhook Message</a>
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">Message ID to edit</param>
            <param name="messageParams">Message Params</param>
            <param name="message">The updated message</param>
            <param name="callback">Callback with the edited message</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.RocketWebhook.DeleteWebhookMessage(Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Snowflake,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Deletes a message that was created by the webhook.
            </summary>
            <param name="client">Client to use</param>
            <param name="messageId">Message ID to delete</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Callback when an error occurs with error information</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Webhooks.WebhookCreateMessage">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/webhook#execute-webhook-jsonform-params">Webhook Create Message</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookCreateMessage.Username">
            <summary>
            Override the default username of the webhook
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookCreateMessage.AvatarUrl">
            <summary>
            Override the default avatar of the webhook
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Webhooks.WebhookEditMessage">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/webhook#edit-webhook-message-jsonform-params">Webhook Edit Message Structure</a>
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookEditMessage.Content">
            <summary>
            The message contents (up to 2000 characters)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookEditMessage.Embeds">
            <summary>
            Embedded rich content (Up to 10 embeds)
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookEditMessage.AllowedMentions">
            <summary>
            Allowed mentions for the message
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.WebhookEditMessage.AddEmbed(Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed)">
            <summary>
            Adds a new embed to the list of embed to send
            </summary>
            <param name="embed">Embed to add</param>
            <returns>This</returns>
            <exception cref="T:System.IndexOutOfRangeException">Thrown if more than 10 embeds are added in a send as that is the Rocket limit</exception>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams">
            <summary>
            Represents parameters to execute a webhook
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams.SendType">
            <summary>
            Which type of webhook are we trying to send (Rocket, Slack, Github)
            Defaults to Rocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams.Wait">
            <summary>
            Should we wait for a webhook to return a message or is this a fire and forget.
            Not settable by devs as it's controlled by which method is called
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams.ThreadId">
            <summary>
            If you're sending a message to a thread instead of a channel put the ID of the thread here.
            This field is optional and defaults to null
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams.ToQueryString">
            <summary>
            Returns the query string to be used in the webhook URL
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.WebhookExecuteParams.GetWebhookFormat">
            <summary>
            Returns the URL formatting for the webhook type
            </summary>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Webhooks.WebhookMessageParams">
            <summary>
            Represents webhook message query string parameters 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Entities.Webhooks.WebhookMessageParams.ThreadId">
            <summary>
            If the message exists in a thread
            This field is optional and defaults to null
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Entities.Webhooks.WebhookMessageParams.ToQueryString">
            <summary>
            Returns the query string to be used in the webhook URL
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Webhooks.WebhookSendType">
            <summary>
            Use to control which webhook execute url to call
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Webhooks.WebhookSendType.Rocket">
            <summary>
            Webhook is for Rocket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Webhooks.WebhookSendType.Slack">
            <summary>
            Webhook is for slack
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Webhooks.WebhookSendType.Github">
            <summary>
            Webhook is for github
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Entities.Webhooks.WebhookType">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/resources/webhook#webhook-object-webhook-types">Webhook Types</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Webhooks.WebhookType.Incoming">
            <summary>
            Incoming Webhooks can post messages to channels with a generated token
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Entities.Webhooks.WebhookType.ChannelFollower">
            <summary>
            Channel Follower Webhooks are internal webhooks used with Channel Following to post new messages into channels
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.BaseRocketException">
            <summary>
            Represents a base Rocket extension
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.BaseRocketException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidApplicationCommandException">
            <summary>
            Represents an invalid application command
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidApplicationCommandException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidChannelException">
            <summary>
            Represents using an invalid channel
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidChannelException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidRocketColorException">
            <summary>
            Represents an invalid Rocket color
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidRocketColorException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidEmbedException">
            <summary>
            Represents an invalid embed
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidEmbedException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidEmojiException">
            <summary>
            Error thrown when an emoji string fails validation
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidEmojiException.#ctor(System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="emojiValue">Value for the emoji</param>
            <param name="validationError">Validation error message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidFileNameException">
            <summary>
            Exception throw when an attachment filename contains invalid characters
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidFileNameException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="fileName">invalid file name</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidInteractionResponseException">
            <summary>
            Error thrown when an interaction response is invalid
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidInteractionResponseException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidMessageComponentException">
            <summary>
            Represents an invalid message component
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidMessageComponentException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidMessageException">
            <summary>
            Represents an invalid message
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidMessageException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="message">Exception message</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Exceptions.InvalidSnowflakeException">
            <summary>
            Exception thrown when an invalid Snowflake ID is used in an API call
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Exceptions.InvalidSnowflakeException.#ctor(System.String)">
            <summary>
            Constructor
            </summary>
            <param name="paramName">Name of the parameter that is invalid</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Extensions.RocketUserExt">
            <summary>
            Adds extension methods to Rocket User to allow sending server chat commands to the player
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.RocketUserExt.SendChatMessage(Oxide.Ext.Rocket.Entities.Users.RocketUser,System.String)">
            <summary>
            Send chat message to the user if they're connected
            </summary>
            <param name="user">User to send the message to on the server</param>
            <param name="message">Message to send</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.RocketUserExt.SendChatMessage(Oxide.Ext.Rocket.Entities.Users.RocketUser,System.String,System.String,System.Object[])">
            <summary>
            Send chat message to the user if they're connected
            </summary>
            <param name="user">User to send the message to on the server</param>
            <param name="message">Message to send</param>
            <param name="prefix">Message Prefix</param>
            <param name="args">Message Args</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.RocketUserExt.HasPermission(Oxide.Ext.Rocket.Entities.Users.RocketUser,System.String)">
            <summary>
            Return if the Rocket user has the given oxide permission.
            If the user is not linked this will return false
            </summary>
            <param name="user">User to check for permission</param>
            <param name="permission">Permission to check for</param>
            <returns>True if use is linked and has permission; False otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.RocketUserExt.IsLinked(Oxide.Ext.Rocket.Entities.Users.RocketUser)">
            <summary>
            Returns true if the player is linked
            </summary>
            <param name="user">Rocket user to check if they're linked</param>
            <returns>True if linked; False otherwise</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Extensions.EnumExt">
            <summary>
            Extensions for enums
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Extensions.HashExt">
            <summary>
            Hash extensions
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.HashExt.RemoveAll``2(Oxide.Plugins.Hash{``0,``1},System.Func{``1,System.Boolean})">
            <summary>
            Remove all records from the hash with the given predicate filter
            </summary>
            <param name="hash">Hash to have data removed from</param>
            <param name="predicate">Filter of which values to remove</param>
            <typeparam name="TKey">Key type of the hash</typeparam>
            <typeparam name="TValue">Value type of the hash</typeparam>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.HashExt.Copy``2(Oxide.Plugins.Hash{``0,``1})">
            <summary>
            Creates a copy of a hash with it's current key value pairs
            </summary>
            <param name="hash">Hash to be copied</param>
            <typeparam name="TKey"></typeparam>
            <typeparam name="TValue"></typeparam>
            <returns>Copied Hash</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Extensions.PlayerExt">
            <summary>
            IPlayer Extensions for sending Rocket Message to an IPlayer
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.SendRocketMessage(Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.RocketClient,System.String)">
            <summary>
            Send a Rocket Message to an IPlayer if they're registered
            </summary>
            <param name="player">Player to send the Rocket message to</param>
            <param name="client">Client to use for sending the message</param>
            <param name="message">Message to send</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.SendRocketMessage(Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed)">
            <summary>
            Send a Rocket Message to an IPlayer if they're registered
            </summary>
            <param name="player">Player to send the Rocket message to</param>
            <param name="client">Client to use for sending the message</param>
            <param name="embed">Embed to send</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.SendRocketMessage(Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.RocketClient,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Messages.Embeds.RocketEmbed})">
            <summary>
            Send a Rocket Message to an IPlayer if they're registered
            </summary>
            <param name="player">Player to send the Rocket message to</param>
            <param name="client">Client to use for sending the message</param>
            <param name="embeds">Embeds to send</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.SendRocketMessage(Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.RocketClient,Oxide.Ext.Rocket.Entities.Messages.MessageCreate)">
            <summary>
            Send a Rocket Message to an IPlayer if they're registered
            </summary>
            <param name="player">Player to send the Rocket message to</param>
            <param name="client">Client to use for sending the message</param>
            <param name="message">Message to send</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.IsLinked(Oxide.Core.Libraries.Covalence.IPlayer)">
            <summary>
            Returns true if the player is linked
            </summary>
            <param name="player">Player to check if they're linked</param>
            <returns>True if linked; False otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.GetRocketUserId(Oxide.Core.Libraries.Covalence.IPlayer)">
            <summary>
            Returns the Rocket ID of the IPlayer if linked
            </summary>
            <param name="player">Player to get Rocket ID for</param>
            <returns>Rocket ID if linked; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.GetRocketUser(Oxide.Core.Libraries.Covalence.IPlayer)">
            <summary>
            Returns a minimal Rocket User for the given player
            </summary>
            <param name="player">Player to get Rocket User for</param>
            <returns>Rocket User if linked; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.PlayerExt.GetGuildMember(Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.Entities.Guilds.RocketGuild)">
            <summary>
            Returns a minimal Guild Member for the given player
            </summary>
            <param name="player">Player to get Rocket User for</param>
            <param name="guild">Guild the member is in</param>
            <returns>GuildMember if linked and in guild; null otherwise</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Extensions.StringExt">
            <summary>
            String Extension methods
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Extensions.StringExt.ParseCommand(System.String,System.String@,System.String[]@)">
            <summary>
            Parses the specified command into uMod command format
            Sourced from CommandHandler.cs of uMod (https://gitlab.com/umod/core/core/-/blob/develop/src/Command/CommandHandler.cs)
            </summary>
            <param name="argStr"></param>
            <param name="command"></param>
            <param name="args"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn">
            <summary>
            Represents Rocket <a href="https://Rocket.com/developers/docs/reference#image-formatting-cdn-endpoints">CDN Endpoints</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.CdnUrl">
            <summary>
            Base CDN Url
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetCustomEmojiUrl(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url to the custom emoji
            </summary>
            <param name="emojiId">ID of the emoji</param>
            <param name="format">The format the emoji is in</param>
            <returns>Url of the emoji</returns>
            <exception cref="T:System.ArgumentException">Thrown if format is Jpg or WebP</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetGuildIconUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url to the Guild Icon
            </summary>
            <param name="guildId">Guild ID for the icon</param>
            <param name="guildIcon">Guild Icon from guild</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the guild icon</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetGuildSplashUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url of the Guild Splash
            </summary>
            <param name="guildId">Guild ID for the icon</param>
            <param name="guildSplash">Guild Splash from guild</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the guild splash</returns>
            <exception cref="T:System.ArgumentException">Thrown if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetGuildDiscoverySplashUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Return the Url of the Guild Discovery Splash
            </summary>
            <param name="guildId">Guild ID for the icon</param>
            <param name="guildDiscoverySplash">Guild Discovery Splash from guild</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the guild discovery splash</returns>
            <exception cref="T:System.ArgumentException">Thrown if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetGuildBannerUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url of the Guild Banner
            </summary>
            <param name="guildId">Guild ID for the icon</param>
            <param name="guildBanner">Guild Banner from guild</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the guild banner</returns>
            <exception cref="T:System.ArgumentException">Thrown if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetUserBanner(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url of the User Banner
            </summary>
            <param name="userId">User ID for the Banner</param>
            <param name="userBanner">User Banner from user</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the User banner</returns>
            <exception cref="T:System.ArgumentException">Thrown if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetChannelIcon(Oxide.Ext.Rocket.Entities.Snowflake,System.String)">
            <summary>
            Returns the icon for a given channel
            </summary>
            <param name="channelId">Channel ID for the Icon</param>
            <param name="icon">Icon hash for the channel</param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetUserDefaultAvatarUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String)">
            <summary>
            Returns the Url of the users default avatar
            </summary>
            <param name="userId">Rocket User ID</param>
            <param name="userDiscriminator">Rocket User Discriminator</param>
            <returns>Url of the default avatar url</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetUserAvatarUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url of the users avatar
            </summary>
            <param name="userId">Rocket User ID</param>
            <param name="userAvatar">User avatar from user</param>
            <param name="format">Format the avatar is in</param>
            <returns>Url of the users avatar</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetGuildMemberAvatar(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url of the Guild Member avatar
            </summary>
            <param name="guildId">Guild ID of the Guild Member</param>
            <param name="userId">Rocket User ID</param>
            <param name="memberAvatar">Guild Member avatar</param>
            <param name="format">Format the avatar is in</param>
            <returns>Url of the Guild Member avatar</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetApplicationIconUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the url to the application icon
            </summary>
            <param name="applicationId">Application ID</param>
            <param name="icon">Icon field from application</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the application icon</returns>
            <exception cref="T:System.ArgumentException">Throw if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetApplicationAssetUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the applications asset icon url
            </summary>
            <param name="applicationId">Application ID of the icon</param>
            <param name="assetId">Asset ID for the application</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the application asset icon</returns>
            <exception cref="T:System.ArgumentException">Throw if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetAchievementIconUrl(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url of the Achievement Icon
            </summary>
            <param name="applicationId">Application ID of the icon</param>
            <param name="achievementId">Achievement ID</param>
            <param name="iconHash">Achievement Icon Hash</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the achievement icon</returns>
            <exception cref="T:System.ArgumentException">Throw if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetTeamIconUrl(Oxide.Ext.Rocket.Entities.Snowflake,System.String,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the Url of the Team Icon
            </summary>
            <param name="teamId">Team ID of the Icon</param>
            <param name="teamIcon">Icon field from Team</param>
            <param name="format">Format the icon is in</param>
            <returns>Url of the achievement icon</returns>
            <exception cref="T:System.ArgumentException">Throw if format is Gif</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetStickerPackBanner(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the banner for a given sticker pack
            </summary>
            <param name="applicationId">Application ID for the stickers</param>
            <param name="bannerAssetId">Banner Asset ID for the stickers</param>
            <param name="format">Image Formatting for the banner</param>
            <returns>Url to the sticker pack banner</returns>
            <exception cref="T:System.ArgumentException">Thrown if image type is not PNG,JPEG, or WebP</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetSticker(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the sticker url with the given ID
            </summary>
            <param name="stickerId">ID of the sticker</param>
            <param name="format">Format for the sticker to be returned in</param>
            <returns>Return url for the sticker</returns>
            <exception cref="T:System.ArgumentException">Thrown if image type is not PNG or Lottie</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetRoleIcon(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat)">
            <summary>
            Returns the sticker url with the given ID
            </summary>
            <param name="roleId">ID of the role</param>
            <param name="format">Format for the icon to be returned in</param>
            <returns>Return url for the role icon</returns>
            <exception cref="T:System.ArgumentException">Thrown if image type is not PNG or Lottie</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Cdn.RocketCdn.GetExtension(Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat,System.String)">
            <summary>
            Returns the extension to use for the image
            </summary>
            <param name="format">Image format that is requested</param>
            <param name="image">Image data from the field</param>
            <returns>Image extension for the image format and image data</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if Image Format is out of range</exception>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/reference#image-formatting-image-formats">Image Formats</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat.Auto">
            <summary>
            Automatically pick the image format
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat.Jpg">
            <summary>
            Return image as a JPG
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat.Png">
            <summary>
            Return image as PNG
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat.WebP">
            <summary>
            Return image as WebP
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat.Gif">
            <summary>
            Return image as GIF
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Cdn.ImageFormat.Lottie">
            <summary>
            Lottie Image
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Converters.RocketEnumConverter">
            <summary>
            Handles deserializing JSON values as strings. If they value doesn't exist return the default value.
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.RocketEnumConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write Enum value to Rocket Enum String
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.RocketEnumConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read enum value from Rocket Enum String
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.RocketEnumConverter.CanConvert(System.Type)">
            <summary>
            Checks if this type is enum or nullable enum
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Converters.HashListConverter`1">
            <summary>
            Converts to and from a list in JSON to a hash
            </summary>
            <typeparam name="TValue"></typeparam>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.HashListConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Read an array in JSON as a hash
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.HashListConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Write a hash as a list in JSON
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.HashListConverter`1.CanConvert(System.Type)">
            <summary>
            Can we convert the given type
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Converters.MessageComponentsConverter">
            <summary>
            Converter for list of message components
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.MessageComponentsConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.MessageComponentsConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Populate the correct types in components instead of just the BaseComponent
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.MessageComponentsConverter.CanConvert(System.Type)">
            <summary>
            Returns if this can convert the value
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="P:Oxide.Ext.Rocket.Helpers.Converters.MessageComponentsConverter.CanWrite">
            <summary>
            
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Converters.SnowflakeConverter">
            <summary>
            Converts a snowflake to and from it's JSON string value
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.SnowflakeConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Reads the JSON string and converts it to a snowflake
            </summary>
            <param name="reader"></param>
            <param name="objectType"></param>
            <param name="existingValue"></param>
            <param name="serializer"></param>
            <returns></returns>
            <exception cref="T:Newtonsoft.Json.JsonException"></exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.SnowflakeConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>
            Writes a snowflake as a JSON string
            </summary>
            <param name="writer"></param>
            <param name="value"></param>
            <param name="serializer"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Converters.SnowflakeConverter.CanConvert(System.Type)">
            <summary>
            Returns if we can convert this type
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.RocketFormatting">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/reference#message-formatting-formats">Message text formatting options</a>
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.MentionUser(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Mention the user with the given user ID
            </summary>
            <param name="userId">User ID to mention</param>
            <returns>Mention user formatted string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.MentionUserNickname(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Mention the user displaying their user name
            </summary>
            <param name="userId">User ID to mention</param>
            <returns>Ping user formatted string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.MentionChannel(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Mention the the channel with the given ID
            </summary>
            <param name="channelId">Channel ID to mention</param>
            <returns>Mention channel formatted string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.MentionRole(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Mention the the role with the given ID
            </summary>
            <param name="roleId">Role ID to mention</param>
            <returns>Mention role formatted string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.CustomEmojiMessageString(Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.Boolean)">
            <summary>
            Returns formatting string for custom emoji to be used in a message
            </summary>
            <param name="name">Name of the custom emoji</param>
            <param name="id">ID of the custom emoji</param>
            <param name="animated">If the emoji is animated</param>
            <returns>Custom emoji formatted string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.CustomEmojiDataString(Oxide.Ext.Rocket.Entities.Snowflake,System.String,System.Boolean)">
            <summary>
            Returns formatting string for custom emoji to be used in a url
            </summary>
            <param name="name">Name of the custom emoji</param>
            <param name="id">ID of the custom emoji</param>
            <param name="animated">If the emoji is animated</param>
            <returns>Custom emoji formatted string</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.UnixTimestamp(System.Int32,Oxide.Ext.Rocket.Helpers.TimestampStyles)">
            <summary>
            Displays a timestamp 
            </summary>
            <param name="timestamp">UNIX Timestamp</param>
            <param name="style">Display style for the timestamp</param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.Italics(System.String)">
            <summary>
            Will display the message in italics
            </summary>
            <param name="message">Message to make italics</param>
            <returns>Italics formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.Bold(System.String)">
            <summary>
            Will display the message in bold
            </summary>
            <param name="message">Message to make bold</param>
            <returns>Bold formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.ItalicsBold(System.String)">
            <summary>
            Will display the message in italics and bold
            </summary>
            <param name="message">Message to make italics and bold</param>
            <returns>Bold and Italics formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.Underline(System.String)">
            <summary>
            Will display the message in underline
            </summary>
            <param name="message">Message to make underline</param>
            <returns>Underline formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.UnderlineItalics(System.String)">
            <summary>
            Will display the message in underline and italics
            </summary>
            <param name="message">Message to make underline and italics</param>
            <returns>Underline and Italics formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.UnderlineBold(System.String)">
            <summary>
            Will display the message in underline and bold
            </summary>
            <param name="message">Message to make underline and bold</param>
            <returns>Underline and bold formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.UnderlineBoldItalics(System.String)">
            <summary>
            Will display the message in underline and bold and italics
            </summary>
            <param name="message">Message to make underline and bold and italics</param>
            <returns>Underline and Bold and Italics formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.Strikethrough(System.String)">
            <summary>
            Will display the message with a strikethrough
            </summary>
            <param name="message">Message to make strikethrough</param>
            <returns>Strikethrough formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.CodeBlockOneLine(System.String)">
            <summary>
            Will display the message as a one line code block
            </summary>
            <param name="message">Message to make code block</param>
            <returns>Code block formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.CodeBlockMultiLine(System.String)">
            <summary>
            Will display the message as a multiline code block
            </summary>
            <param name="message">Message to make multiline code block</param>
            <returns>Code block formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.CodeBlockLanguage(System.String,System.String)">
            <summary>
            Will display a multiline code bloc with the specified language
            </summary>
            <param name="message">Message to make code block with language</param>
            <param name="language">Language to display the code block as</param>
            <returns>Language code block formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.BlockQuoteSingleLine(System.String)">
            <summary>
            Will display the message in single line block quote
            </summary>
            <param name="message">Message to make block quote</param>
            <returns>Block Quote formatted message</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.RocketFormatting.BlockQuoteMultiLine(System.String)">
            <summary>
            Will display the message in multiline block quote
            </summary>
            <param name="message">Message to make block quote</param>
            <returns>Multiline block quote formatted message</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.LocaleConverter">
            <summary>
            Converts Rocket locale codes into oxide locale codes
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.LocaleConverter.GetOxideLocale(System.String)">
            <summary>
            Returns the oxide locale for a given Rocket locale
            </summary>
            <param name="RocketLocale">Rocket locale to get oxide locale for</param>
            <returns>Oxide locale if it exists; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.LocaleConverter.GetRocketLocale(System.String)">
            <summary>
            Returns the Rocket locale for a given oxide locale
            </summary>
            <param name="oxideLocale">oxide locale to get Rocket locale for</param>
            <returns>Rocket locale if it exists; null otherwise</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Time">
            <summary>
            Helper methods relating to time
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Time.RocketEpoch">
            <summary>
            DateTimeOffset since Rocket Epoch
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.Time.Epoch">
            <summary>
            DateTime since linux epoch
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Time.TimeSinceEpoch">
            <summary>
            Gets how many seconds since the linux epoch
            </summary>
            <returns>Seconds since linux epoch</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Time.TimeSinceEpoch(System.DateTime)">
            <summary>
            Gets the time since the linux epoch and the given date time
            </summary>
            <param name="time">DateTime to get total second for</param>
            <returns>Total seconds since linux epoch for date time</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Time.ToDateTime(System.Int32)">
            <summary>
            Converts the seconds since linux epoch to a DateTime
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Time.ToUnixTimeStamp(System.DateTime)">
            <summary>
            Gets the time since the linux epoch and the given date time
            </summary>
            <param name="date">DateTime to get total second for</param>
            <returns>Total seconds since linux epoch for date time</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.TimestampStyles">
            <summary>
            Available flags for timestamp formatting
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.TimestampStyles.ShortTime">
            <summary>
            Displays the short time for the timestamp
            Ex: 16:20
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.TimestampStyles.LongTime">
            <summary>
            Displays the long time for the timestamp
            Ex: 16:20:30
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.TimestampStyles.ShortDate">
            <summary>
            Displays the short date for the timestamp
            Ex: 20/04/2021
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.TimestampStyles.LongDate">
            <summary>
            Displays the long date for the timestamp
            Ex: 20 April 2021
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.TimestampStyles.ShortDateTime">
            <summary>
            Displays the short date/time for the timestamp
            Ex: 20 April 2021 16:20
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.TimestampStyles.LongDateTime">
            <summary>
            Displays the long date/time for the timestamp
            Ex: Tuesday, 20 April 2021 16:20
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Helpers.TimestampStyles.RelativeTime">
            <summary>
            Displays the relative time since the timestamp
            Ex: 2 months ago
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Helpers.Validation">
            <summary>
            Provides helper methods for validation
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Validation.ValidateEmoji(System.String)">
            <summary>
            Validates that the emoji string entered is valid.
            </summary>
            <param name="emoji"></param>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Helpers.Validation.ValidateFilename(System.String)">
            <summary>
            Checks if the filename is a valid Rocket filename.
            </summary>
            <param name="filename">Filename to validate</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Interfaces.IFileAttachments">
            <summary>
            Represents and interface for entities that can upload files
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Interfaces.IFileAttachments.FileAttachments">
            <summary>
            File attachments for an entity
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Interfaces.ISnowflakeEntity">
            <summary>
            Interface used to get the entity ID from an entity
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Interfaces.ISnowflakeEntity.Id">
            <summary>
            Returns the unique ID for this entity
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Libraries.Command.BaseCommand">
            <summary>
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L76)
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.BaseCommand.CanRun(Oxide.Ext.Rocket.BotClient)">
            <summary>
            Returns if a command can run.
            They can only run for the client that they were created for.
            </summary>
            <param name="client">Client to compare against</param>
            <returns>True if same bot client; false otherwise</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Libraries.Command.RocketCommand">
            <summary>
            Represents a library for Rocket commands
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.CommandPrefixes">
            <summary>
            Available command prefixes used by the extension
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.#ctor(System.Char[])">
            <summary>
            Rocket Commands Constructor
            </summary>
            <param name="prefixes">Command prefixes used by the extension</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.HasCommands">
            <summary>
            Returns if there are any guild Rocket commands are registered
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.HasDirectMessageCommands">
            <summary>
            Returns if there are any guild Rocket commands are registered
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.HasGuildCommands">
            <summary>
            Returns if there are any guild Rocket commands are registered
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.AddDirectMessageCommand(System.String,Oxide.Core.Plugins.Plugin,System.String)">
            <summary>
            Adds a Rocket direct message command
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L123)
            </summary>
            <param name="name">Name of the command</param>
            <param name="plugin">Plugin to add the command for</param>
            <param name="callback">Method name of the callback</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.AddDirectMessageLocalizedCommand(System.String,Oxide.Core.Plugins.Plugin,System.String)">
            <summary>
            Adds a localized Rocket direct message command
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L123)
            </summary>
            <param name="langKey">Lang Key on the plugin that contains the command</param>
            <param name="plugin">Plugin to add the localized command for</param>
            <param name="callback">Method name of the callback</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.AddDirectMessageCommand(System.String,Oxide.Core.Plugins.Plugin,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage,System.String,System.String[]})">
            <summary>
            Adds a Rocket direct message command
            Sourced From Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L134)
            </summary>
            <param name="command">Command to add</param>
            <param name="plugin">Plugin to add the command for</param>
            <param name="callback">Method name of the callback</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.AddGuildCommand(System.String,Oxide.Core.Plugins.Plugin,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Snowflake},System.String)">
            <summary>
            Adds a Rocket guild command
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L123)
            </summary>
            <param name="name">The name of the command</param>
            <param name="plugin">Plugin to add the command for</param>
            <param name="allowedChannels">Channel or Category Id's this command is allowed in</param>
            <param name="callback">Method name of the callback</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.AddGuildLocalizedCommand(System.String,Oxide.Core.Plugins.Plugin,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Snowflake},System.String)">
            <summary>
            Adds a localized Rocket guild command
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L123)
            </summary>
            <param name="langKey">Lang Key on the plugin that contains the command</param>
            <param name="plugin">Plugin to add the localized command for</param>
            <param name="allowedChannels">Channel or Category Id's this command is allowed in</param>
            <param name="callback">Method name of the callback</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.AddGuildCommand(System.String,Oxide.Core.Plugins.Plugin,System.Collections.Generic.List{Oxide.Ext.Rocket.Entities.Snowflake},System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage,System.String,System.String[]})">
            <summary>
            Adds a Rocket guild command
            Sourced From Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L134)
            </summary>
            <param name="command">Name of the command</param>
            <param name="plugin">Plugin to add the localized command for</param>
            <param name="allowedChannels">Channel or Category Id's this command is allowed in</param>
            <param name="callback">Method name of the callback</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.RemoveRocketCommand(System.String,Oxide.Core.Plugins.Plugin)">
            <summary>
            Removes a previously registered Rocket command
            Sourced From Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L286)
            </summary>
            <param name="command">Command to remove</param>
            <param name="plugin">Plugin the command is for</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.RemoveDmCommand(Oxide.Ext.Rocket.Libraries.Command.DirectMessageCommand)">
            <summary>
            Removes a Rocket command
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L314)
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.OnPluginUnloaded(Oxide.Core.Plugins.Plugin)">
            <summary>
            Called when a plugin has been unloaded
            </summary>
            <param name="sender"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.HandleDirectMessageCommand(Oxide.Ext.Rocket.BotClient,Oxide.Ext.Rocket.Entities.Messages.RocketMessage,Oxide.Ext.Rocket.Entities.Channels.RocketChannel,System.String,System.String[])">
            <summary>
            Handles the specified direct message command
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L361)
            </summary>
            <param name="client"></param>
            <param name="channel"></param>
            <param name="name"></param>
            <param name="args"></param>
            <param name="message"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Command.RocketCommand.HandleGuildCommand(Oxide.Ext.Rocket.BotClient,Oxide.Ext.Rocket.Entities.Messages.RocketMessage,Oxide.Ext.Rocket.Entities.Channels.RocketChannel,System.String,System.String[])">
            <summary>
            Handles the specified direct message command
            Sourced from Command.cs of OxideMod (https://github.com/OxideMod/Oxide.Rust/blob/develop/src/Libraries/Command.cs#L361)
            </summary>
            <param name="client"></param>
            <param name="channel"></param>
            <param name="name"></param>
            <param name="args"></param>
            <param name="message"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Libraries.Linking.RocketLink">
            <summary>
            Represents a library for Rocket linking
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.#ctor(Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            RocketLink Constructor
            </summary>
            <param name="logger">Logger for Rocket Link</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.IsEnabled">
            <summary>
            Returns if there is a registered link plugin
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.AddLinkPlugin(Oxide.Ext.Rocket.Libraries.Linking.IRocketLinkPlugin)">
            <summary>
            Adds a link plugin to be the plugin used with the Rocket Link library
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.RemoveLinkPlugin(Oxide.Ext.Rocket.Libraries.Linking.IRocketLinkPlugin)">
            <summary>
            Removes a link plugin from the Rocket Link library
            </summary>
            <param name="plugin"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.IsLinked(System.String)">
            <summary>
            Returns if the specified ID is linked
            </summary>
            <param name="steamId">Steam ID of the player</param>
            <returns>True if the ID is linked; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.IsLinked(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns if the specified ID is linked
            </summary>
            <param name="RocketId">Rocket ID of the player</param>
            <returns>True if the ID is linked; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.IsLinked(Oxide.Core.Libraries.Covalence.IPlayer)">
            <summary>
            Returns if the specified ID is linked
            </summary>
            <param name="player">Player to check if linked</param>
            <returns>True if the player is linked; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.IsLinked(Oxide.Ext.Rocket.Entities.Users.RocketUser)">
            <summary>
            Returns if the specified ID is linked
            </summary>
            <param name="user">Rocket user to check</param>
            <returns>True if the user is linked; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetSteamId(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns the Steam ID of the given Rocket ID if there is a link
            </summary>
            <param name="RocketId">Rocket ID to get steam ID for</param>
            <returns>Steam ID of the given given Rocket ID if linked; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetSteamId(Oxide.Ext.Rocket.Entities.Users.RocketUser)">
            <summary>
            Returns the Steam ID of the given Rocket ID if there is a link
            </summary>
            <param name="user"><see cref="T:Oxide.Ext.Rocket.Entities.Users.RocketUser"/> to get steam Id for</param>
            <returns>Steam ID of the given given Rocket ID if linked; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetPlayer(Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Returns the IPlayer for the given Rocket ID
            </summary>
            <param name="RocketId">Rocket ID to get IPlayer for</param>
            <returns>IPlayer for the given Rocket ID; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetRocketId(System.String)">
            <summary>
            Returns the Rocket ID for the given Steam ID
            </summary>
            <param name="steamId">Steam ID to get Rocket ID for</param>
            <returns>Rocket ID for the given Steam ID; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetRocketId(Oxide.Core.Libraries.Covalence.IPlayer)">
            <summary>
            Returns the Rocket ID for the given IPlayer
            </summary>
            <param name="player">Player to get Rocket ID for</param>
            <returns>Rocket ID for the given Steam ID; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetRocketUser(System.String)">
            <summary>
            Returns a minimal Rocket User
            </summary>
            <param name="steamId">ID of the in game player</param>
            <returns>Rocket ID for the given Steam ID; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetRocketUser(Oxide.Core.Libraries.Covalence.IPlayer)">
            <summary>
            Returns a minimal Rocket User
            </summary>
            <param name="player">Player to get the Rocket User for</param>
            <returns>Rocket ID for the given Steam ID; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetLinkedMember(System.String,Oxide.Ext.Rocket.Entities.Guilds.RocketGuild)">
            <summary>
            Returns a linked guild member for the matching steam id in the given guild
            </summary>
            <param name="steamId">ID of the in game player</param>
            <param name="guild">Guild the member is in</param>
            <returns>Rocket ID for the given Steam ID; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetLinkedMember(Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.Entities.Guilds.RocketGuild)">
            <summary>
            Returns a linked guild member for the matching <see cref="T:Oxide.Core.Libraries.Covalence.IPlayer"/> in the given guild
            </summary>
            <param name="player">Player to get the Rocket User for</param>
            <param name="guild">Guild the member is in</param>
            <returns>Rocket ID for the given Steam ID; null otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetLinkedCount">
            <summary>
            Returns the number of linked players
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetSteamIds">
            <summary>
            Returns Steam ID's for all linked players
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetRocketIds">
            <summary>
            Returns Rocket ID's for all linked players
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetSteamToRocketIds">
            <summary>
            Returns a Hash with a Steam ID key and Rocket ID value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.GetRocketToSteamIds">
            <summary>
            Returns a Hash with a Rocket ID key and Steam ID value
            </summary>
            <returns></returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.OnLinked(Oxide.Core.Plugins.Plugin,Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.Entities.Users.RocketUser)">
            <summary>
            Called by a link plugin when a link occured
            </summary>
            <param name="plugin">Plugin that initiated the link</param>
            <param name="player">Player being linked</param>
            <param name="Rocket">RocketUser being linked</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.RocketLink.OnUnlinked(Oxide.Core.Plugins.Plugin,Oxide.Core.Libraries.Covalence.IPlayer,Oxide.Ext.Rocket.Entities.Users.RocketUser)">
            <summary>
            Called by a link plugin when an unlink occured
            </summary>
            <param name="plugin">Plugin that is unlinking</param>
            <param name="player">Player being unlinked</param>
            <param name="Rocket">RocketUser being unlinked</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Libraries.Linking.IRocketLinkPlugin">
            <summary>
            Represents a plugin that supports Rocket Link library
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Libraries.Linking.IRocketLinkPlugin.Title">
            <summary>
            Title of the plugin
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Linking.IRocketLinkPlugin.GetSteamToRocketIds">
            <summary>
            Returns a <see cref="T:System.Collections.Generic.IDictionary`2"/> of Steam ID's to Rocket ID's
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscription">
            <summary>
            Represents a channel subscription for a plugin
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscription.#ctor(Oxide.Ext.Rocket.Entities.Snowflake,Oxide.Core.Plugins.Plugin,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage})">
            <summary>
            Constructor
            </summary>
            <param name="channelId">ID of the channel</param>
            <param name="plugin">Plugin the subscription is for</param>
            <param name="callback">Callback when the channel message is sent</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscription.CanRun(Oxide.Ext.Rocket.BotClient)">
            <summary>
            Returns if a subscription can run.
            They can only run for the client that they were created for.
            </summary>
            <param name="client">Client to compare against</param>
            <returns>True if same bot client; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscription.Invoke(Oxide.Ext.Rocket.Entities.Messages.RocketMessage)">
            <summary>
            Invokes the callback with the message
            </summary>
            <param name="message">Message that was sent in the given channel</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscriptions">
            <summary>
            Represents Rocket Subscriptions Oxide Library
            Allows for plugins to subscribe to Rocket channels
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscriptions.#ctor(Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            RocketSubscriptions Constructor
            </summary>
            <param name="logger">Logger</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscriptions.HasSubscriptions">
            <summary>
            Returns if any subscriptions have been registered
            </summary>
            <returns>True if there are any subscriptions; False otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscriptions.AddChannelSubscription(Oxide.Core.Plugins.Plugin,Oxide.Ext.Rocket.Entities.Snowflake,System.Action{Oxide.Ext.Rocket.Entities.Messages.RocketMessage})">
            <summary>
            Allows a plugin to add a subscription to a Rocket channel
            </summary>
            <param name="plugin">Plugin that is subscribing</param>
            <param name="channelId">Channel ID of the channel</param>
            <param name="message">Callback with the message that was created in the channel</param>
            <exception cref="T:System.ArgumentNullException">Exception if plugin or message is null</exception>
            <exception cref="T:System.ArgumentException">Exception if Channel ID is not valid</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscriptions.RemoveChannelSubscription(Oxide.Core.Plugins.Plugin,Oxide.Ext.Rocket.Entities.Snowflake)">
            <summary>
            Removes a subscribed channel for a plugin
            </summary>
            <param name="plugin">Plugin to remove the subscription for</param>
            <param name="channelId">Channel ID to remove</param>
            <exception cref="T:System.ArgumentNullException">Exception if plugin is null</exception>
            <exception cref="T:System.ArgumentException">Exception if channel ID is not valid</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.Libraries.Subscription.RocketSubscriptions.RemovePluginSubscriptions(Oxide.Core.Plugins.Plugin)">
            <summary>
            Remove all subscriptions for a plugin
            </summary>
            <param name="plugin">Plugin to remove subscriptions for</param>
            <exception cref="T:System.ArgumentNullException">Exception if plugin is null</exception>
        </member>
        <member name="T:Oxide.Ext.Rocket.Logging.RocketLogLevel">
            <summary>
            Represents the log level for a logger
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Logging.RocketLogLevel.Verbose">
            <summary>
            Verbose log level displays all message
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Logging.RocketLogLevel.Debug">
            <summary>
            Debug log level display all messages up to and include Debug
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Logging.RocketLogLevel.Info">
            <summary>
            Info log level display all messages up to and include Info
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Logging.RocketLogLevel.Warning">
            <summary>
            Warning log level display all messages up to and include Warning
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Logging.RocketLogLevel.Error">
            <summary>
            Error log level display all messages up to and include Error
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Logging.RocketLogLevel.Exception">
            <summary>
            Exception log level display all messages up to and include Exception
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Logging.RocketLogLevel.Off">
            <summary>
            Disables all logging
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Logging.ILogger">
            <summary>
            Represents an interface for a logger
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.Debug(System.String)">
            <summary>
            Log a Debug message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.Info(System.String)">
            <summary>
            Log a Info message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.Warning(System.String)">
            <summary>
            Log a Warning message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.Error(System.String)">
            <summary>
            Log a Error message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.Exception(System.String,System.Exception)">
            <summary>
            Log a Exception message
            </summary>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.UpdateLogLevel(Oxide.Ext.Rocket.Logging.RocketLogLevel)">
            <summary>
            Updates the log level for the current logger
            </summary>
            <param name="level">Level to update the logger to</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.ILogger.IsLogging(Oxide.Ext.Rocket.Logging.RocketLogLevel)">
            <summary>
            Returns true if the logger is logging for the passed log level
            </summary>
            <param name="level">Log Level to check</param>
            <returns>True if the logger is logging for the given log level</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Logging.Logger">
            <summary>
            Represents a Rocket extension logger
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.#ctor(Oxide.Ext.Rocket.Logging.RocketLogLevel)">
            <summary>
            Creates a new logger with the given log level
            </summary>
            <param name="logLevel">Log level of the logger</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.Verbose(System.String)">
            <summary>
            Log a verbose message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.Debug(System.String)">
            <summary>
            Log a Debug message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.Info(System.String)">
            <summary>
            Log a Info message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.Warning(System.String)">
            <summary>
            Log a Warning message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.Error(System.String)">
            <summary>
            Log a Error message
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.Exception(System.String,System.Exception)">
            <summary>
            Log a Exception message
            </summary>
            <param name="message">Message to log</param>
            <param name="ex">Exception to log</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.UpdateLogLevel(Oxide.Ext.Rocket.Logging.RocketLogLevel)">
            <summary>
            Updates the log level for the current logger
            </summary>
            <param name="level">Level to update the logger to</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Logging.Logger.IsLogging(Oxide.Ext.Rocket.Logging.RocketLogLevel)">
            <summary>
            Returns true if the logger is logging for the passed log level
            </summary>
            <param name="level">Log Level to check</param>
            <returns>True if the logger is logging for the given log level</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.RateLimits.BaseRateLimit">
            <summary>
            Represents a base rate limit for websocket and rest api requests
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.NumRequests">
            <summary>
            The number of requests that have executed since the last reset
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.LastReset">
            <summary>
            The UNIX timestamp of the last reset
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.MaxRequests">
            <summary>
            The max number of requests this rate limit can handle per interval
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.ResetInterval">
            <summary>
            The interval in which this resets at
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.#ctor(System.Int32,System.Double)">
            <summary>
            Base Rate Limit Constructor
            </summary>
            <param name="maxRequests">Max requests per interval</param>
            <param name="interval">Reset Interval</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.FiredRequest">
            <summary>
            Called when an API request is fired
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.HasReachedRateLimit">
            <summary>
            Returns true if we have reached the global rate limit 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.NextReset">
            <summary>
            Returns how long until the current rate limit period will expire
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RateLimits.BaseRateLimit.Shutdown">
            <summary>
            Called when a bot is shutting down
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.RateLimits.RestRateLimit">
            <summary>
            Represents a rate limit for rest requests
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RateLimits.RestRateLimit.#ctor">
            <summary>
            Constructor for RestRateLimit
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RateLimits.RestRateLimit.ReachedRateLimit(System.Double)">
            <summary>
            Called if we receive a header notifying us of hitting the rate limit
            </summary>
            <param name="retryAfter">How long until we should retry API request again</param>
        </member>
        <member name="P:Oxide.Ext.Rocket.RateLimits.RestRateLimit.NextReset">
            <summary>
            Returns how long until the current rate limit period will expire
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.RateLimits.WebsocketRateLimit">
            <summary>
            Represents a WebSocket Rate Limit
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.RateLimits.WebsocketRateLimit.#ctor">
            <summary>
            Constructor for WebsocketRateLimit
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Rest.Bucket">
            <summary>
            Represents a Rocket API bucket for a group of requests
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Bucket.BucketId">
            <summary>
            The ID of this bucket which is based on the route
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Bucket.RateLimit">
            <summary>
            The number of requests that can be made
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Bucket.RateLimitRemaining">
            <summary>
            How many requests are remaining before hitting the rate limit for the bucket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Bucket.RateLimitReset">
            <summary>
            How long until the rate limit resets
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Bucket.ErrorDelayUntil">
            <summary>
            How long to wait before retrying request since there was a web exception
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Bucket.Handler">
            <summary>
            Rest Handler for the bucket
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Bucket.#ctor(Oxide.Ext.Rocket.Rest.RestHandler,System.String,Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            Creates a new bucket for the given rest handler and bucket ID
            </summary>
            <param name="handler">Rest Handler for the bucket</param>
            <param name="bucketId">ID of the bucket</param>
            <param name="logger">Logger for the client</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Bucket.Close">
            <summary>
            Close the bucket and abort the thread
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Bucket.ShouldCleanup">
            <summary>
            Returns if this bucket is ready to be cleaned up.
            Should be cleaned up if the thread is not null and the RateLimitReset has expired
            </summary>
            <returns>True if we should cleanup the bucket; false otherwise</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Bucket.QueueRequest(Oxide.Ext.Rocket.Rest.Request)">
            <summary>
            Queues a new request for the buck
            </summary>
            <param name="request">Request to be queued</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Bucket.DequeueRequest(Oxide.Ext.Rocket.Rest.Request)">
            <summary>
            Removes the request from the queue.
            Either the request completed successfully or there was an error and failed to succeed after 3 attempts
            </summary>
            <param name="request">Request to remove</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Rest.Multipart.IMultipartSection">
            <summary>
            Represents a Multipart section for MultiPart requests
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.IMultipartSection.FileName">
            <summary>
            Name of the file for the section
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.IMultipartSection.ContentType">
            <summary>
            Content type for the section
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.IMultipartSection.Data">
            <summary>
            Data for the section
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.IMultipartSection.SectionName">
            <summary>
            Name of the section
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Rest.Multipart.MultipartFileSection">
            <summary>
            Represents a MultiPartFileSection
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFileSection.FileName">
            <summary>
            Name of the file being sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFileSection.ContentType">
            <summary>
            Content Type for the file being sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFileSection.Data">
            <summary>
            Data for the file being sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFileSection.SectionName">
            <summary>
            Section name for the multipart section
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Multipart.MultipartFileSection.#ctor(System.String,System.String,System.Byte[],System.String)">
            <summary>
            Constructor for a multipart file
            </summary>
            <param name="sectionName"></param>
            <param name="fileName"></param>
            <param name="data"></param>
            <param name="contentType"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection">
            <summary>
            Represents a MultiPartFormSection
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection.FileName">
            <summary>
            Name of the file being sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection.ContentType">
            <summary>
            Content Type for the file being sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection.Data">
            <summary>
            Data for the file being sent
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection.SectionName">
            <summary>
            Section name for the multipart section
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection.#ctor(System.String,System.Byte[],System.String)">
            <summary>
            Constructor for byte form data
            </summary>
            <param name="sectionName"></param>
            <param name="data"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection.#ctor(System.String,System.String,System.String)">
            <summary>
            Constructor for string form data
            </summary>
            <param name="sectionName"></param>
            <param name="data"></param>
            <param name="contentType"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Multipart.MultipartFormSection.#ctor(System.String,System.Object,System.String)">
            <summary>
            Constructor for object form data
            </summary>
            <param name="sectionName"></param>
            <param name="data"></param>
            <param name="contentType"></param>
        </member>
        <member name="T:Oxide.Ext.Rocket.Rest.RateLimitHandler">
            <summary>
            Represents a global rate limit handler for a bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.RateLimitHandler._global">
            <summary>
            How many requests have been made globally for the bot since the last 60 second period wiped it
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RateLimitHandler.#ctor">
            <summary>
            Creates a new global rate limit for a bot
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RateLimitHandler.FiredRequest">
            <summary>
            Called when an API request is fired
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RateLimitHandler.ReachedRateLimit(System.Double)">
            <summary>
            Called if we receive a header notifying us of hitting the rate limit
            </summary>
            <param name="retryAfter">How long until we should retry API request again</param>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.RateLimitHandler.HasReachedRateLimit">
            <summary>
            Returns true if we have reached the global rate limit 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.RateLimitHandler.NextBucketReset">
            <summary>
            Returns how long until the current rate limit period will expire
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RateLimitHandler.Shutdown">
            <summary>
            Called when a bot is shutting down
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.Rest.Request">
            <summary>
            Represent a Rocket API request
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.Method">
            <summary>
            HTTP request method
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.Route">
            <summary>
            Route on the API
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.RequestUrl">
            <summary>
            Full Request URl to the API
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.Data">
            <summary>
            Data to be sent with the request
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.Contents">
            <summary>
            Data serialized to bytes 
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.MultipartSections">
            <summary>
            Attachments for a request
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.MultipartRequest">
            <summary>
            Required If Multipart Form Request
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.Boundary">
            <summary>
            Multipart Boundary
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.Response">
            <summary>
            Response from the request
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.Callback">
            <summary>
            Callback to call if the request completed successfully
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.OnError">
            <summary>
            Callback to call if the request errored with the last error message
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.StartTime">
            <summary>
            The DateTime the request was started
            Used for request timeout
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.Rest.Request.InProgress">
            <summary>
            Returns if the request is currently in progress
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Request.UrlBase">
            <summary>
            Base URL for Rocket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.Request.ApiVersion">
            <summary>
            API Version for Rest requests
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Request.#ctor(Oxide.Ext.Rocket.Entities.Api.RequestMethod,System.String,System.Object,System.String,System.Action{Oxide.Ext.Rocket.Entities.Api.RestResponse},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError},Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            Creates a new request
            </summary>
            <param name="method">HTTP method to call</param>
            <param name="route">Route to call on the API</param>
            <param name="data">Data for the request</param>
            <param name="authHeader">Authorization Header</param>
            <param name="callback">Callback once the request completes successfully</param>
            <param name="onError">Callback when the request errors</param>
            <param name="logger">Logger for the request</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Request.Fire">
            <summary>
            Fires the request off
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Request.Close(System.Boolean)">
            <summary>
            Closes the request and removes it from the bucket
            </summary>
            <param name="remove"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.Request.HasTimedOut">
            <summary>
            Returns true if the request has timed out
            </summary>
            <returns></returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.Rest.RestHandler">
            <summary>
            Represents a REST handler for a bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.RestHandler.RateLimit">
            <summary>
            Global Rate Limit for the bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.RestHandler.Buckets">
            <summary>
            The request buckets for the bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.Rest.RestHandler._authorization">
            <summary>
            The authorization header value
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.#ctor(Oxide.Ext.Rocket.BotClient,Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            Creates a new REST handler for a bot client
            </summary>
            <param name="client">Client the request is for</param>
            <param name="logger">Logger from the client</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.DoRequest(System.String,Oxide.Ext.Rocket.Entities.Api.RequestMethod,System.Object,System.Action,System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Creates a new request and queues it to be ran
            </summary>
            <param name="url">URL of the request</param>
            <param name="method">HTTP method of the request</param>
            <param name="data">Data to be sent with the request</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Error callback if an error occurs</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.DoRequest``1(System.String,Oxide.Ext.Rocket.Entities.Api.RequestMethod,System.Object,System.Action{``0},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Creates a new request and queues it to be ran
            </summary>
            <param name="url">URL of the request</param>
            <param name="method">HTTP method of the request</param>
            <param name="data">Data to be sent with the request</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Error callback if an error occurs</param>
            <typeparam name="T">The type that is expected to be returned</typeparam>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.CreateRequest(Oxide.Ext.Rocket.Entities.Api.RequestMethod,System.String,System.Object,System.Action{Oxide.Ext.Rocket.Entities.Api.RestResponse},System.Action{Oxide.Ext.Rocket.Entities.Api.RestError})">
            <summary>
            Creates a new request and queues it to be ran
            </summary>
            <param name="url">URL of the request</param>
            <param name="method">HTTP method of the request</param>
            <param name="data">Data to be sent with the request</param>
            <param name="callback">Callback once the action is completed</param>
            <param name="error">Error callback if an error occurs</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.CleanupExpired">
            <summary>
            Removed buckets that are old and not being used
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.QueueRequest(Oxide.Ext.Rocket.Rest.Request,Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            Queues the request
            </summary>
            <param name="request">Request to queue</param>
            <param name="logger">Logger to use</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.Shutdown">
            <summary>
            Shutdown the REST handler
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.Rest.RestHandler.GetBucketId(System.String)">
            <summary>
            Returns the Rate Limit Bucket for the given route
            https://Rocket.com/developers/docs/topics/rate-limits#rate-limits
            </summary>
            <param name="route">API Route</param>
            <returns>Bucket ID for route</returns>
        </member>
        <member name="T:Oxide.Ext.Rocket.WebSockets.DispatchCode">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#commands-and-events-gateway-events">Gateway Event Codes</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.Unknown">
            <summary>
            Used when we don't have a matching Dispatch Code
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.Ready">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#ready">READY</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.Resumed">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#resumed">RESUMED</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ChannelCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#channel-create">CHANNEL_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ChannelUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#channel-update">CHANNEL_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ChannelDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#channel-delete">CHANNEL_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ChannelPinsUpdate">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#channel-pins-update">CHANNEL_PINS_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-create">GUILD_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-update">GUILD_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-delete">GUILD_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildBanAdded">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-ban-add">GUILD_BAN_ADD</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildBanRemoved">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-ban-remove">GUILD_BAN_REMOVE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildEmojisUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-emojis-update">GUILD_EMOJIS_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildStickersUpdate">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-stickers-update">GUILD_STICKERS_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildIntegrationsUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-integrations-update">GUILD_INTEGRATIONS_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildMemberAdded">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-member-add">GUILD_MEMBER_ADD</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildMemberRemoved">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-member-remove">GUILD_MEMBER_REMOVE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildMemberUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-member-update">GUILD_MEMBER_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildMembersChunk">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-members-chunk">GUILD_MEMBERS_CHUNK</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildRoleCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-role-create">GUILD_ROLE_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildRoleUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-role-update">GUILD_ROLE_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildRoleDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-role-delete">GUILD_ROLE_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildScheduledEventCreate">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-scheduled-event-create">GUILD_SCHEDULED_EVENT_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildScheduledEventUpdate">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-scheduled-event-update">GUILD_SCHEDULED_EVENT_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildScheduledEventDelete">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-scheduled-event-delete">GUILD_SCHEDULED_EVENT_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildScheduledEventUserAdd">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-scheduled-event-user-add">GUILD_SCHEDULED_EVENT_USER_ADD</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildScheduledEventUserRemove">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#guild-scheduled-event-user-remove">GUILD_SCHEDULED_EVENT_USER_REMOVE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.IntegrationCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#integration-create">INTEGRATION_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.IntegrationUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#integration-update">INTEGRATION_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.IntegrationDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#integration-delete">INTEGRATION_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-create">MESSAGE_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-update">MESSAGE_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-delete">MESSAGE_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageBulkDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-delete-bulk">MESSAGE_DELETE_BULK</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageReactionAdded">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-add">MESSAGE_REACTION_ADD</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageReactionRemoved">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-remove">MESSAGE_REACTION_REMOVE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageReactionAllRemoved">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-remove-all">MESSAGE_REACTION_REMOVE_ALL</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.MessageReactionEmojiRemoved">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#message-reaction-remove-emoji">MESSAGE_REACTION_REMOVE_EMOJI</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.PresenceUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#presence-update">PRESENCE_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.PresenceReplace">
            <summary>
            Represents the <a href="">PRESENCES_REPLACE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.TypingStarted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#typing-start">TYPING_START</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.UserUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#user-update">USER_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.VoiceStateUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#voice-state-update">VOICE_STATE_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.VoiceServerUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#voice-server-update">VOICE_SERVER_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.WebhooksUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#webhooks-update">WEBHOOKS_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.InviteCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#invite-create">INVITE_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.InviteDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#invite-delete">INVITE_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.InteractionCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#interaction-create">INTERACTION_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.GuildJoinRequestDeleted">
            <summary>
            Represents the <a href="">GUILD_JOIN_REQUEST_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ThreadCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#thread-create">THREAD_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ThreadUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#thread-update">THREAD_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ThreadDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#thread-delete">THREAD_DELETE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ThreadListSync">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#thread-list-sync">THREAD_LIST_SYNC</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ThreadMemberUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#thread-member-update">THREAD_MEMBER_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.ThreadMembersUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#thread-members-update">THREAD_MEMBERS_UPDATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.StageInstanceCreated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#stage-instance-create">STAGE_INSTANCE_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.StageInstanceUpdated">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#stage-instance-update">STAGE_INSTANCE_CREATE</a> gateway event
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.DispatchCode.StageInstanceDeleted">
            <summary>
            Represents the <a href="https://Rocket.com/developers/docs/topics/gateway#stage-instance-delete">STAGE_INSTANCE_CREATE</a> gateway event
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.WebSockets.Handlers.HeartbeatHandler">
            <summary>
            Handles the heartbeating for the websocket connection
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.Handlers.HeartbeatHandler.HeartbeatAcknowledged">
            <summary>
            Rocket Acknowledged our heartbeat successfully 
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Handlers.HeartbeatHandler.#ctor(Oxide.Ext.Rocket.BotClient,Oxide.Ext.Rocket.WebSockets.Socket,Oxide.Ext.Rocket.WebSockets.SocketListener,Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            Constructor for Heartbeat Handler
            </summary>
            <param name="client">Client for the handler</param>
            <param name="socket">Socket for the heartbeat</param>
            <param name="listener">Socket Listener for the client</param>
            <param name="logger">Logger for the bot</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Handlers.HeartbeatHandler.SetupHeartbeat(System.Single)">
            <summary>
            Setup a heartbeat for this bot with the given interval
            </summary>
            <param name="interval"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Handlers.HeartbeatHandler.DestroyHeartbeat">
            <summary>
            Destroy the heartbeat on this bot
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Handlers.HeartbeatHandler.SendHeartbeat">
            <summary>
            Sends a heartbeat to Rocket.
            If the previous heartbeat wasn't acknowledged then we will attempt to reconnect
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.WebSockets.Handlers.SocketCommandHandler">
            <summary>
            Handles command queueing when the websocket is down
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Handlers.SocketCommandHandler.#ctor(Oxide.Ext.Rocket.WebSockets.Socket,Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            Constructor
            </summary>
            <param name="webSocket">Websocket to handle commands for</param>
            <param name="logger">Logger for this handler</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Handlers.SocketCommandHandler.Enqueue(Oxide.Ext.Rocket.Entities.Gatway.CommandPayload)">
            <summary>
            Enqueue a payload to be sent over the websocket
            If the websocket is connected it will be sent immediately
            If the websocket is not connected it will be queued until it is back online
            </summary>
            <param name="command">Command to send over the websocket</param>
        </member>
        <member name="T:Oxide.Ext.Rocket.WebSockets.Socket">
            <summary>
            Represents a websocket that connects to Rocket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.Socket.RequestedReconnect">
            <summary>
            If we should attempt to reconnect to Rocket on disconnect
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.Socket.ShouldAttemptResume">
            <summary>
            If we should attempt to resume our previous session after connecting
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.Socket._reconnectTimer">
            <summary>
            Timer to use when attempting to reconnect to Rocket due to an error
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.#ctor(Oxide.Ext.Rocket.BotClient,Oxide.Ext.Rocket.Logging.ILogger)">
            <summary>
            Socket used by the BotClient
            </summary>
            <param name="client">Client using the socket</param>
            <param name="logger">Logger for the bot client</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.Connect">
            <summary>
            Connect to the websocket
            </summary>
            <exception cref="T:System.Exception">Thrown if the socket still exists. Must call disconnect before trying to connect</exception>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.Disconnect(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Disconnects the websocket from Rocket
            </summary>
            <param name="attemptReconnect">Should we attempt to reconnect to Rocket after disconnecting</param>
            <param name="shouldResume">Should we attempt to resume our previous session</param>
            <param name="requested">If Rocket requested that we reconnect to Rocket</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.IsCurrentSocket(WebSocketSharp.WebSocket)">
            <summary>
            Returns if the given websocket matches our current websocket.
            If socket is null we return false
            </summary>
            <param name="socket">Socket to compare</param>
            <returns>True if current socket is not null and socket matches current socket; False otherwise.</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.Shutdown">
            <summary>
            Shutdowns the websocket completely. Used when bot is being shutdown
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.DisposeSocket">
            <summary>
            Called when a websocket is closed to remove previous socket
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.Send(Oxide.Ext.Rocket.Entities.Gatway.Commands.GatewayCommandCode,System.Object)">
            <summary>
            Send a command to Rocket over the websocket
            </summary>
            <param name="opCode">Command code to send</param>
            <param name="data">Data to send</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.IsConnected">
            <summary>
            Returns if the websocket is in the open state
            </summary>
            <returns>Returns if the websocket is in open state</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.IsConnecting">
            <summary>
            Returns if the websocket is in the connecting state
            </summary>
            <returns>Returns if the websocket is in connecting state</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.IsPendingReconnect">
            <summary>
            Returns if the socket is waiting to reconnect
            </summary>
            <returns>Returns if the socket is waiting to reconnect</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.IsDisconnected">
            <summary>
            Returns if the websocket is null or is currently closing / closed
            </summary>
            <returns>Returns if the websocket is null or is currently closing / closed</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.Socket.Reconnect">
            <summary>
            Reconnects the socket to the gateway.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.WebSockets.SocketCloseCode">
            <summary>
            Represents <a href="https://Rocket.com/developers/docs/topics/opcodes-and-status-codes#gateway-gateway-close-event-codes">Socket Close Event Codes</a>
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.UnknownError">
            <summary>
            We're not sure what went wrong. Try reconnecting?
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.UnknownOpcode">
            <summary>
            You sent an invalid Gateway opcode or an invalid payload for an opcode. Don't do that!
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.DecodeError">
            <summary>
            You sent an invalid payload to us. Don't do that!
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.NotAuthenticated">
            <summary>
            You sent us a payload prior to identifying.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.AuthenticationFailed">
            <summary>
            The account token sent with your identify payload is incorrect.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.AlreadyAuthenticated">
            <summary>
            You sent more than one identify payload. Don't do that!
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.InvalidSequence">
            <summary>
            The sequence sent when resuming the session was invalid. Reconnect and start a new session.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.RateLimited">
            <summary>
            Woah nelly! You're sending payloads to us too quickly. Slow it down! You will be disconnected on receiving this.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.SessionTimedOut">
            <summary>
            Your session timed out. Reconnect and start a new one.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.InvalidShard">
            <summary>
            You sent us an invalid shard when identifying.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.ShardingRequired">
            <summary>
            The session would have handled too many guilds - you are required to shard your connection in order to connect.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.InvalidApiVersion">
            <summary>
            You sent an invalid version for the gateway.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.InvalidIntents">
            <summary>
            You sent an invalid intent for a Gateway Intent. You may have incorrectly calculated the bitwise value.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.DisallowedIntent">
            <summary>
            You sent a disallowed intent for a Gateway Intent. You may have tried to specify an intent that you have not enabled or are not whitelisted for.
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketCloseCode.UnknownCloseCode">
            <summary>
            Used when a code is sent that we don't have yet.
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.WebSockets.SocketListener">
            <summary>
            Represents a listens for socket events
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketListener._sessionId">
            <summary>
            The current session ID for the connected bot
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketListener._sequence">
            <summary>
            The current sequence number for the websocket
            </summary>
        </member>
        <member name="P:Oxide.Ext.Rocket.WebSockets.SocketListener.SocketHasConnected">
            <summary>
            If the bot has successfully connected to the websocket at least once
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.#ctor(Oxide.Ext.Rocket.BotClient,Oxide.Ext.Rocket.WebSockets.Socket,Oxide.Ext.Rocket.Logging.ILogger,Oxide.Ext.Rocket.WebSockets.Handlers.SocketCommandHandler)">
            <summary>
            Creates a new socket listener
            </summary>
            <param name="client">Client this listener is for</param>
            <param name="socket">Socket this listener is for</param>
            <param name="logger">Logger for the client</param>
            <param name="commands">Socket Command Handler</param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.Shutdown">
            <summary>
            Shutdown the SocketListener
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.SocketOpened(System.Object,System.EventArgs)">
            <summary>
            Called when a socket is open
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.SocketClosed(System.Object,WebSocketSharp.CloseEventArgs)">
            <summary>
            Called when a socket is closed
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.HandleRocketClosedSocket(System.Int32,System.String)">
            <summary>
            Parse out the closing reason if Rocket closed the socket
            </summary>
            <param name="code">Socket close code</param>
            <param name="reason">Socket close reason</param>
            <returns>True if Rocket closed the socket with one of it's close codes</returns>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.SocketErrored(System.Object,WebSocketSharp.ErrorEventArgs)">
            <summary>
            Called when an error occurs on a socket
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.SocketMessage(System.Object,WebSocketSharp.MessageEventArgs)">
            <summary>
            Called when a socket receives a message
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.HandleDispatchPresenceUpdate(Oxide.Ext.Rocket.Entities.Gatway.EventPayload)">
            <summary>
             * From Rocket API docs:
             * The user object within this event can be partial, the only field which must be sent is the id field, everything else is optional.
             * Along with this limitation, no fields are required, and the types of the fields are not validated.
             * Your client should expect any combination of fields and types within this event
            </summary>
            <param name="payload"></param>
            https://Rocket.com/developers/docs/topics/gateway#presence-update
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.SendHeartbeat">
            <summary>
            Sends a heartbeat to Rocket
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.Identify">
            <summary>
            Used to Identify the bot with Rocket
            </summary>
        </member>
        <member name="M:Oxide.Ext.Rocket.WebSockets.SocketListener.Resume(System.String,System.Int32)">
            <summary>
            Used to resume the current session with Rocket
            </summary>
        </member>
        <member name="T:Oxide.Ext.Rocket.WebSockets.SocketState">
            <summary>
            Represents our current state for the websocket
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketState.Disconnected">
            <summary>
            Websocket is currently disconnect and not waiting to connect
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketState.Connected">
            <summary>
            Socket is connect and functioning normally
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketState.Connecting">
            <summary>
            Socket is in the process of connecting
            </summary>
        </member>
        <member name="F:Oxide.Ext.Rocket.WebSockets.SocketState.PendingReconnect">
            <summary>
            Socket is waiting to reconnect to the websocket
            </summary>
        </member>
    </members>
</doc>
